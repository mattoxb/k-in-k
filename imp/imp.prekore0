[]

module BASIC-K
  sort SortK{} []
  sort SortKItem{} []
endmodule []

module KSEQ
  import BASIC-K []

  symbol kseq{}(SortKItem{}, SortK{}) : SortK{} []
  symbol append{}(SortK{}, SortK{}) : SortK{} [function{}()]
  symbol dotk{}() : SortK{} []

  axiom{R}
    \equals{SortK{},R}(
      append{}(dotk{}(),K2:SortK{}),
      K2:SortK{})
  []

  axiom{R}
    \equals{SortK{},R}(
      append{}(kseq{}(K1:SortKItem{},K2:SortK{}),K3:SortK{}),
      kseq{}(K1:SortKItem{},append{}(K2:SortK{},K3:SortK{})))
  []

endmodule []

module INJ
  symbol inj{From,To}(From) : To []

  axiom{S1,S2,S3,R}
    \equals{S3,R}(
      inj{S2,S3}(inj{S1,S2}(T:S1)),
      inj{S1,S3}(T:S1))
  []

endmodule []

module K
  import KSEQ []
  import INJ []
endmodule []

module IMP

// imports
  import K []

// sorts
  sort SortList{} [org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(197,3,197,31)"), hook{}("LIST.List"), element{}(LblListItem{}()), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/Users/manasvi/Projects/k-in-k/ext/k/k-distribution/target/release/k/include/builtin/domains.k)"), concat{}(Lbl'Unds'List'Unds'{}()), unit{}(Lbl'Stop'List{}())]
  hooked-sort SortString{} [org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(480,3,480,37)"), hook{}("STRING.String"), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/Users/manasvi/Projects/k-in-k/ext/k/k-distribution/target/release/k/include/builtin/domains.k)")]
  sort SortStateCell{} []
  sort SortTCell{} []
  sort SortIds{} []
  sort SortBExp{} []
  sort SortId{} [token{}(), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(697,3,697,19)"), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/Users/manasvi/Projects/k-in-k/ext/k/k-distribution/target/release/k/include/builtin/domains.k)")]
  sort SortCell{} []
  hooked-sort SortBool{} [org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(263,3,263,31)"), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/Users/manasvi/Projects/k-in-k/ext/k/k-distribution/target/release/k/include/builtin/domains.k)"), hook{}("BOOL.Bool")]
  sort SortKCell{} []
  sort SortKResult{} []
  sort SortMap{} [org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(87,3,87,28)"), hook{}("MAP.Map"), element{}(Lbl'UndsPipe'-'-GT-Unds'{}()), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/Users/manasvi/Projects/k-in-k/ext/k/k-distribution/target/release/k/include/builtin/domains.k)"), concat{}(Lbl'Unds'Map'Unds'{}()), unit{}(Lbl'Stop'Map{}())]
  sort SortStmt{} []
  hooked-sort SortInt{} [org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(320,3,320,28)"), hook{}("INT.Int"), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/Users/manasvi/Projects/k-in-k/ext/k/k-distribution/target/release/k/include/builtin/domains.k)")]
  hooked-sort SortFloat{} [hook{}("FLOAT.Float"), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/Users/manasvi/Projects/k-in-k/ext/k/k-distribution/target/release/k/include/builtin/domains.k)"), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(402,3,402,34)")]
  sort SortPgm{} []
  sort SortBlock{} []
  sort SortSet{} [org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(153,3,153,28)"), hook{}("SET.Set"), element{}(LblSetItem{}()), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/Users/manasvi/Projects/k-in-k/ext/k/k-distribution/target/release/k/include/builtin/domains.k)"), concat{}(Lbl'Unds'Set'Unds'{}()), unit{}(Lbl'Stop'Set{}())]
  sort SortAExp{} []

// symbols
  symbol Lbl-'UndsUnds'IMP-SYNTAX'UndsUnds'Int{}(SortInt{}) : SortAExp{} [org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(6,20,6,66)"), functional{}(), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/Users/manasvi/Projects/k-in-k/imp/./imp.k)"), originalPrd{}(), constructor{}(), productionID{}("300983713"), symbol'Kywd'{}("unaryMinus")]
  symbol Lbl'UndsSlshUndsUnds'IMP-SYNTAX'UndsUnds'AExp'Unds'AExp{}(SortAExp{}, SortAExp{}) : SortAExp{} [org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(7,20,7,77)"), functional{}(), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/Users/manasvi/Projects/k-in-k/imp/./imp.k)"), originalPrd{}(), left{}(), constructor{}(), productionID{}("284686302"), strict{}(""), symbol'Kywd'{}("divAExp")]


  symbol LblinitKCell{}(SortMap{}) : SortKCell{} [initializer{}(), function{}(), noThread{}(), originalPrd{}()]
  symbol Lbl'Hash'unknownIOError'LParUndsRParUnds'K-IO'UndsUnds'Int{}(SortInt{}) : SortIOError{} [klabel{}("#unknownIOError"), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(760,44,760,63)"), functional{}(), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/Users/manasvi/Projects/k-in-k/ext/k/k-distribution/target/release/k/include/builtin/domains.k)"), originalPrd{}(), constructor{}(), productionID{}("2103569237")]
  symbol Lbl'Stop'Set{}() : SortSet{} [klabel{}(".Set"), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(161,18,161,122)"), hook{}("SET.unit"), functional{}(), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/Users/manasvi/Projects/k-in-k/ext/k/k-distribution/target/release/k/include/builtin/domains.k)"), originalPrd{}(), constructor{}(), productionID{}("405896924"), latex{}("\\dotCt{Set}"), symbol'Kywd'{}(""), function{}()]
  hooked-symbol LblbitRangeInt'LParUndsCommUndsCommUndsRParUnds'INT'UndsUnds'Int'Unds'Int'Unds'Int{}(SortInt{}, SortInt{}, SortInt{}) : SortInt{} [klabel{}("bitRangeInt"), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(364,18,364,108)"), hook{}("INT.bitRange"), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/Users/manasvi/Projects/k-in-k/ext/k/k-distribution/target/release/k/include/builtin/domains.k)"), originalPrd{}(), productionID{}("1593458942"), function{}()]
  hooked-symbol Lbl'Hash'sort'LParUndsRParUnds'K-REFLECTION'UndsUnds'K{}(SortK{}) : SortString{} [klabel{}("#sort"), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(743,21,743,63)"), hook{}("KREFLECTION.sort"), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/Users/manasvi/Projects/k-in-k/ext/k/k-distribution/target/release/k/include/builtin/domains.k)"), originalPrd{}(), productionID{}("837659261"), function{}()]
  hooked-symbol LblString2Id'LParUndsRParUnds'ID-SYNTAX'UndsUnds'String{}(SortString{}) : SortId{} [klabel{}("String2Id"), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(700,17,700,84)"), hook{}("STRING.string2token"), functional{}(), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/Users/manasvi/Projects/k-in-k/ext/k/k-distribution/target/release/k/include/builtin/domains.k)"), originalPrd{}(), productionID{}("702025003"), function{}()]
  symbol Lbl'Hash'EBADF'Unds'K-IO'Unds'{}() : SortIOError{} [org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(764,22,764,29)"), functional{}(), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/Users/manasvi/Projects/k-in-k/ext/k/k-distribution/target/release/k/include/builtin/domains.k)"), originalPrd{}(), constructor{}(), productionID{}("1046665075")]
  hooked-symbol Lblkeys'Unds'list'LParUndsRParUnds'MAP'UndsUnds'Map{}(SortMap{}) : SortList{} [org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(132,19,132,79)"), hook{}("MAP.keys_list"), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/Users/manasvi/Projects/k-in-k/ext/k/k-distribution/target/release/k/include/builtin/domains.k)"), originalPrd{}(), productionID{}("102174918"), function{}()]
  symbol Lbl'Hash'ESPIPE'Unds'K-IO'Unds'{}() : SortIOError{} [org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(795,22,795,30)"), functional{}(), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/Users/manasvi/Projects/k-in-k/ext/k/k-distribution/target/release/k/include/builtin/domains.k)"), originalPrd{}(), constructor{}(), productionID{}("394785440")]
  symbol Lbl'Hash'EOVERFLOW'Unds'K-IO'Unds'{}() : SortIOError{} [org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(828,22,828,33)"), functional{}(), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/Users/manasvi/Projects/k-in-k/ext/k/k-distribution/target/release/k/include/builtin/domains.k)"), originalPrd{}(), constructor{}(), productionID{}("1261198850")]
  hooked-symbol Lbl'Unds-GT-Eqls'Int'UndsUnds'INT'UndsUnds'Int'Unds'Int{}(SortInt{}, SortInt{}) : SortBool{} [org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(384,19,384,149)"), hook{}("INT.ge"), functional{}(), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/Users/manasvi/Projects/k-in-k/ext/k/k-distribution/target/release/k/include/builtin/domains.k)"), originalPrd{}(), left{}(), productionID{}("1237912220"), latex{}("{#1}\\mathrel{\\geq_{\\scriptstyle\\it Int}}{#2}"), smtlib{}(">="), function{}()]
  hooked-symbol Lbl'UndsEqlsEqls'String'UndsUnds'STRING'UndsUnds'String'Unds'String{}(SortString{}, SortString{}) : SortBool{} [org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(492,19,492,88)"), hook{}("STRING.eq"), functional{}(), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/Users/manasvi/Projects/k-in-k/ext/k/k-distribution/target/release/k/include/builtin/domains.k)"), originalPrd{}(), left{}(), productionID{}("352367347"), function{}()]
  hooked-symbol Lbl'Unds'xorInt'UndsUnds'INT'UndsUnds'Int'Unds'Int{}(SortInt{}, SortInt{}) : SortInt{} [org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(356,18,356,146)"), hook{}("INT.xor"), functional{}(), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/Users/manasvi/Projects/k-in-k/ext/k/k-distribution/target/release/k/include/builtin/domains.k)"), originalPrd{}(), left{}(), productionID{}("2038522556"), latex{}("{#1}\\mathrel{\\oplus_{\\scriptstyle\\it Int}}{#2}"), function{}()]
  symbol Lbl'BangUndsUnds'IMP-SYNTAX'UndsUnds'BExp{}(SortBExp{}) : SortBExp{} [org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(12,20,12,77)"), functional{}(), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/Users/manasvi/Projects/k-in-k/imp/./imp.k)"), originalPrd{}(), constructor{}(), productionID{}("1581078471"), strict{}(""), symbol'Kywd'{}("unaryNegation")]
  symbol Lbl'Hash'ENFILE'Unds'K-IO'Unds'{}() : SortIOError{} [org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(779,22,779,30)"), functional{}(), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/Users/manasvi/Projects/k-in-k/ext/k/k-distribution/target/release/k/include/builtin/domains.k)"), originalPrd{}(), constructor{}(), productionID{}("1281025083")]
  hooked-symbol Lbl'Hash'parse'LParUndsCommUndsRParUnds'K-IO'UndsUnds'String'Unds'String{}(SortString{}, SortString{}) : SortKItem{} [klabel{}("#parse"), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(848,20,848,80)"), hook{}("IO.parse"), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/Users/manasvi/Projects/k-in-k/ext/k/k-distribution/target/release/k/include/builtin/domains.k)"), originalPrd{}(), impure{}(), productionID{}("1270836494"), function{}()]
  hooked-symbol Lbl'UndsPlus'Int'UndsUnds'INT'UndsUnds'Int'Unds'Int{}(SortInt{}, SortInt{}) : SortInt{} [org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(348,18,348,152)"), hook{}("INT.add"), functional{}(), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/Users/manasvi/Projects/k-in-k/ext/k/k-distribution/target/release/k/include/builtin/domains.k)"), originalPrd{}(), left{}(), productionID{}("2109839984"), latex{}("{#1}\\mathrel{+_{\\scriptstyle\\it Int}}{#2}"), smtlib{}("+"), function{}()]
  symbol LblisKResult{}(SortK{}) : SortBool{} [function{}(), predicate{}("KResult"), originalPrd{}()]
  symbol Lbl'Hash'ENETUNREACH'Unds'K-IO'Unds'{}() : SortIOError{} [org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(814,22,814,35)"), functional{}(), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/Users/manasvi/Projects/k-in-k/ext/k/k-distribution/target/release/k/include/builtin/domains.k)"), originalPrd{}(), constructor{}(), productionID{}("504582810")]
  symbol Lbl'Unds'dividesInt'UndsUnds'INT'UndsUnds'Int'Unds'Int{}(SortInt{}, SortInt{}) : SortBool{} [org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(388,19,388,52)"), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/Users/manasvi/Projects/k-in-k/ext/k/k-distribution/target/release/k/include/builtin/domains.k)"), originalPrd{}(), productionID{}("1865859824"), function{}()]
  hooked-symbol Lblsize'LParUndsRParUnds'MAP'UndsUnds'Map{}(SortMap{}) : SortInt{} [klabel{}("sizeMap"), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(140,18,140,103)"), hook{}("MAP.size"), functional{}(), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/Users/manasvi/Projects/k-in-k/ext/k/k-distribution/target/release/k/include/builtin/domains.k)"), originalPrd{}(), productionID{}("1242027525"), function{}()]
  hooked-symbol Lbl'UndsEqlsSlshEqls'Int'UndsUnds'INT'UndsUnds'Int'Unds'Int{}(SortInt{}, SortInt{}) : SortBool{} [org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(387,19,387,160)"), hook{}("INT.ne"), functional{}(), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/Users/manasvi/Projects/k-in-k/ext/k/k-distribution/target/release/k/include/builtin/domains.k)"), originalPrd{}(), left{}(), productionID{}("1848289347"), latex{}("{#1}\\mathrel{{=}{/}{=}_{\\scriptstyle\\it Int}}{#2}"), smtlib{}("distinct"), function{}()]
  symbol Lbl'Hash'EOF'Unds'K-IO'Unds'{}() : SortIOError{} [org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(760,22,760,27)"), functional{}(), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/Users/manasvi/Projects/k-in-k/ext/k/k-distribution/target/release/k/include/builtin/domains.k)"), originalPrd{}(), constructor{}(), productionID{}("1408482749")]
  symbol Lbl'Hash'EXDEV'Unds'K-IO'Unds'{}() : SortIOError{} [org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(797,22,797,29)"), functional{}(), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/Users/manasvi/Projects/k-in-k/ext/k/k-distribution/target/release/k/include/builtin/domains.k)"), originalPrd{}(), constructor{}(), productionID{}("372469954")]
  hooked-symbol LblcountAllOccurrences'LParUndsCommUndsRParUnds'STRING'UndsUnds'String'Unds'String{}(SortString{}, SortString{}) : SortInt{} [org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(516,18,516,132)"), hook{}("STRING.countAllOccurrences"), functional{}(), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/Users/manasvi/Projects/k-in-k/ext/k/k-distribution/target/release/k/include/builtin/domains.k)"), originalPrd{}(), productionID{}("2113604623"), function{}()]
  hooked-symbol LblchrChar'LParUndsRParUnds'STRING'UndsUnds'Int{}(SortInt{}) : SortString{} [klabel{}("chrChar"), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(495,21,495,69)"), hook{}("STRING.chr"), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/Users/manasvi/Projects/k-in-k/ext/k/k-distribution/target/release/k/include/builtin/domains.k)"), originalPrd{}(), productionID{}("308433917"), function{}()]
  symbol Lbl'Hash'EADDRNOTAVAIL'Unds'K-IO'Unds'{}() : SortIOError{} [org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(812,22,812,37)"), functional{}(), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/Users/manasvi/Projects/k-in-k/ext/k/k-distribution/target/release/k/include/builtin/domains.k)"), originalPrd{}(), constructor{}(), productionID{}("2003147568")]
  hooked-symbol LblString2Float'LParUndsRParUnds'STRING'UndsUnds'String{}(SortString{}) : SortFloat{} [klabel{}("String2Float"), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(506,21,506,93)"), hook{}("STRING.string2float"), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/Users/manasvi/Projects/k-in-k/ext/k/k-distribution/target/release/k/include/builtin/domains.k)"), originalPrd{}(), productionID{}("2142565033"), function{}()]
  hooked-symbol LblrandInt'LParUndsRParUnds'INT'UndsUnds'Int{}(SortInt{}) : SortInt{} [klabel{}("randInt"), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(397,18,397,56)"), hook{}("INT.rand"), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/Users/manasvi/Projects/k-in-k/ext/k/k-distribution/target/release/k/include/builtin/domains.k)"), originalPrd{}(), productionID{}("304354378"), function{}()]
  hooked-symbol LblreplaceFirst'LParUndsCommUndsCommUndsRParUnds'STRING'UndsUnds'String'Unds'String'Unds'String{}(SortString{}, SortString{}, SortString{}) : SortString{} [org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(515,21,515,124)"), hook{}("STRING.replaceFirst"), functional{}(), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/Users/manasvi/Projects/k-in-k/ext/k/k-distribution/target/release/k/include/builtin/domains.k)"), originalPrd{}(), productionID{}("2101249621"), function{}()]
  hooked-symbol Lbl'Unds-LT-Eqls'Int'UndsUnds'INT'UndsUnds'Int'Unds'Int{}(SortInt{}, SortInt{}) : SortBool{} [org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(382,19,382,149)"), hook{}("INT.le"), functional{}(), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/Users/manasvi/Projects/k-in-k/ext/k/k-distribution/target/release/k/include/builtin/domains.k)"), originalPrd{}(), left{}(), productionID{}("479920916"), latex{}("{#1}\\mathrel{\\leq_{\\scriptstyle\\it Int}}{#2}"), smtlib{}("<="), function{}()]
  symbol Lblint'UndsSClnUndsUnds'IMP-SYNTAX'UndsUnds'Ids'Unds'Stmt{}(SortIds{}, SortStmt{}) : SortPgm{} [org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(23,18,23,59)"), functional{}(), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/Users/manasvi/Projects/k-in-k/imp/./imp.k)"), originalPrd{}(), constructor{}(), productionID{}("858204589"), symbol'Kywd'{}("Pgm")]
  hooked-symbol Lbl'UndsEqlsEqls'K'Unds'{}(SortK{}, SortK{}) : SortBool{} [klabel{}("_==K_"), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(723,21,723,156)"), equalEqualK{}(), hook{}("KEQUAL.eq"), functional{}(), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/Users/manasvi/Projects/k-in-k/ext/k/k-distribution/target/release/k/include/builtin/domains.k)"), originalPrd{}(), productionID{}("131872530"), latex{}("{#1}\\mathrel{=_K}{#2}"), smtlib{}("="), symbol'Kywd'{}(""), function{}()]
  hooked-symbol Lbllog2Int'LParUndsRParUnds'INT'UndsUnds'Int{}(SortInt{}) : SortInt{} [klabel{}("log2Int"), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(362,18,362,74)"), hook{}("INT.log2"), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/Users/manasvi/Projects/k-in-k/ext/k/k-distribution/target/release/k/include/builtin/domains.k)"), originalPrd{}(), productionID{}("1569754439"), function{}()]
  symbol Lbl'Hash'EACCES'Unds'K-IO'Unds'{}() : SortIOError{} [org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(762,22,762,30)"), functional{}(), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/Users/manasvi/Projects/k-in-k/ext/k/k-distribution/target/release/k/include/builtin/domains.k)"), originalPrd{}(), constructor{}(), productionID{}("1819940427")]
  hooked-symbol LblListItem{}(SortK{}) : SortList{} [klabel{}("ListItem"), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(235,19,235,132)"), hook{}("LIST.element"), functional{}(), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/Users/manasvi/Projects/k-in-k/ext/k/k-distribution/target/release/k/include/builtin/domains.k)"), originalPrd{}(), productionID{}("177140066"), smtlib{}("smt_seq_elem"), symbol'Kywd'{}(""), function{}()]
  symbol LblisStateCellOpt{}(SortK{}) : SortBool{} [function{}(), predicate{}("StateCellOpt"), originalPrd{}()]
  symbol Lbl'Hash'ENOPROTOOPT'Unds'K-IO'Unds'{}() : SortIOError{} [org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(805,22,805,35)"), functional{}(), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/Users/manasvi/Projects/k-in-k/ext/k/k-distribution/target/release/k/include/builtin/domains.k)"), originalPrd{}(), constructor{}(), productionID{}("208043846")]
  symbol Lbl'Hash'EAGAIN'Unds'K-IO'Unds'{}() : SortIOError{} [org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(763,22,763,30)"), functional{}(), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/Users/manasvi/Projects/k-in-k/ext/k/k-distribution/target/release/k/include/builtin/domains.k)"), originalPrd{}(), constructor{}(), productionID{}("1277933280")]
  hooked-symbol Lbl'Unds-LT-'String'UndsUnds'STRING'UndsUnds'String'Unds'String{}(SortString{}, SortString{}) : SortBool{} [org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(522,19,522,82)"), hook{}("STRING.lt"), functional{}(), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/Users/manasvi/Projects/k-in-k/ext/k/k-distribution/target/release/k/include/builtin/domains.k)"), originalPrd{}(), productionID{}("379303133"), function{}()]
  symbol Lbl'Hash'ENETDOWN'Unds'K-IO'Unds'{}() : SortIOError{} [org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(813,22,813,32)"), functional{}(), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/Users/manasvi/Projects/k-in-k/ext/k/k-distribution/target/release/k/include/builtin/domains.k)"), originalPrd{}(), constructor{}(), productionID{}("1164799006")]
  hooked-symbol LblordChar'LParUndsRParUnds'STRING'UndsUnds'String{}(SortString{}) : SortInt{} [klabel{}("ordChar"), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(496,18,496,69)"), hook{}("STRING.ord"), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/Users/manasvi/Projects/k-in-k/ext/k/k-distribution/target/release/k/include/builtin/domains.k)"), originalPrd{}(), productionID{}("1473981203"), function{}()]
  symbol LblisKCellOpt{}(SortK{}) : SortBool{} [function{}(), predicate{}("KCellOpt"), originalPrd{}()]
  symbol Lbl'Hash'EISCONN'Unds'K-IO'Unds'{}() : SortIOError{} [org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(819,22,819,31)"), functional{}(), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/Users/manasvi/Projects/k-in-k/ext/k/k-distribution/target/release/k/include/builtin/domains.k)"), originalPrd{}(), constructor{}(), productionID{}("1023268896")]
  symbol Lbl'Hash'EPIPE'Unds'K-IO'Unds'{}() : SortIOError{} [org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(792,22,792,29)"), functional{}(), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/Users/manasvi/Projects/k-in-k/ext/k/k-distribution/target/release/k/include/builtin/domains.k)"), originalPrd{}(), constructor{}(), productionID{}("333392524")]
  symbol Lbl'Hash'ECONNABORTED'Unds'K-IO'Unds'{}() : SortIOError{} [org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(816,22,816,36)"), functional{}(), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/Users/manasvi/Projects/k-in-k/ext/k/k-distribution/target/release/k/include/builtin/domains.k)"), originalPrd{}(), constructor{}(), productionID{}("1160649162")]
  symbol Lbl'Hash'ESRCH'Unds'K-IO'Unds'{}() : SortIOError{} [org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(796,22,796,29)"), functional{}(), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/Users/manasvi/Projects/k-in-k/ext/k/k-distribution/target/release/k/include/builtin/domains.k)"), originalPrd{}(), constructor{}(), productionID{}("2112233878")]
  symbol Lbl'UndsEqlsUndsSClnUnds'IMP-SYNTAX'UndsUnds'Id'Unds'AExp{}(SortId{}, SortAExp{}) : SortStmt{} [org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(18,20,18,73)"), functional{}(), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/Users/manasvi/Projects/k-in-k/imp/./imp.k)"), originalPrd{}(), constructor{}(), productionID{}("417557780"), strict{}("2"), symbol'Kywd'{}("assign")]
  hooked-symbol Lbl'Hash'configuration'Unds'K-REFLECTION'Unds'{}() : SortK{} [org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(742,16,742,83)"), hook{}("KREFLECTION.configuration"), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/Users/manasvi/Projects/k-in-k/ext/k/k-distribution/target/release/k/include/builtin/domains.k)"), originalPrd{}(), impure{}(), productionID{}("736920911"), function{}()]
  hooked-symbol Lbl'Hash'argv'LParRParUnds'K-REFLECTION'Unds'{}() : SortList{} [klabel{}("#argv"), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(752,19,752,60)"), hook{}("KREFLECTION.argv"), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/Users/manasvi/Projects/k-in-k/ext/k/k-distribution/target/release/k/include/builtin/domains.k)"), originalPrd{}(), productionID{}("1766911337"), function{}()]
  symbol Lbl'Hash'EOPNOTSUPP'Unds'K-IO'Unds'{}() : SortIOError{} [org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(808,22,808,34)"), functional{}(), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/Users/manasvi/Projects/k-in-k/ext/k/k-distribution/target/release/k/include/builtin/domains.k)"), originalPrd{}(), constructor{}(), productionID{}("457247584")]
  symbol LblisBool{}(SortK{}) : SortBool{} [function{}(), predicate{}("Bool"), originalPrd{}()]
  hooked-symbol Lbl'Hash'seek'LParUndsCommUndsRParUnds'K-IO'UndsUnds'Int'Unds'Int{}(SortInt{}, SortInt{}) : SortK{} [org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(837,16,837,76)"), hook{}("IO.seek"), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/Users/manasvi/Projects/k-in-k/ext/k/k-distribution/target/release/k/include/builtin/domains.k)"), originalPrd{}(), impure{}(), productionID{}("1578587450"), function{}()]
  hooked-symbol Lbl'UndsLSqBUnds-LT-'-undef'RSqB'{}(SortMap{}, SortK{}) : SortMap{} [klabel{}("_[_<-undef]"), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(116,18,116,117)"), hook{}("MAP.remove"), functional{}(), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/Users/manasvi/Projects/k-in-k/ext/k/k-distribution/target/release/k/include/builtin/domains.k)"), originalPrd{}(), productionID{}("718571091"), symbol'Kywd'{}(""), function{}()]
  hooked-symbol Lbl'UndsAnd'Int'UndsUnds'INT'UndsUnds'Int'Unds'Int{}(SortInt{}, SortInt{}) : SortInt{} [org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(354,18,354,142)"), hook{}("INT.and"), functional{}(), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/Users/manasvi/Projects/k-in-k/ext/k/k-distribution/target/release/k/include/builtin/domains.k)"), originalPrd{}(), left{}(), productionID{}("1179792105"), latex{}("{#1}\\mathrel{\\&_{\\scriptstyle\\it Int}}{#2}"), function{}()]
  symbol Lbl'Hash'ENOSPC'Unds'K-IO'Unds'{}() : SortIOError{} [org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(785,22,785,30)"), functional{}(), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/Users/manasvi/Projects/k-in-k/ext/k/k-distribution/target/release/k/include/builtin/domains.k)"), originalPrd{}(), constructor{}(), productionID{}("136157810")]
  hooked-symbol Lbl'UndsPlus'String'UndsUnds'STRING'UndsUnds'String'Unds'String{}(SortString{}, SortString{}) : SortString{} [org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(490,21,490,139)"), hook{}("STRING.concat"), functional{}(), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/Users/manasvi/Projects/k-in-k/ext/k/k-distribution/target/release/k/include/builtin/domains.k)"), originalPrd{}(), left{}(), productionID{}("684566052"), latex{}("{#1}+_{\\scriptstyle\\it String}{#2}"), function{}()]
  symbol Lbl'-LT-'T'-GT-'{}(SortKCell{}, SortStateCell{}) : SortTCell{} [org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(33,17,36,21)"), contentStartColumn{}("17"), org'Stop'kframework'Stop'definition'Stop'Production{}("syntax RuleContent ::= K"), functional{}(), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/Users/manasvi/Projects/k-in-k/imp/./imp.k)"), contentStartLine{}("33"), color{}("yellow"), format{}("%1%i%n%2%n%3%d%n%4"), originalPrd{}(), topcell{}(), constructor{}(), cell{}()]
  hooked-symbol Lbl'Hash'seekEnd'LParUndsCommUndsRParUnds'K-IO'UndsUnds'Int'Unds'Int{}(SortInt{}, SortInt{}) : SortK{} [org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(838,16,838,82)"), hook{}("IO.seekEnd"), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/Users/manasvi/Projects/k-in-k/ext/k/k-distribution/target/release/k/include/builtin/domains.k)"), originalPrd{}(), impure{}(), productionID{}("1052317717"), function{}()]
  hooked-symbol Lbl'Unds-LT-Eqls'String'UndsUnds'STRING'UndsUnds'String'Unds'String{}(SortString{}, SortString{}) : SortBool{} [org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(523,19,523,82)"), hook{}("STRING.le"), functional{}(), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/Users/manasvi/Projects/k-in-k/ext/k/k-distribution/target/release/k/include/builtin/domains.k)"), originalPrd{}(), productionID{}("530486389"), function{}()]
  symbol LblisTCell{}(SortK{}) : SortBool{} [function{}(), predicate{}("TCell"), originalPrd{}()]
  hooked-symbol LblSet'Coln'in{}(SortK{}, SortSet{}) : SortBool{} [klabel{}("Set:in"), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(175,19,175,102)"), hook{}("SET.in"), functional{}(), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/Users/manasvi/Projects/k-in-k/ext/k/k-distribution/target/release/k/include/builtin/domains.k)"), originalPrd{}(), productionID{}("1481818223"), symbol'Kywd'{}(""), function{}()]
  symbol Lbl'Hash'stdout'Unds'K-IO'Unds'{}() : SortInt{} [org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(857,19,857,50)"), functional{}(), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/Users/manasvi/Projects/k-in-k/ext/k/k-distribution/target/release/k/include/builtin/domains.k)"), originalPrd{}(), productionID{}("605420629"), function{}()]
  hooked-symbol Lbl'Hash'write'LParUndsCommUndsRParUnds'K-IO'UndsUnds'Int'Unds'String{}(SortInt{}, SortString{}) : SortK{} [org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(840,16,840,81)"), hook{}("IO.write"), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/Users/manasvi/Projects/k-in-k/ext/k/k-distribution/target/release/k/include/builtin/domains.k)"), originalPrd{}(), impure{}(), productionID{}("271379554"), function{}()]
  symbol Lbl'Stop'List'LBraQuotUndsCommUndsUnds'IMP-SYNTAX'UndsUnds'Id'Unds'Ids'QuotRBraUnds'Ids{}() : SortIds{} [org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(24,18,24,29)"), userList{}("*"), functional{}(), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/Users/manasvi/Projects/k-in-k/imp/./imp.k)"), originalPrd{}(), constructor{}(), productionID{}("1976752685")]
  hooked-symbol LblsrandInt'LParUndsRParUnds'INT'UndsUnds'Int{}(SortInt{}) : SortK{} [klabel{}("srandInt"), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(398,16,398,56)"), hook{}("INT.srand"), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/Users/manasvi/Projects/k-in-k/ext/k/k-distribution/target/release/k/include/builtin/domains.k)"), originalPrd{}(), productionID{}("704106237"), function{}()]
  symbol Lbl'Hash'EDEADLK'Unds'K-IO'Unds'{}() : SortIOError{} [org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(767,22,767,31)"), functional{}(), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/Users/manasvi/Projects/k-in-k/ext/k/k-distribution/target/release/k/include/builtin/domains.k)"), originalPrd{}(), constructor{}(), productionID{}("1670313965")]
  symbol Lbl'Hash'ECONNREFUSED'Unds'K-IO'Unds'{}() : SortIOError{} [org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(824,22,824,36)"), functional{}(), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/Users/manasvi/Projects/k-in-k/ext/k/k-distribution/target/release/k/include/builtin/domains.k)"), originalPrd{}(), constructor{}(), productionID{}("231311211")]
  hooked-symbol Lbl'UndsLSqBUndsRSqB'orDefault'UndsUnds'MAP'UndsUnds'Map'Unds'K'Unds'K{}(SortMap{}, SortK{}, SortK{}) : SortK{} [klabel{}("Map:lookupOrDefault"), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(110,16,110,126)"), hook{}("MAP.lookupOrDefault"), functional{}(), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/Users/manasvi/Projects/k-in-k/ext/k/k-distribution/target/release/k/include/builtin/domains.k)"), originalPrd{}(), productionID{}("1345900725"), function{}()]
  hooked-symbol Lbl'Unds'orBool'UndsUnds'BOOL'UndsUnds'Bool'Unds'Bool{}(SortBool{}, SortBool{}) : SortBool{} [org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(275,19,275,156)"), hook{}("BOOL.or"), functional{}(), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/Users/manasvi/Projects/k-in-k/ext/k/k-distribution/target/release/k/include/builtin/domains.k)"), boolOperation{}(), originalPrd{}(), left{}(), productionID{}("343812839"), latex{}("{#1}\\vee_{\\scriptstyle\\it Bool}{#2}"), smtlib{}("or"), function{}()]
  hooked-symbol Lblvalues'LParUndsRParUnds'MAP'UndsUnds'Map{}(SortMap{}) : SortList{} [klabel{}("values"), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(137,19,137,76)"), hook{}("MAP.values"), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/Users/manasvi/Projects/k-in-k/ext/k/k-distribution/target/release/k/include/builtin/domains.k)"), originalPrd{}(), productionID{}("943573036"), function{}()]
  symbol Lbl'Hash'EPROTOTYPE'Unds'K-IO'Unds'{}() : SortIOError{} [org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(804,22,804,34)"), functional{}(), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/Users/manasvi/Projects/k-in-k/ext/k/k-distribution/target/release/k/include/builtin/domains.k)"), originalPrd{}(), constructor{}(), productionID{}("1822525972")]
  symbol Lbl'Hash'EAFNOSUPPORT'Unds'K-IO'Unds'{}() : SortIOError{} [org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(810,22,810,36)"), functional{}(), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/Users/manasvi/Projects/k-in-k/ext/k/k-distribution/target/release/k/include/builtin/domains.k)"), originalPrd{}(), constructor{}(), productionID{}("431506362")]
  hooked-symbol LblgetKLabel'LParUndsRParUnds'K-REFLECTION'UndsUnds'K{}(SortK{}) : SortKItem{} [klabel{}("getKLabel"), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(745,20,745,72)"), hook{}("KREFLECTION.getKLabel"), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/Users/manasvi/Projects/k-in-k/ext/k/k-distribution/target/release/k/include/builtin/domains.k)"), originalPrd{}(), productionID{}("859236022"), function{}()]
  symbol LblisIds{}(SortK{}) : SortBool{} [function{}(), predicate{}("Ids"), originalPrd{}()]
  symbol LblisStmt{}(SortK{}) : SortBool{} [function{}(), predicate{}("Stmt"), originalPrd{}()]
  hooked-symbol Lbl'Unds'andThenBool'UndsUnds'BOOL'UndsUnds'Bool'Unds'Bool{}(SortBool{}, SortBool{}) : SortBool{} [org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(273,19,273,118)"), hook{}("BOOL.andThen"), functional{}(), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/Users/manasvi/Projects/k-in-k/ext/k/k-distribution/target/release/k/include/builtin/domains.k)"), boolOperation{}(), originalPrd{}(), left{}(), productionID{}("1330247343"), smtlib{}("and"), function{}()]
  hooked-symbol Lbl'Hash'getenv'LParUndsRParUnds'K-REFLECTION'UndsUnds'String{}(SortString{}) : SortString{} [klabel{}("#getenv"), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(748,21,748,80)"), hook{}("KREFLECTION.getenv"), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/Users/manasvi/Projects/k-in-k/ext/k/k-distribution/target/release/k/include/builtin/domains.k)"), originalPrd{}(), impure{}(), productionID{}("542980314"), function{}()]
  symbol Lbl'Unds-LT-EqlsUndsUnds'IMP-SYNTAX'UndsUnds'AExp'Unds'AExp{}(SortAExp{}, SortAExp{}) : SortBExp{} [org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(11,20,11,94)"), seqstrict{}(), functional{}(), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/Users/manasvi/Projects/k-in-k/imp/./imp.k)"), originalPrd{}(), constructor{}(), productionID{}("1810923540"), latex{}("{#1}\\leq{#2}"), symbol'Kywd'{}("ltAExp")]
  symbol Lbl'Hash'ENXIO'Unds'K-IO'Unds'{}() : SortIOError{} [org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(790,22,790,29)"), functional{}(), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/Users/manasvi/Projects/k-in-k/ext/k/k-distribution/target/release/k/include/builtin/domains.k)"), originalPrd{}(), constructor{}(), productionID{}("1893960929")]
  symbol Lbl'Unds'Map'Unds'{}(SortMap{}, SortMap{}) : SortMap{} [klabel{}("_Map_"), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(95,18,95,172)"), hook{}("MAP.concat"), functional{}(), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/Users/manasvi/Projects/k-in-k/ext/k/k-distribution/target/release/k/include/builtin/domains.k)"), unit{}(".Map"), assoc{}(), format{}("%1%n%2"), originalPrd{}(), left{}(), productionID{}("1824837049"), index{}("0"), element{}("_|->_"), symbol'Kywd'{}(""), function{}(), comm{}()]
  hooked-symbol Lbl'Hash'isConcrete'LParUndsRParUnds'K-REFLECTION'UndsUnds'K{}(SortK{}) : SortBool{} [klabel{}("#isConcrete"), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(746,19,746,73)"), hook{}("KREFLECTION.isConcrete"), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/Users/manasvi/Projects/k-in-k/ext/k/k-distribution/target/release/k/include/builtin/domains.k)"), originalPrd{}(), productionID{}("2084559714"), function{}()]
  symbol Lbl'Hash'EWOULDBLOCK'Unds'K-IO'Unds'{}() : SortIOError{} [org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(798,22,798,35)"), functional{}(), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/Users/manasvi/Projects/k-in-k/ext/k/k-distribution/target/release/k/include/builtin/domains.k)"), originalPrd{}(), constructor{}(), productionID{}("1371495133")]
  symbol Lbl'Unds'List'Unds'{}(SortList{}, SortList{}) : SortList{} [klabel{}("_List_"), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(230,19,230,192)"), hook{}("LIST.concat"), functional{}(), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/Users/manasvi/Projects/k-in-k/ext/k/k-distribution/target/release/k/include/builtin/domains.k)"), unit{}(".List"), assoc{}(), format{}("%1%n%2"), originalPrd{}(), left{}(), productionID{}("1753714541"), smtlib{}("smt_seq_concat"), element{}("ListItem"), symbol'Kywd'{}(""), function{}()]
  hooked-symbol LblInt2String'LParUndsRParUnds'STRING'UndsUnds'Int{}(SortInt{}) : SortString{} [klabel{}("Int2String"), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(508,21,508,103)"), hook{}("STRING.int2string"), functional{}(), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/Users/manasvi/Projects/k-in-k/ext/k/k-distribution/target/release/k/include/builtin/domains.k)"), originalPrd{}(), productionID{}("1783568981"), function{}()]
  symbol Lbl'Hash'E2BIG'Unds'K-IO'Unds'{}() : SortIOError{} [org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(761,22,761,29)"), functional{}(), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/Users/manasvi/Projects/k-in-k/ext/k/k-distribution/target/release/k/include/builtin/domains.k)"), originalPrd{}(), constructor{}(), productionID{}("573200870")]
  hooked-symbol LblfindChar'LParUndsCommUndsCommUndsRParUnds'STRING'UndsUnds'String'Unds'String'Unds'Int{}(SortString{}, SortString{}, SortInt{}) : SortInt{} [klabel{}("findChar"), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(501,18,501,89)"), hook{}("STRING.findChar"), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/Users/manasvi/Projects/k-in-k/ext/k/k-distribution/target/release/k/include/builtin/domains.k)"), originalPrd{}(), productionID{}("1383519982"), function{}()]
  symbol Lbl'Hash'ENETRESET'Unds'K-IO'Unds'{}() : SortIOError{} [org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(815,22,815,33)"), functional{}(), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/Users/manasvi/Projects/k-in-k/ext/k/k-distribution/target/release/k/include/builtin/domains.k)"), originalPrd{}(), constructor{}(), productionID{}("516537656")]
  symbol LblisBExp{}(SortK{}) : SortBool{} [function{}(), predicate{}("BExp"), originalPrd{}()]
  symbol Lbl'Hash'EPERM'Unds'K-IO'Unds'{}() : SortIOError{} [org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(791,22,791,29)"), functional{}(), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/Users/manasvi/Projects/k-in-k/ext/k/k-distribution/target/release/k/include/builtin/domains.k)"), originalPrd{}(), constructor{}(), productionID{}("749282235")]
  hooked-symbol Lbl'Unds'divInt'UndsUnds'INT'UndsUnds'Int'Unds'Int{}(SortInt{}, SortInt{}) : SortInt{} [org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(345,18,345,93)"), hook{}("INT.ediv"), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/Users/manasvi/Projects/k-in-k/ext/k/k-distribution/target/release/k/include/builtin/domains.k)"), originalPrd{}(), left{}(), productionID{}("1041109062"), smtlib{}("div"), function{}()]
  symbol Lbl'Hash'ENOSYS'Unds'K-IO'Unds'{}() : SortIOError{} [org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(786,22,786,30)"), functional{}(), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/Users/manasvi/Projects/k-in-k/ext/k/k-distribution/target/release/k/include/builtin/domains.k)"), originalPrd{}(), constructor{}(), productionID{}("122155649")]
  hooked-symbol Lbl'UndsXor-Perc'Int'UndsUndsUnds'INT'UndsUnds'Int'Unds'Int'Unds'Int{}(SortInt{}, SortInt{}, SortInt{}) : SortInt{} [org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(337,18,337,110)"), hook{}("INT.powmod"), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/Users/manasvi/Projects/k-in-k/ext/k/k-distribution/target/release/k/include/builtin/domains.k)"), originalPrd{}(), left{}(), productionID{}("1518331471"), smtlib{}("(mod (^ #1 #2) #3)"), function{}()]
  hooked-symbol Lbl'UndsEqlsEqls'Int'UndsUnds'INT'UndsUnds'Int'Unds'Int{}(SortInt{}, SortInt{}) : SortBool{} [klabel{}("_==Int_"), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(386,19,386,167)"), hook{}("INT.eq"), functional{}(), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/Users/manasvi/Projects/k-in-k/ext/k/k-distribution/target/release/k/include/builtin/domains.k)"), originalPrd{}(), left{}(), productionID{}("1777238524"), latex{}("{#1}\\mathrel{{=}{=}_{\\scriptstyle\\it Int}}{#2}"), smtlib{}("="), function{}()]
  hooked-symbol Lbl'UndsPerc'Int'UndsUnds'INT'UndsUnds'Int'Unds'Int{}(SortInt{}, SortInt{}) : SortInt{} [org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(343,18,343,144)"), hook{}("INT.tmod"), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/Users/manasvi/Projects/k-in-k/ext/k/k-distribution/target/release/k/include/builtin/domains.k)"), originalPrd{}(), left{}(), productionID{}("459718907"), latex{}("{#1}\\mathrel{\\%_{\\scriptstyle\\it Int}}{#2}"), smtlib{}("mod"), function{}()]
  hooked-symbol LblBase2String'LParUndsCommUndsRParUnds'STRING'UndsUnds'Int'Unds'Int{}(SortInt{}, SortInt{}) : SortString{} [klabel{}("Base2String"), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(509,21,509,92)"), hook{}("STRING.base2string"), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/Users/manasvi/Projects/k-in-k/ext/k/k-distribution/target/release/k/include/builtin/domains.k)"), originalPrd{}(), productionID{}("2113748097"), function{}()]
  symbol Lbl'Hash'EALREADY'Unds'K-IO'Unds'{}() : SortIOError{} [org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(800,22,800,32)"), functional{}(), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/Users/manasvi/Projects/k-in-k/ext/k/k-distribution/target/release/k/include/builtin/domains.k)"), originalPrd{}(), constructor{}(), productionID{}("899929247")]
  symbol Lbl'Hash'EHOSTDOWN'Unds'K-IO'Unds'{}() : SortIOError{} [org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(825,22,825,33)"), functional{}(), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/Users/manasvi/Projects/k-in-k/ext/k/k-distribution/target/release/k/include/builtin/domains.k)"), originalPrd{}(), constructor{}(), productionID{}("795242171")]
  symbol Lbl'Hash'ENOTSOCK'Unds'K-IO'Unds'{}() : SortIOError{} [org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(801,22,801,32)"), functional{}(), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/Users/manasvi/Projects/k-in-k/ext/k/k-distribution/target/release/k/include/builtin/domains.k)"), originalPrd{}(), constructor{}(), productionID{}("949684105")]
  hooked-symbol LblreplaceAll'LParUndsCommUndsCommUndsRParUnds'STRING'UndsUnds'String'Unds'String'Unds'String{}(SortString{}, SortString{}, SortString{}) : SortString{} [org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(513,21,513,122)"), hook{}("STRING.replaceAll"), functional{}(), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/Users/manasvi/Projects/k-in-k/ext/k/k-distribution/target/release/k/include/builtin/domains.k)"), originalPrd{}(), productionID{}("2075952726"), function{}()]
  hooked-symbol Lblchoice'LParUndsRParUnds'MAP'UndsUnds'Map{}(SortMap{}) : SortK{} [klabel{}("Map:choice"), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(146,16,146,96)"), hook{}("MAP.choice"), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/Users/manasvi/Projects/k-in-k/ext/k/k-distribution/target/release/k/include/builtin/domains.k)"), originalPrd{}(), productionID{}("2104973502"), function{}()]
  symbol Lbl'Hash'freezer'UndsSlshUndsUnds'IMP-SYNTAX'UndsUnds'AExp'Unds'AExp1'Unds'{}(SortK{}) : SortKItem{} [originalPrd{}(), constructor{}(), functional{}()]
  hooked-symbol Lbl'UndsEqlsSlshEqls'String'UndsUnds'STRING'UndsUnds'String'Unds'String{}(SortString{}, SortString{}) : SortBool{} [org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(518,19,518,94)"), hook{}("STRING.ne"), functional{}(), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/Users/manasvi/Projects/k-in-k/ext/k/k-distribution/target/release/k/include/builtin/domains.k)"), originalPrd{}(), left{}(), productionID{}("1651162064"), function{}()]
  hooked-symbol Lblsize'LParUndsRParUnds'SET'UndsUnds'Set{}(SortSet{}) : SortInt{} [klabel{}("size"), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(181,18,181,80)"), hook{}("SET.size"), functional{}(), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/Users/manasvi/Projects/k-in-k/ext/k/k-distribution/target/release/k/include/builtin/domains.k)"), originalPrd{}(), productionID{}("164332069"), function{}()]
  symbol Lbl'UndsCommUndsUnds'IMP-SYNTAX'UndsUnds'Id'Unds'Ids{}(SortId{}, SortIds{}) : SortIds{} [org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(24,18,24,29)"), userList{}("*"), functional{}(), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/Users/manasvi/Projects/k-in-k/imp/./imp.k)"), originalPrd{}(), constructor{}(), right{}(), productionID{}("1976752685")]
  symbol Lbl-'UndsUnds'IMP-SYNTAX'UndsUnds'Int{}(SortInt{}) : SortAExp{} [org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(6,20,6,66)"), functional{}(), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/Users/manasvi/Projects/k-in-k/imp/./imp.k)"), originalPrd{}(), constructor{}(), productionID{}("300983713"), symbol'Kywd'{}("unaryMinus")]
  hooked-symbol Lbl'Hash'system'LParUndsRParUnds'K-IO'UndsUnds'String{}(SortString{}) : SortKItem{} [klabel{}("#system"), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(869,20,869,73)"), hook{}("IO.system"), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/Users/manasvi/Projects/k-in-k/ext/k/k-distribution/target/release/k/include/builtin/domains.k)"), originalPrd{}(), impure{}(), productionID{}("38544126"), function{}()]
  hooked-symbol LblabsInt'LParUndsRParUnds'INT'UndsUnds'Int{}(SortInt{}) : SortInt{} [klabel{}("absInt"), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(361,18,361,102)"), hook{}("INT.abs"), functional{}(), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/Users/manasvi/Projects/k-in-k/ext/k/k-distribution/target/release/k/include/builtin/domains.k)"), originalPrd{}(), productionID{}("106999035"), smtlib{}("int_abs"), function{}()]
  symbol Lblwhile'LParUndsRParUndsUnds'IMP-SYNTAX'UndsUnds'BExp'Unds'Block{}(SortBExp{}, SortBlock{}) : SortStmt{} [org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(21,20,21,61)"), functional{}(), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/Users/manasvi/Projects/k-in-k/imp/./imp.k)"), originalPrd{}(), constructor{}(), productionID{}("332699949"), symbol'Kywd'{}("while")]
  symbol Lbl'UndsAndAndUndsUnds'IMP-SYNTAX'UndsUnds'BExp'Unds'BExp{}(SortBExp{}, SortBExp{}) : SortBExp{} [org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(13,20,13,80)"), functional{}(), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/Users/manasvi/Projects/k-in-k/imp/./imp.k)"), originalPrd{}(), left{}(), constructor{}(), productionID{}("1932332324"), strict{}("1"), symbol'Kywd'{}("andBExp")]
  symbol Lbl'Hash'EDOM'Unds'K-IO'Unds'{}() : SortIOError{} [org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(768,22,768,28)"), functional{}(), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/Users/manasvi/Projects/k-in-k/ext/k/k-distribution/target/release/k/include/builtin/domains.k)"), originalPrd{}(), constructor{}(), productionID{}("1275035040")]
  symbol Lbl'Hash'ENOBUFS'Unds'K-IO'Unds'{}() : SortIOError{} [org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(818,22,818,31)"), functional{}(), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/Users/manasvi/Projects/k-in-k/ext/k/k-distribution/target/release/k/include/builtin/domains.k)"), originalPrd{}(), constructor{}(), productionID{}("1871612052")]
  symbol LblisK{}(SortK{}) : SortBool{} [function{}(), predicate{}("K"), originalPrd{}()]
  hooked-symbol Lbl'Hash'tell'LParUndsRParUnds'K-IO'UndsUnds'Int{}(SortInt{}) : SortInt{} [org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(832,18,832,70)"), hook{}("IO.tell"), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/Users/manasvi/Projects/k-in-k/ext/k/k-distribution/target/release/k/include/builtin/domains.k)"), originalPrd{}(), impure{}(), productionID{}("79438382"), function{}()]
  hooked-symbol LblcategoryChar'LParUndsRParUnds'STRING'UndsUnds'String{}(SortString{}) : SortString{} [klabel{}("categoryChar"), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(527,21,527,80)"), hook{}("STRING.category"), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/Users/manasvi/Projects/k-in-k/ext/k/k-distribution/target/release/k/include/builtin/domains.k)"), originalPrd{}(), productionID{}("1188401255"), function{}()]
  symbol Lbl'Hash'ETIMEDOUT'Unds'K-IO'Unds'{}() : SortIOError{} [org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(823,22,823,33)"), functional{}(), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/Users/manasvi/Projects/k-in-k/ext/k/k-distribution/target/release/k/include/builtin/domains.k)"), originalPrd{}(), constructor{}(), productionID{}("1192923170")]
  symbol Lbl'Stop'List{}() : SortList{} [klabel{}(".List"), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(232,19,232,146)"), hook{}("LIST.unit"), functional{}(), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/Users/manasvi/Projects/k-in-k/ext/k/k-distribution/target/release/k/include/builtin/domains.k)"), originalPrd{}(), constructor{}(), productionID{}("1095273238"), latex{}("\\dotCt{List}"), smtlib{}("smt_seq_nil"), symbol'Kywd'{}(""), function{}()]
  hooked-symbol Lblreplace'LParUndsCommUndsCommUndsCommUndsRParUnds'STRING'UndsUnds'String'Unds'String'Unds'String'Unds'Int{}(SortString{}, SortString{}, SortString{}, SortInt{}) : SortString{} [org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(514,21,514,107)"), hook{}("STRING.replace"), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/Users/manasvi/Projects/k-in-k/ext/k/k-distribution/target/release/k/include/builtin/domains.k)"), originalPrd{}(), productionID{}("1764996806"), function{}()]
  symbol Lbl'Hash'ETOOMANYREFS'Unds'K-IO'Unds'{}() : SortIOError{} [org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(822,22,822,36)"), functional{}(), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/Users/manasvi/Projects/k-in-k/ext/k/k-distribution/target/release/k/include/builtin/domains.k)"), originalPrd{}(), constructor{}(), productionID{}("368342628")]
  symbol LblisMap{}(SortK{}) : SortBool{} [function{}(), predicate{}("Map"), originalPrd{}()]
  symbol Lbl'Hash'EDESTADDRREQ'Unds'K-IO'Unds'{}() : SortIOError{} [org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(802,22,802,36)"), functional{}(), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/Users/manasvi/Projects/k-in-k/ext/k/k-distribution/target/release/k/include/builtin/domains.k)"), originalPrd{}(), constructor{}(), productionID{}("333040629")]
  symbol LblfreshInt'LParUndsRParUnds'INT'UndsUnds'Int{}(SortInt{}) : SortInt{} [klabel{}("freshInt"), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(394,18,394,72)"), freshGenerator{}(), functional{}(), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/Users/manasvi/Projects/k-in-k/ext/k/k-distribution/target/release/k/include/builtin/domains.k)"), originalPrd{}(), productionID{}("257459516"), function{}()]
  symbol Lbl'Hash'ENOTTY'Unds'K-IO'Unds'{}() : SortIOError{} [org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(789,22,789,30)"), functional{}(), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/Users/manasvi/Projects/k-in-k/ext/k/k-distribution/target/release/k/include/builtin/domains.k)"), originalPrd{}(), constructor{}(), productionID{}("1208532123")]
  symbol LblnoStateCell{}() : SortStateCellOpt{} [cellOptAbsent{}("StateCell"), originalPrd{}(), constructor{}(), functional{}()]
  hooked-symbol Lbl'Hash'opendir'LParUndsRParUnds'K-IO'UndsUnds'String{}(SortString{}) : SortKItem{} [org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(846,20,846,81)"), hook{}("IO.opendir"), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/Users/manasvi/Projects/k-in-k/ext/k/k-distribution/target/release/k/include/builtin/domains.k)"), originalPrd{}(), impure{}(), productionID{}("26970580"), function{}()]
  symbol LblisTCellFragment{}(SortK{}) : SortBool{} [function{}(), predicate{}("TCellFragment"), originalPrd{}()]
  symbol Lbl'Hash'freezer'UndsPlusUndsUnds'IMP-SYNTAX'UndsUnds'AExp'Unds'AExp0'Unds'{}(SortK{}) : SortKItem{} [originalPrd{}(), constructor{}(), functional{}()]
  symbol Lbl'Hash'ECONNRESET'Unds'K-IO'Unds'{}() : SortIOError{} [org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(817,22,817,34)"), functional{}(), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/Users/manasvi/Projects/k-in-k/ext/k/k-distribution/target/release/k/include/builtin/domains.k)"), originalPrd{}(), constructor{}(), productionID{}("1796047085")]
  hooked-symbol Lbl'Tild'Int'UndsUnds'INT'UndsUnds'Int{}(SortInt{}) : SortInt{} [org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(334,18,334,133)"), hook{}("INT.not"), functional{}(), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/Users/manasvi/Projects/k-in-k/ext/k/k-distribution/target/release/k/include/builtin/domains.k)"), originalPrd{}(), productionID{}("347978868"), latex{}("\\mathop{\\sim_{\\scriptstyle\\it Int}}{#1}"), function{}()]
  hooked-symbol Lbl'Hash'if'UndsHash'then'UndsHash'else'UndsHash'fi'Unds'K-EQUAL'UndsUnds'Bool'Unds'K'Unds'K{SortS0}(SortBool{}, SortS0, SortS0) : SortS0 [org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(731,16,731,122)"), hook{}("KEQUAL.ite"), functional{}(), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/Users/manasvi/Projects/k-in-k/ext/k/k-distribution/target/release/k/include/builtin/domains.k)"), originalPrd{}(), poly{}("0, 2, 3"), productionID{}("1541525668"), smtlib{}("ite"), function{}()]
  symbol Lbl'Hash'EMFILE'Unds'K-IO'Unds'{}() : SortIOError{} [org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(776,22,776,30)"), functional{}(), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/Users/manasvi/Projects/k-in-k/ext/k/k-distribution/target/release/k/include/builtin/domains.k)"), originalPrd{}(), constructor{}(), productionID{}("1020155847")]
  hooked-symbol Lbl'Unds-GT-'String'UndsUnds'STRING'UndsUnds'String'Unds'String{}(SortString{}, SortString{}) : SortBool{} [org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(524,19,524,82)"), hook{}("STRING.gt"), functional{}(), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/Users/manasvi/Projects/k-in-k/ext/k/k-distribution/target/release/k/include/builtin/domains.k)"), originalPrd{}(), productionID{}("983595261"), function{}()]
  symbol Lbl'Hash'EIO'Unds'K-IO'Unds'{}() : SortIOError{} [org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(774,22,774,27)"), functional{}(), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/Users/manasvi/Projects/k-in-k/ext/k/k-distribution/target/release/k/include/builtin/domains.k)"), originalPrd{}(), constructor{}(), productionID{}("527829831")]
  hooked-symbol LblnewUUID'Unds'STRING'Unds'{}() : SortString{} [org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(530,21,530,67)"), hook{}("STRING.uuid"), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/Users/manasvi/Projects/k-in-k/ext/k/k-distribution/target/release/k/include/builtin/domains.k)"), originalPrd{}(), impure{}(), productionID{}("350059321"), function{}()]
  hooked-symbol LblrfindString'LParUndsCommUndsCommUndsRParUnds'STRING'UndsUnds'String'Unds'String'Unds'Int{}(SortString{}, SortString{}, SortInt{}) : SortInt{} [klabel{}("rfindString"), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(500,18,500,86)"), hook{}("STRING.rfind"), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/Users/manasvi/Projects/k-in-k/ext/k/k-distribution/target/release/k/include/builtin/domains.k)"), originalPrd{}(), productionID{}("1551629761"), function{}()]
  hooked-symbol Lbl'UndsLSqBUnds-LT-'-'UndsRSqBUnds'MAP'UndsUnds'Map'Unds'K'Unds'K{}(SortMap{}, SortK{}, SortK{}) : SortMap{} [org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(113,18,113,96)"), hook{}("MAP.update"), functional{}(), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/Users/manasvi/Projects/k-in-k/ext/k/k-distribution/target/release/k/include/builtin/domains.k)"), prefer{}(), originalPrd{}(), productionID{}("839998248"), function{}()]
  hooked-symbol LblFloat2String'LParUndsRParUnds'STRING'UndsUnds'Float{}(SortFloat{}) : SortString{} [klabel{}("Float2String"), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(504,21,504,105)"), hook{}("STRING.float2string"), functional{}(), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/Users/manasvi/Projects/k-in-k/ext/k/k-distribution/target/release/k/include/builtin/domains.k)"), originalPrd{}(), productionID{}("403174823"), function{}()]
  symbol LblisId{}(SortK{}) : SortBool{} [function{}(), predicate{}("Id"), originalPrd{}()]
  hooked-symbol LblString2Int'LParUndsRParUnds'STRING'UndsUnds'String{}(SortString{}) : SortInt{} [klabel{}("String2Int"), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(507,21,507,91)"), hook{}("STRING.string2int"), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/Users/manasvi/Projects/k-in-k/ext/k/k-distribution/target/release/k/include/builtin/domains.k)"), originalPrd{}(), productionID{}("1304589447"), function{}()]
  symbol Lbl'Hash'ENOEXEC'Unds'K-IO'Unds'{}() : SortIOError{} [org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(782,22,782,31)"), functional{}(), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/Users/manasvi/Projects/k-in-k/ext/k/k-distribution/target/release/k/include/builtin/domains.k)"), originalPrd{}(), constructor{}(), productionID{}("901205084")]
  hooked-symbol Lbl'Unds-LT--LT-'Int'UndsUnds'INT'UndsUnds'Int'Unds'Int{}(SortInt{}, SortInt{}) : SortInt{} [org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(352,18,352,131)"), hook{}("INT.shl"), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/Users/manasvi/Projects/k-in-k/ext/k/k-distribution/target/release/k/include/builtin/domains.k)"), originalPrd{}(), left{}(), productionID{}("925973605"), latex{}("{#1}\\mathrel{\\ll_{\\scriptstyle\\it Int}}{#2}"), function{}()]
  hooked-symbol Lbl'UndsEqlsSlshEqls'Bool'UndsUnds'BOOL'UndsUnds'Bool'Unds'Bool{}(SortBool{}, SortBool{}) : SortBool{} [org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(280,19,280,103)"), hook{}("BOOL.ne"), functional{}(), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/Users/manasvi/Projects/k-in-k/ext/k/k-distribution/target/release/k/include/builtin/domains.k)"), originalPrd{}(), left{}(), productionID{}("1889057031"), smtlib{}("distinct"), function{}()]
  hooked-symbol LblsignExtendBitRangeInt'LParUndsCommUndsCommUndsRParUnds'INT'UndsUnds'Int'Unds'Int'Unds'Int{}(SortInt{}, SortInt{}, SortInt{}) : SortInt{} [klabel{}("signExtendBitRangeInt"), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(365,18,365,118)"), hook{}("INT.signExtendBitRange"), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/Users/manasvi/Projects/k-in-k/ext/k/k-distribution/target/release/k/include/builtin/domains.k)"), originalPrd{}(), productionID{}("530539368"), function{}()]
  symbol LblinitTCell{}(SortMap{}) : SortTCell{} [initializer{}(), function{}(), noThread{}(), originalPrd{}()]
  symbol Lbl'Hash'EPFNOSUPPORT'Unds'K-IO'Unds'{}() : SortIOError{} [org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(809,22,809,36)"), functional{}(), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/Users/manasvi/Projects/k-in-k/ext/k/k-distribution/target/release/k/include/builtin/domains.k)"), originalPrd{}(), constructor{}(), productionID{}("610454273")]
  symbol LblisSet{}(SortK{}) : SortBool{} [function{}(), predicate{}("Set"), originalPrd{}()]
  symbol Lbl'Hash'ESHUTDOWN'Unds'K-IO'Unds'{}() : SortIOError{} [org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(821,22,821,33)"), functional{}(), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/Users/manasvi/Projects/k-in-k/ext/k/k-distribution/target/release/k/include/builtin/domains.k)"), originalPrd{}(), constructor{}(), productionID{}("237344028")]
  hooked-symbol Lbl'Hash'read'LParUndsCommUndsRParUnds'K-IO'UndsUnds'Int'Unds'Int{}(SortInt{}, SortInt{}) : SortString{} [org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(834,21,834,84)"), hook{}("IO.read"), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/Users/manasvi/Projects/k-in-k/ext/k/k-distribution/target/release/k/include/builtin/domains.k)"), originalPrd{}(), impure{}(), productionID{}("1697752980"), function{}()]
  hooked-symbol LbllengthString'LParUndsRParUnds'STRING'UndsUnds'String{}(SortString{}) : SortInt{} [klabel{}("lengthString"), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(494,18,494,84)"), hook{}("STRING.length"), functional{}(), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/Users/manasvi/Projects/k-in-k/ext/k/k-distribution/target/release/k/include/builtin/domains.k)"), originalPrd{}(), productionID{}("2129442232"), function{}()]
  hooked-symbol LblMap'Coln'lookup{}(SortMap{}, SortK{}) : SortK{} [klabel{}("Map:lookup"), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(108,16,108,104)"), hook{}("MAP.lookup"), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/Users/manasvi/Projects/k-in-k/ext/k/k-distribution/target/release/k/include/builtin/domains.k)"), originalPrd{}(), productionID{}("442199874"), symbol'Kywd'{}(""), function{}()]
  symbol LblisString{}(SortK{}) : SortBool{} [function{}(), predicate{}("String"), originalPrd{}()]
  hooked-symbol LblId2String'LParUndsRParUnds'ID-SYNTAX'UndsUnds'Id{}(SortId{}) : SortString{} [klabel{}("Id2String"), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(699,21,699,89)"), hook{}("STRING.token2string"), functional{}(), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/Users/manasvi/Projects/k-in-k/ext/k/k-distribution/target/release/k/include/builtin/domains.k)"), originalPrd{}(), productionID{}("467796378"), function{}()]
  hooked-symbol Lbl'Unds'xorBool'UndsUnds'BOOL'UndsUnds'Bool'Unds'Bool{}(SortBool{}, SortBool{}) : SortBool{} [org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(274,19,274,114)"), hook{}("BOOL.xor"), functional{}(), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/Users/manasvi/Projects/k-in-k/ext/k/k-distribution/target/release/k/include/builtin/domains.k)"), boolOperation{}(), originalPrd{}(), left{}(), productionID{}("2017797638"), smtlib{}("xor"), function{}()]
  symbol Lbl'Hash'EINVAL'Unds'K-IO'Unds'{}() : SortIOError{} [org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(773,22,773,30)"), functional{}(), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/Users/manasvi/Projects/k-in-k/ext/k/k-distribution/target/release/k/include/builtin/domains.k)"), originalPrd{}(), constructor{}(), productionID{}("567294307")]
  hooked-symbol Lbl'Unds'modInt'UndsUnds'INT'UndsUnds'Int'Unds'Int{}(SortInt{}, SortInt{}) : SortInt{} [org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(346,18,346,93)"), hook{}("INT.emod"), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/Users/manasvi/Projects/k-in-k/ext/k/k-distribution/target/release/k/include/builtin/domains.k)"), originalPrd{}(), left{}(), productionID{}("616674002"), smtlib{}("mod"), function{}()]
  hooked-symbol Lbl'Unds'-Map'UndsUnds'MAP'UndsUnds'Map'Unds'Map{}(SortMap{}, SortMap{}) : SortMap{} [org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(120,18,120,120)"), hook{}("MAP.difference"), functional{}(), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/Users/manasvi/Projects/k-in-k/ext/k/k-distribution/target/release/k/include/builtin/domains.k)"), originalPrd{}(), productionID{}("1807015220"), latex{}("{#1}-_{\\it Map}{#2}"), function{}()]
  symbol LblisInt{}(SortK{}) : SortBool{} [function{}(), predicate{}("Int"), originalPrd{}()]
  hooked-symbol LblsubstrString'LParUndsCommUndsCommUndsRParUnds'STRING'UndsUnds'String'Unds'Int'Unds'Int{}(SortString{}, SortInt{}, SortInt{}) : SortString{} [klabel{}("substrString"), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(498,21,498,87)"), hook{}("STRING.substr"), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/Users/manasvi/Projects/k-in-k/ext/k/k-distribution/target/release/k/include/builtin/domains.k)"), originalPrd{}(), productionID{}("1197251633"), function{}()]
  symbol LblisStream{}(SortK{}) : SortBool{} [function{}(), predicate{}("Stream"), originalPrd{}()]
  symbol Lbl'Hash'EMLINK'Unds'K-IO'Unds'{}() : SortIOError{} [org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(777,22,777,30)"), functional{}(), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/Users/manasvi/Projects/k-in-k/ext/k/k-distribution/target/release/k/include/builtin/domains.k)"), originalPrd{}(), constructor{}(), productionID{}("485845532")]
  hooked-symbol Lbl'UndsPipe'Int'UndsUnds'INT'UndsUnds'Int'Unds'Int{}(SortInt{}, SortInt{}) : SortInt{} [org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(358,18,358,140)"), hook{}("INT.or"), functional{}(), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/Users/manasvi/Projects/k-in-k/ext/k/k-distribution/target/release/k/include/builtin/domains.k)"), originalPrd{}(), left{}(), productionID{}("502848122"), latex{}("{#1}\\mathrel{|_{\\scriptstyle\\it Int}}{#2}"), function{}()]
  symbol Lbl'Hash'stderr'Unds'K-IO'Unds'{}() : SortInt{} [org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(858,19,858,50)"), functional{}(), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/Users/manasvi/Projects/k-in-k/ext/k/k-distribution/target/release/k/include/builtin/domains.k)"), originalPrd{}(), productionID{}("351417028"), function{}()]
  hooked-symbol LblupdateMap'LParUndsCommUndsRParUnds'MAP'UndsUnds'Map'Unds'Map{}(SortMap{}, SortMap{}) : SortMap{} [klabel{}("updateMap"), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(125,18,125,91)"), hook{}("MAP.updateAll"), functional{}(), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/Users/manasvi/Projects/k-in-k/ext/k/k-distribution/target/release/k/include/builtin/domains.k)"), originalPrd{}(), productionID{}("2107577743"), function{}()]
  symbol LblisCell{}(SortK{}) : SortBool{} [function{}(), predicate{}("Cell"), originalPrd{}()]
  hooked-symbol Lbl'Unds'orElseBool'UndsUnds'BOOL'UndsUnds'Bool'Unds'Bool{}(SortBool{}, SortBool{}) : SortBool{} [org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(276,19,276,116)"), hook{}("BOOL.orElse"), functional{}(), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/Users/manasvi/Projects/k-in-k/ext/k/k-distribution/target/release/k/include/builtin/domains.k)"), boolOperation{}(), originalPrd{}(), left{}(), productionID{}("1150058854"), smtlib{}("or"), function{}()]
  hooked-symbol Lbl'Hash'getc'LParUndsRParUnds'K-IO'UndsUnds'Int{}(SortInt{}) : SortInt{} [org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(833,18,833,82)"), hook{}("IO.getc"), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/Users/manasvi/Projects/k-in-k/ext/k/k-distribution/target/release/k/include/builtin/domains.k)"), originalPrd{}(), impure{}(), productionID{}("768192757"), function{}()]
  symbol Lbl'Hash'EISDIR'Unds'K-IO'Unds'{}() : SortIOError{} [org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(775,22,775,30)"), functional{}(), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/Users/manasvi/Projects/k-in-k/ext/k/k-distribution/target/release/k/include/builtin/domains.k)"), originalPrd{}(), constructor{}(), productionID{}("418179060")]
  symbol Lbl'Hash'freezerif'LParUndsRParUnds'else'UndsUnds'IMP-SYNTAX'UndsUnds'BExp'Unds'Block'Unds'Block1'Unds'{}(SortK{}, SortK{}) : SortKItem{} [originalPrd{}(), constructor{}(), functional{}()]
  symbol Lbl'Hash'systemResult'LParUndsCommUndsCommUndsRParUnds'K-IO'UndsUnds'Int'Unds'String'Unds'String{}(SortInt{}, SortString{}, SortString{}) : SortKItem{} [org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(870,20,870,110)"), functional{}(), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/Users/manasvi/Projects/k-in-k/ext/k/k-distribution/target/release/k/include/builtin/domains.k)"), originalPrd{}(), constructor{}(), productionID{}("154173878")]
  hooked-symbol LblList'Coln'get{}(SortList{}, SortInt{}) : SortK{} [klabel{}("List:get"), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(240,16,240,94)"), hook{}("LIST.get"), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/Users/manasvi/Projects/k-in-k/ext/k/k-distribution/target/release/k/include/builtin/domains.k)"), originalPrd{}(), productionID{}("787122337"), symbol'Kywd'{}(""), function{}()]
  symbol Lbl'UndsSlshUndsUnds'IMP-SYNTAX'UndsUnds'AExp'Unds'AExp{}(SortAExp{}, SortAExp{}) : SortAExp{} [org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(7,20,7,77)"), functional{}(), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/Users/manasvi/Projects/k-in-k/imp/./imp.k)"), originalPrd{}(), left{}(), constructor{}(), productionID{}("284686302"), strict{}(""), symbol'Kywd'{}("divAExp")]
  symbol Lbl'Hash'EFBIG'Unds'K-IO'Unds'{}() : SortIOError{} [org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(771,22,771,29)"), functional{}(), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/Users/manasvi/Projects/k-in-k/ext/k/k-distribution/target/release/k/include/builtin/domains.k)"), originalPrd{}(), constructor{}(), productionID{}("1204296383")]
  symbol Lbl'Hash'ENOTCONN'Unds'K-IO'Unds'{}() : SortIOError{} [org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(820,22,820,32)"), functional{}(), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/Users/manasvi/Projects/k-in-k/ext/k/k-distribution/target/release/k/include/builtin/domains.k)"), originalPrd{}(), constructor{}(), productionID{}("153646652")]
  symbol Lbl'Hash'ENODEV'Unds'K-IO'Unds'{}() : SortIOError{} [org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(780,22,780,30)"), functional{}(), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/Users/manasvi/Projects/k-in-k/ext/k/k-distribution/target/release/k/include/builtin/domains.k)"), originalPrd{}(), constructor{}(), productionID{}("40170008")]
  hooked-symbol Lbl'Hash'lstat'LParUndsRParUnds'K-IO'UndsUnds'String{}(SortString{}) : SortKItem{} [org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(845,20,845,77)"), hook{}("IO.lstat"), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/Users/manasvi/Projects/k-in-k/ext/k/k-distribution/target/release/k/include/builtin/domains.k)"), originalPrd{}(), impure{}(), productionID{}("1124162665"), function{}()]
  symbol Lbl'Hash'freezer'Unds-LT-EqlsUndsUnds'IMP-SYNTAX'UndsUnds'AExp'Unds'AExp1'Unds'{}(SortK{}) : SortKItem{} [originalPrd{}(), constructor{}(), functional{}()]
  symbol Lbl'Hash'EEXIST'Unds'K-IO'Unds'{}() : SortIOError{} [org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(769,22,769,30)"), functional{}(), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/Users/manasvi/Projects/k-in-k/ext/k/k-distribution/target/release/k/include/builtin/domains.k)"), originalPrd{}(), constructor{}(), productionID{}("1058876963")]
  symbol Lbl'Hash'buffer'LParUndsRParUnds'K-IO'UndsUnds'K{}(SortK{}) : SortStream{} [klabel{}("#buffer"), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(864,21,864,30)"), functional{}(), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/Users/manasvi/Projects/k-in-k/ext/k/k-distribution/target/release/k/include/builtin/domains.k)"), originalPrd{}(), constructor{}(), productionID{}("331122245")]
  symbol Lbl'Hash'ELOOP'Unds'K-IO'Unds'{}() : SortIOError{} [org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(827,22,827,29)"), functional{}(), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/Users/manasvi/Projects/k-in-k/ext/k/k-distribution/target/release/k/include/builtin/domains.k)"), originalPrd{}(), constructor{}(), productionID{}("169833205")]
  hooked-symbol LblnotBool'Unds'{}(SortBool{}) : SortBool{} [klabel{}("notBool_"), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(271,19,271,174)"), hook{}("BOOL.not"), functional{}(), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/Users/manasvi/Projects/k-in-k/ext/k/k-distribution/target/release/k/include/builtin/domains.k)"), boolOperation{}(), originalPrd{}(), productionID{}("2100440237"), latex{}("\\neg_{\\scriptstyle\\it Bool}{#1}"), smtlib{}("not"), symbol'Kywd'{}(""), function{}()]
  hooked-symbol Lblkeys'LParUndsRParUnds'MAP'UndsUnds'Map{}(SortMap{}) : SortSet{} [klabel{}("keys"), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(131,18,131,86)"), hook{}("MAP.keys"), functional{}(), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/Users/manasvi/Projects/k-in-k/ext/k/k-distribution/target/release/k/include/builtin/domains.k)"), originalPrd{}(), productionID{}("1267149311"), function{}()]
  hooked-symbol LblList'Coln'range{}(SortList{}, SortInt{}, SortInt{}) : SortList{} [klabel{}("List:range"), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(243,19,243,98)"), hook{}("LIST.range"), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/Users/manasvi/Projects/k-in-k/ext/k/k-distribution/target/release/k/include/builtin/domains.k)"), originalPrd{}(), productionID{}("2059572982"), symbol'Kywd'{}(""), function{}()]
  symbol Lbl'UndsPlusUndsUnds'IMP-SYNTAX'UndsUnds'AExp'Unds'AExp{}(SortAExp{}, SortAExp{}) : SortAExp{} [org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(8,20,8,77)"), functional{}(), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/Users/manasvi/Projects/k-in-k/imp/./imp.k)"), originalPrd{}(), left{}(), constructor{}(), productionID{}("1940445711"), strict{}(""), symbol'Kywd'{}("addAExp")]
  hooked-symbol Lbl'Hash'unlock'LParUndsCommUndsRParUnds'K-IO'UndsUnds'Int'Unds'Int{}(SortInt{}, SortInt{}) : SortK{} [org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(842,16,842,80)"), hook{}("IO.unlock"), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/Users/manasvi/Projects/k-in-k/ext/k/k-distribution/target/release/k/include/builtin/domains.k)"), originalPrd{}(), impure{}(), productionID{}("41489123"), function{}()]
  symbol Lbl'UndsUndsUnds'IMP-SYNTAX'UndsUnds'Stmt'Unds'Stmt{}(SortStmt{}, SortStmt{}) : SortStmt{} [org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(22,20,22,74)"), functional{}(), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/Users/manasvi/Projects/k-in-k/imp/./imp.k)"), originalPrd{}(), left{}(), constructor{}(), productionID{}("808417649"), symbol'Kywd'{}("sequenceStmt")]
  symbol Lbl'Hash'ENOTEMPTY'Unds'K-IO'Unds'{}() : SortIOError{} [org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(788,22,788,33)"), functional{}(), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/Users/manasvi/Projects/k-in-k/ext/k/k-distribution/target/release/k/include/builtin/domains.k)"), originalPrd{}(), constructor{}(), productionID{}("748842359")]
  symbol Lbl'Hash'freezer'Unds-LT-EqlsUndsUnds'IMP-SYNTAX'UndsUnds'AExp'Unds'AExp0'Unds'{}(SortK{}) : SortKItem{} [originalPrd{}(), constructor{}(), functional{}()]
  hooked-symbol Lbl'Unds'impliesBool'UndsUnds'BOOL'UndsUnds'Bool'Unds'Bool{}(SortBool{}, SortBool{}) : SortBool{} [org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(277,19,277,117)"), hook{}("BOOL.implies"), functional{}(), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/Users/manasvi/Projects/k-in-k/ext/k/k-distribution/target/release/k/include/builtin/domains.k)"), boolOperation{}(), originalPrd{}(), left{}(), productionID{}("1148255190"), smtlib{}("=>"), function{}()]
  hooked-symbol Lbl'Unds-LT-Eqls'Map'UndsUnds'MAP'UndsUnds'Map'Unds'Map{}(SortMap{}, SortMap{}) : SortBool{} [org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(143,19,143,91)"), hook{}("MAP.inclusion"), functional{}(), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/Users/manasvi/Projects/k-in-k/ext/k/k-distribution/target/release/k/include/builtin/domains.k)"), originalPrd{}(), productionID{}("1948810915"), function{}()]
  symbol Lbl'-LT-'state'-GT-'{}(SortMap{}) : SortStateCell{} [org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(33,17,36,21)"), contentStartColumn{}("17"), org'Stop'kframework'Stop'definition'Stop'Production{}("syntax RuleContent ::= K"), functional{}(), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/Users/manasvi/Projects/k-in-k/imp/./imp.k)"), contentStartLine{}("33"), color{}("red"), format{}("%1%i%n%2%d%n%3"), originalPrd{}(), constructor{}(), cell{}()]
  hooked-symbol Lbl'Unds-GT-Eqls'String'UndsUnds'STRING'UndsUnds'String'Unds'String{}(SortString{}, SortString{}) : SortBool{} [org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(525,19,525,82)"), hook{}("STRING.ge"), functional{}(), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/Users/manasvi/Projects/k-in-k/ext/k/k-distribution/target/release/k/include/builtin/domains.k)"), originalPrd{}(), productionID{}("220454978"), function{}()]
  symbol LblisStateCell{}(SortK{}) : SortBool{} [function{}(), predicate{}("StateCell"), originalPrd{}()]
  hooked-symbol Lblchoice'LParUndsRParUnds'SET'UndsUnds'Set{}(SortSet{}) : SortK{} [klabel{}("Set:choice"), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(184,16,184,90)"), hook{}("SET.choice"), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/Users/manasvi/Projects/k-in-k/ext/k/k-distribution/target/release/k/include/builtin/domains.k)"), originalPrd{}(), productionID{}("1991278377"), function{}()]
  symbol Lbl'Hash'freezer'BangUndsUnds'IMP-SYNTAX'UndsUnds'BExp0'Unds'{}() : SortKItem{} [originalPrd{}(), constructor{}(), functional{}()]
  symbol Lbl'Hash'EHOSTUNREACH'Unds'K-IO'Unds'{}() : SortIOError{} [org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(826,22,826,36)"), functional{}(), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/Users/manasvi/Projects/k-in-k/ext/k/k-distribution/target/release/k/include/builtin/domains.k)"), originalPrd{}(), constructor{}(), productionID{}("429353573")]
  hooked-symbol Lblsize'LParUndsRParUnds'LIST'UndsUnds'List{}(SortList{}) : SortInt{} [klabel{}("sizeList"), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(249,18,249,121)"), hook{}("LIST.size"), functional{}(), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/Users/manasvi/Projects/k-in-k/ext/k/k-distribution/target/release/k/include/builtin/domains.k)"), originalPrd{}(), productionID{}("36657658"), smtlib{}("smt_seq_len"), function{}()]
  hooked-symbol Lbl'Unds-GT--GT-'Int'UndsUnds'INT'UndsUnds'Int'Unds'Int{}(SortInt{}, SortInt{}) : SortInt{} [org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(351,18,351,131)"), hook{}("INT.shr"), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/Users/manasvi/Projects/k-in-k/ext/k/k-distribution/target/release/k/include/builtin/domains.k)"), originalPrd{}(), left{}(), productionID{}("508512860"), latex{}("{#1}\\mathrel{\\gg_{\\scriptstyle\\it Int}}{#2}"), function{}()]
  hooked-symbol Lbl'UndsPipe'-'-GT-Unds'{}(SortK{}, SortK{}) : SortMap{} [klabel{}("_|->_"), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(102,18,102,136)"), hook{}("MAP.element"), functional{}(), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/Users/manasvi/Projects/k-in-k/ext/k/k-distribution/target/release/k/include/builtin/domains.k)"), originalPrd{}(), productionID{}("2133655103"), latex{}("{#1}\\mapsto{#2}"), symbol'Kywd'{}(""), function{}()]
  symbol Lbl'Hash'noparse'Unds'K-IO'Unds'{}() : SortIOError{} [org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(760,31,760,40)"), functional{}(), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/Users/manasvi/Projects/k-in-k/ext/k/k-distribution/target/release/k/include/builtin/domains.k)"), originalPrd{}(), constructor{}(), productionID{}("873634936")]
  symbol LblisList{}(SortK{}) : SortBool{} [function{}(), predicate{}("List"), originalPrd{}()]
  hooked-symbol Lbl'Unds'in'UndsUnds'LIST'UndsUnds'K'Unds'List{}(SortK{}, SortList{}) : SortBool{} [klabel{}("_inList_"), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(246,19,246,97)"), hook{}("LIST.in"), functional{}(), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/Users/manasvi/Projects/k-in-k/ext/k/k-distribution/target/release/k/include/builtin/domains.k)"), originalPrd{}(), productionID{}("2144838275"), function{}()]
  symbol Lbl'Hash'EINTR'Unds'K-IO'Unds'{}() : SortIOError{} [org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(772,22,772,29)"), functional{}(), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/Users/manasvi/Projects/k-in-k/ext/k/k-distribution/target/release/k/include/builtin/domains.k)"), originalPrd{}(), constructor{}(), productionID{}("2003463579")]
  hooked-symbol Lbl'UndsStar'Int'UndsUnds'INT'UndsUnds'Int'Unds'Int{}(SortInt{}, SortInt{}) : SortInt{} [org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(339,18,339,155)"), hook{}("INT.mul"), functional{}(), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/Users/manasvi/Projects/k-in-k/ext/k/k-distribution/target/release/k/include/builtin/domains.k)"), originalPrd{}(), left{}(), productionID{}("940857381"), latex{}("{#1}\\mathrel{\\ast_{\\scriptstyle\\it Int}}{#2}"), smtlib{}("*"), function{}()]
  symbol Lbl'Hash'EMSGSIZE'Unds'K-IO'Unds'{}() : SortIOError{} [org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(803,22,803,32)"), functional{}(), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/Users/manasvi/Projects/k-in-k/ext/k/k-distribution/target/release/k/include/builtin/domains.k)"), originalPrd{}(), constructor{}(), productionID{}("1200470358")]
  symbol Lbl'Hash'ENOENT'Unds'K-IO'Unds'{}() : SortIOError{} [org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(781,22,781,30)"), functional{}(), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/Users/manasvi/Projects/k-in-k/ext/k/k-distribution/target/release/k/include/builtin/domains.k)"), originalPrd{}(), constructor{}(), productionID{}("896982466")]
  hooked-symbol Lbl'Unds-GT-'Int'UndsUnds'INT'UndsUnds'Int'Unds'Int{}(SortInt{}, SortInt{}) : SortBool{} [org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(385,19,385,145)"), hook{}("INT.gt"), functional{}(), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/Users/manasvi/Projects/k-in-k/ext/k/k-distribution/target/release/k/include/builtin/domains.k)"), originalPrd{}(), left{}(), productionID{}("757708014"), latex{}("{#1}\\mathrel{>_{\\scriptstyle\\it Int}}{#2}"), smtlib{}(">"), function{}()]
  hooked-symbol LbldirectionalityChar'LParUndsRParUnds'STRING'UndsUnds'String{}(SortString{}) : SortString{} [klabel{}("directionalityChar"), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(528,21,528,86)"), hook{}("STRING.directionality"), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/Users/manasvi/Projects/k-in-k/ext/k/k-distribution/target/release/k/include/builtin/domains.k)"), originalPrd{}(), productionID{}("755210740"), function{}()]
  hooked-symbol Lbl'UndsSlsh'Int'UndsUnds'INT'UndsUnds'Int'Unds'Int{}(SortInt{}, SortInt{}) : SortInt{} [org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(342,18,342,146)"), hook{}("INT.tdiv"), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/Users/manasvi/Projects/k-in-k/ext/k/k-distribution/target/release/k/include/builtin/domains.k)"), originalPrd{}(), left{}(), productionID{}("1093864783"), latex{}("{#1}\\mathrel{\\div_{\\scriptstyle\\it Int}}{#2}"), smtlib{}("div"), function{}()]
  hooked-symbol Lbl'Hash'lock'LParUndsCommUndsRParUnds'K-IO'UndsUnds'Int'Unds'Int{}(SortInt{}, SortInt{}) : SortK{} [org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(841,16,841,76)"), hook{}("IO.lock"), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/Users/manasvi/Projects/k-in-k/ext/k/k-distribution/target/release/k/include/builtin/domains.k)"), originalPrd{}(), impure{}(), productionID{}("1962329560"), function{}()]
  hooked-symbol Lbl'Hash'logToFile'LParUndsCommUndsRParUnds'K-IO'UndsUnds'String'Unds'String{}(SortString{}, SortString{}) : SortK{} [klabel{}("#logToFile"), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(872,16,872,99)"), returnsUnit{}(), hook{}("IO.log"), functional{}(), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/Users/manasvi/Projects/k-in-k/ext/k/k-distribution/target/release/k/include/builtin/domains.k)"), originalPrd{}(), impure{}(), productionID{}("215082566"), function{}()]
  hooked-symbol LblSetItem{}(SortK{}) : SortSet{} [klabel{}("SetItem"), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(166,18,166,108)"), hook{}("SET.element"), functional{}(), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/Users/manasvi/Projects/k-in-k/ext/k/k-distribution/target/release/k/include/builtin/domains.k)"), originalPrd{}(), productionID{}("1309335839"), symbol'Kywd'{}(""), function{}()]
  hooked-symbol LblrfindChar'LParUndsCommUndsCommUndsRParUnds'STRING'UndsUnds'String'Unds'String'Unds'Int{}(SortString{}, SortString{}, SortInt{}) : SortInt{} [klabel{}("rfindChar"), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(502,18,502,90)"), hook{}("STRING.rfindChar"), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/Users/manasvi/Projects/k-in-k/ext/k/k-distribution/target/release/k/include/builtin/domains.k)"), originalPrd{}(), productionID{}("1902671237"), function{}()]
  symbol LblinitStateCell{}() : SortStateCell{} [initializer{}(), function{}(), noThread{}(), originalPrd{}()]
  symbol Lbl'Stop'Map{}() : SortMap{} [klabel{}(".Map"), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(97,18,97,128)"), hook{}("MAP.unit"), functional{}(), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/Users/manasvi/Projects/k-in-k/ext/k/k-distribution/target/release/k/include/builtin/domains.k)"), originalPrd{}(), constructor{}(), productionID{}("672746064"), latex{}("\\dotCt{Map}"), symbol'Kywd'{}(""), function{}()]
  hooked-symbol LblminInt'LParUndsCommUndsRParUnds'INT'UndsUnds'Int'Unds'Int{}(SortInt{}, SortInt{}) : SortInt{} [org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(359,18,359,102)"), hook{}("INT.min"), functional{}(), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/Users/manasvi/Projects/k-in-k/ext/k/k-distribution/target/release/k/include/builtin/domains.k)"), originalPrd{}(), productionID{}("596910004"), smtlib{}("int_min"), function{}()]
  symbol Lbl'Hash'ENOLCK'Unds'K-IO'Unds'{}() : SortIOError{} [org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(783,22,783,30)"), functional{}(), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/Users/manasvi/Projects/k-in-k/ext/k/k-distribution/target/release/k/include/builtin/domains.k)"), originalPrd{}(), constructor{}(), productionID{}("777457133")]
  hooked-symbol LblintersectSet'LParUndsCommUndsRParUnds'SET'UndsUnds'Set'Unds'Set{}(SortSet{}, SortSet{}) : SortSet{} [klabel{}("intersectSet"), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(169,18,169,88)"), hook{}("SET.intersection"), functional{}(), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/Users/manasvi/Projects/k-in-k/ext/k/k-distribution/target/release/k/include/builtin/domains.k)"), originalPrd{}(), productionID{}("596470015"), function{}()]
  symbol Lbl'Hash'EFAULT'Unds'K-IO'Unds'{}() : SortIOError{} [org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(770,22,770,30)"), functional{}(), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/Users/manasvi/Projects/k-in-k/ext/k/k-distribution/target/release/k/include/builtin/domains.k)"), originalPrd{}(), constructor{}(), productionID{}("1399701152")]
  hooked-symbol Lbl'Unds-LT-'Int'UndsUnds'INT'UndsUnds'Int'Unds'Int{}(SortInt{}, SortInt{}) : SortBool{} [org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(383,19,383,145)"), hook{}("INT.lt"), functional{}(), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/Users/manasvi/Projects/k-in-k/ext/k/k-distribution/target/release/k/include/builtin/domains.k)"), originalPrd{}(), left{}(), productionID{}("1161322357"), latex{}("{#1}\\mathrel{<_{\\scriptstyle\\it Int}}{#2}"), smtlib{}("<"), function{}()]
  symbol LblisKItem{}(SortK{}) : SortBool{} [function{}(), predicate{}("KItem"), originalPrd{}()]
  hooked-symbol LblSet'Coln'difference{}(SortSet{}, SortSet{}) : SortSet{} [klabel{}("Set:difference"), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(172,18,172,146)"), hook{}("SET.difference"), functional{}(), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/Users/manasvi/Projects/k-in-k/ext/k/k-distribution/target/release/k/include/builtin/domains.k)"), originalPrd{}(), productionID{}("1267105885"), latex{}("{#1}-_{\\it Set}{#2}"), symbol'Kywd'{}(""), function{}()]
  symbol Lbl'Hash'freezer'UndsEqlsUndsSClnUnds'IMP-SYNTAX'UndsUnds'Id'Unds'AExp0'Unds'{}(SortK{}) : SortKItem{} [originalPrd{}(), constructor{}(), functional{}()]
  hooked-symbol LblfindString'LParUndsCommUndsCommUndsRParUnds'STRING'UndsUnds'String'Unds'String'Unds'Int{}(SortString{}, SortString{}, SortInt{}) : SortInt{} [klabel{}("findString"), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(499,18,499,85)"), hook{}("STRING.find"), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/Users/manasvi/Projects/k-in-k/ext/k/k-distribution/target/release/k/include/builtin/domains.k)"), originalPrd{}(), productionID{}("1552326679"), function{}()]
  symbol Lbl'Hash'open'LParUndsRParUnds'K-IO'UndsUnds'String{}(SortString{}) : SortInt{} [org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(830,18,830,50)"), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/Users/manasvi/Projects/k-in-k/ext/k/k-distribution/target/release/k/include/builtin/domains.k)"), originalPrd{}(), productionID{}("1470358122"), function{}()]
  hooked-symbol Lbl'Unds-LT-Eqls'Set'UndsUnds'SET'UndsUnds'Set'Unds'Set{}(SortSet{}, SortSet{}) : SortBool{} [org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(178,19,178,85)"), hook{}("SET.inclusion"), functional{}(), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/Users/manasvi/Projects/k-in-k/ext/k/k-distribution/target/release/k/include/builtin/domains.k)"), originalPrd{}(), productionID{}("1095352419"), function{}()]
  symbol Lbl'Hash'ERANGE'Unds'K-IO'Unds'{}() : SortIOError{} [org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(793,22,793,30)"), functional{}(), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/Users/manasvi/Projects/k-in-k/ext/k/k-distribution/target/release/k/include/builtin/domains.k)"), originalPrd{}(), constructor{}(), productionID{}("515809288")]
  hooked-symbol LblremoveAll'LParUndsCommUndsRParUnds'MAP'UndsUnds'Map'Unds'Set{}(SortMap{}, SortSet{}) : SortMap{} [klabel{}("removeAll"), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(128,18,128,91)"), hook{}("MAP.removeAll"), functional{}(), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/Users/manasvi/Projects/k-in-k/ext/k/k-distribution/target/release/k/include/builtin/domains.k)"), originalPrd{}(), productionID{}("1173346575"), function{}()]
  hooked-symbol Lbl'Hash'parseInModule'LParUndsCommUndsCommUndsRParUnds'K-IO'UndsUnds'String'Unds'String'Unds'String{}(SortString{}, SortString{}, SortString{}) : SortKItem{} [klabel{}("#parseInModule"), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(849,20,852,76)"), hook{}("IO.parseInModule"), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/Users/manasvi/Projects/k-in-k/ext/k/k-distribution/target/release/k/include/builtin/domains.k)"), originalPrd{}(), impure{}(), productionID{}("817299424"), function{}()]
  symbol Lbl'Hash'EBUSY'Unds'K-IO'Unds'{}() : SortIOError{} [org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(765,22,765,29)"), functional{}(), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/Users/manasvi/Projects/k-in-k/ext/k/k-distribution/target/release/k/include/builtin/domains.k)"), originalPrd{}(), constructor{}(), productionID{}("1324829744")]
  symbol Lbl'Hash'freezer'UndsSlshUndsUnds'IMP-SYNTAX'UndsUnds'AExp'Unds'AExp0'Unds'{}(SortK{}) : SortKItem{} [originalPrd{}(), constructor{}(), functional{}()]
  symbol LblisKConfigVar{}(SortK{}) : SortBool{} [function{}(), predicate{}("KConfigVar"), originalPrd{}()]
  symbol Lbl'Hash'freezer'UndsPlusUndsUnds'IMP-SYNTAX'UndsUnds'AExp'Unds'AExp1'Unds'{}(SortK{}) : SortKItem{} [originalPrd{}(), constructor{}(), functional{}()]
  symbol Lbl'LBraRBraUnds'IMP-SYNTAX'Unds'{}() : SortBlock{} [org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(15,20,15,60)"), functional{}(), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/Users/manasvi/Projects/k-in-k/imp/./imp.k)"), originalPrd{}(), constructor{}(), productionID{}("1860491691"), symbol'Kywd'{}("skip")]
  symbol LblfreshId'LParUndsRParUnds'ID-SYNTAX'UndsUnds'Int{}(SortInt{}) : SortId{} [klabel{}("freshId"), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(701,17,701,70)"), freshGenerator{}(), functional{}(), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/Users/manasvi/Projects/k-in-k/ext/k/k-distribution/target/release/k/include/builtin/domains.k)"), originalPrd{}(), productionID{}("93199773"), function{}()]
  symbol Lbl'Hash'stdin'Unds'K-IO'Unds'{}() : SortInt{} [org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(856,18,856,50)"), functional{}(), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/Users/manasvi/Projects/k-in-k/ext/k/k-distribution/target/release/k/include/builtin/domains.k)"), originalPrd{}(), productionID{}("2031951755"), function{}()]
  hooked-symbol Lbl'Hash'close'LParUndsRParUnds'K-IO'UndsUnds'Int{}(SortInt{}) : SortK{} [org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(836,16,836,70)"), hook{}("IO.close"), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/Users/manasvi/Projects/k-in-k/ext/k/k-distribution/target/release/k/include/builtin/domains.k)"), originalPrd{}(), impure{}(), productionID{}("996125997"), function{}()]
  symbol Lbl'-LT-'T'-GT-'-fragment{}(SortKCellOpt{}, SortStateCellOpt{}) : SortTCellFragment{} [cellFragment{}("TCell"), originalPrd{}(), constructor{}(), functional{}()]
  hooked-symbol Lbl'UndsEqlsEqls'Bool'UndsUnds'BOOL'UndsUnds'Bool'Unds'Bool{}(SortBool{}, SortBool{}) : SortBool{} [org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(279,19,279,96)"), hook{}("BOOL.eq"), functional{}(), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/Users/manasvi/Projects/k-in-k/ext/k/k-distribution/target/release/k/include/builtin/domains.k)"), originalPrd{}(), left{}(), productionID{}("366252104"), smtlib{}("="), function{}()]
  symbol Lbl'Hash'EINPROGRESS'Unds'K-IO'Unds'{}() : SortIOError{} [org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(799,22,799,35)"), functional{}(), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/Users/manasvi/Projects/k-in-k/ext/k/k-distribution/target/release/k/include/builtin/domains.k)"), originalPrd{}(), constructor{}(), productionID{}("2030411960")]
  symbol LblnoKCell{}() : SortKCellOpt{} [cellOptAbsent{}("KCell"), originalPrd{}(), constructor{}(), functional{}()]
  hooked-symbol Lbl'Unds'-Int'UndsUnds'INT'UndsUnds'Int'Unds'Int{}(SortInt{}, SortInt{}) : SortInt{} [org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(349,18,349,152)"), hook{}("INT.sub"), functional{}(), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/Users/manasvi/Projects/k-in-k/ext/k/k-distribution/target/release/k/include/builtin/domains.k)"), originalPrd{}(), left{}(), productionID{}("1351478315"), latex{}("{#1}\\mathrel{-_{\\scriptstyle\\it Int}}{#2}"), smtlib{}("-"), function{}()]
  symbol Lbl'Hash'ENOMEM'Unds'K-IO'Unds'{}() : SortIOError{} [org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(784,22,784,30)"), functional{}(), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/Users/manasvi/Projects/k-in-k/ext/k/k-distribution/target/release/k/include/builtin/domains.k)"), originalPrd{}(), constructor{}(), productionID{}("193388045")]
  symbol LblisKCell{}(SortK{}) : SortBool{} [function{}(), predicate{}("KCell"), originalPrd{}()]
  symbol Lbl'Hash'ENOTDIR'Unds'K-IO'Unds'{}() : SortIOError{} [org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(787,22,787,31)"), functional{}(), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/Users/manasvi/Projects/k-in-k/ext/k/k-distribution/target/release/k/include/builtin/domains.k)"), originalPrd{}(), constructor{}(), productionID{}("292138977")]
  symbol LblisPgm{}(SortK{}) : SortBool{} [function{}(), predicate{}("Pgm"), originalPrd{}()]
  symbol Lbl'Hash'ENAMETOOLONG'Unds'K-IO'Unds'{}() : SortIOError{} [org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(778,22,778,36)"), functional{}(), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/Users/manasvi/Projects/k-in-k/ext/k/k-distribution/target/release/k/include/builtin/domains.k)"), originalPrd{}(), constructor{}(), productionID{}("871790326")]
  hooked-symbol LblmaxInt'LParUndsCommUndsRParUnds'INT'UndsUnds'Int'Unds'Int{}(SortInt{}, SortInt{}) : SortInt{} [org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(360,18,360,102)"), hook{}("INT.max"), functional{}(), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/Users/manasvi/Projects/k-in-k/ext/k/k-distribution/target/release/k/include/builtin/domains.k)"), originalPrd{}(), productionID{}("1954985045"), smtlib{}("int_max"), function{}()]
  symbol Lbl'Hash'EADDRINUSE'Unds'K-IO'Unds'{}() : SortIOError{} [org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(811,22,811,34)"), functional{}(), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/Users/manasvi/Projects/k-in-k/ext/k/k-distribution/target/release/k/include/builtin/domains.k)"), originalPrd{}(), constructor{}(), productionID{}("1693226694")]
  symbol Lbl'-LT-'k'-GT-'{}(SortK{}) : SortKCell{} [org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(33,17,36,21)"), contentStartColumn{}("17"), org'Stop'kframework'Stop'definition'Stop'Production{}("syntax RuleContent ::= K"), functional{}(), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/Users/manasvi/Projects/k-in-k/imp/./imp.k)"), contentStartLine{}("33"), color{}("green"), format{}("%1%i%n%2%d%n%3"), originalPrd{}(), constructor{}(), cell{}(), maincell{}()]
  hooked-symbol Lbl'Hash'putc'LParUndsCommUndsRParUnds'K-IO'UndsUnds'Int'Unds'Int{}(SortInt{}, SortInt{}) : SortK{} [org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(839,16,839,81)"), hook{}("IO.putc"), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/Users/manasvi/Projects/k-in-k/ext/k/k-distribution/target/release/k/include/builtin/domains.k)"), originalPrd{}(), impure{}(), productionID{}("1457263953"), function{}()]
  hooked-symbol Lbl'Unds'andBool'Unds'{}(SortBool{}, SortBool{}) : SortBool{} [klabel{}("_andBool_"), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(272,19,272,187)"), hook{}("BOOL.and"), functional{}(), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/Users/manasvi/Projects/k-in-k/ext/k/k-distribution/target/release/k/include/builtin/domains.k)"), boolOperation{}(), originalPrd{}(), left{}(), productionID{}("566113173"), latex{}("{#1}\\wedge_{\\scriptstyle\\it Bool}{#2}"), smtlib{}("and"), symbol'Kywd'{}(""), function{}()]
  symbol LblisAExp{}(SortK{}) : SortBool{} [function{}(), predicate{}("AExp"), originalPrd{}()]
  symbol Lbl'Unds'Set'Unds'{}(SortSet{}, SortSet{}) : SortSet{} [idem{}(), klabel{}("_Set_"), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(159,18,159,176)"), hook{}("SET.concat"), functional{}(), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/Users/manasvi/Projects/k-in-k/ext/k/k-distribution/target/release/k/include/builtin/domains.k)"), unit{}(".Set"), assoc{}(), format{}("%1%n%2"), originalPrd{}(), left{}(), productionID{}("127791068"), element{}("SetItem"), symbol'Kywd'{}(""), function{}(), comm{}()]
  hooked-symbol Lbl'Hash'fresh'LParUndsRParUnds'K-REFLECTION'UndsUnds'String{}(SortString{}) : SortKItem{} [klabel{}("#fresh"), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(744,20,744,79)"), hook{}("KREFLECTION.fresh"), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/Users/manasvi/Projects/k-in-k/ext/k/k-distribution/target/release/k/include/builtin/domains.k)"), originalPrd{}(), impure{}(), productionID{}("648936749"), function{}()]
  hooked-symbol LblString2Base'LParUndsCommUndsRParUnds'STRING'UndsUnds'String'Unds'Int{}(SortString{}, SortInt{}) : SortInt{} [klabel{}("String2Base"), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(510,21,510,92)"), hook{}("STRING.string2base"), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/Users/manasvi/Projects/k-in-k/ext/k/k-distribution/target/release/k/include/builtin/domains.k)"), originalPrd{}(), productionID{}("629454893"), function{}()]
  hooked-symbol LblFloat2String'LParUndsCommUndsRParUnds'STRING'UndsUnds'Float'Unds'String{}(SortFloat{}, SortString{}) : SortString{} [klabel{}("FloatFormat"), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(505,21,505,113)"), hook{}("STRING.floatFormat"), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/Users/manasvi/Projects/k-in-k/ext/k/k-distribution/target/release/k/include/builtin/domains.k)"), originalPrd{}(), productionID{}("462526099"), function{}()]
  symbol Lblif'LParUndsRParUnds'else'UndsUnds'IMP-SYNTAX'UndsUnds'BExp'Unds'Block'Unds'Block{}(SortBExp{}, SortBlock{}, SortBlock{}) : SortStmt{} [org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(19,20,20,70)"), functional{}(), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/Users/manasvi/Projects/k-in-k/imp/./imp.k)"), originalPrd{}(), constructor{}(), productionID{}("1350751778"), strict{}("1"), symbol'Kywd'{}("ite")]
  hooked-symbol Lbl'UndsXor-'Int'UndsUnds'INT'UndsUnds'Int'Unds'Int{}(SortInt{}, SortInt{}) : SortInt{} [org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(336,18,336,151)"), hook{}("INT.pow"), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/Users/manasvi/Projects/k-in-k/ext/k/k-distribution/target/release/k/include/builtin/domains.k)"), originalPrd{}(), left{}(), productionID{}("307829448"), latex{}("{#1}\\mathrel{{\\char`\\^}_{\\!\\scriptstyle\\it Int}}{#2}"), smtlib{}("^"), function{}()]
  symbol Lbl'Hash'freezer'UndsAndAndUndsUnds'IMP-SYNTAX'UndsUnds'BExp'Unds'BExp1'Unds'{}(SortK{}) : SortKItem{} [originalPrd{}(), constructor{}(), functional{}()]
  symbol Lbl'Hash'EROFS'Unds'K-IO'Unds'{}() : SortIOError{} [org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(794,22,794,29)"), functional{}(), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/Users/manasvi/Projects/k-in-k/ext/k/k-distribution/target/release/k/include/builtin/domains.k)"), originalPrd{}(), constructor{}(), productionID{}("1926673338")]
  symbol Lbl'Hash'EPROTONOSUPPORT'Unds'K-IO'Unds'{}() : SortIOError{} [org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(806,22,806,39)"), functional{}(), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/Users/manasvi/Projects/k-in-k/ext/k/k-distribution/target/release/k/include/builtin/domains.k)"), originalPrd{}(), constructor{}(), productionID{}("1371376476")]
  hooked-symbol Lbl'UndsEqlsSlshEqls'K'UndsUnds'K-EQUAL'UndsUnds'K'Unds'K{}(SortK{}, SortK{}) : SortBool{} [org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(724,19,724,144)"), notEqualEqualK{}(), hook{}("KEQUAL.ne"), functional{}(), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/Users/manasvi/Projects/k-in-k/ext/k/k-distribution/target/release/k/include/builtin/domains.k)"), originalPrd{}(), productionID{}("795321555"), latex{}("{#1}\\mathrel{\\neq_K}{#2}"), smtlib{}("distinct"), function{}()]
  symbol LblisIOError{}(SortK{}) : SortBool{} [function{}(), predicate{}("IOError"), originalPrd{}()]
  symbol LblisFloat{}(SortK{}) : SortBool{} [function{}(), predicate{}("Float"), originalPrd{}()]
  hooked-symbol Lbl'Hash'open'LParUndsCommUndsRParUnds'K-IO'UndsUnds'String'Unds'String{}(SortString{}, SortString{}) : SortInt{} [org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(831,18,831,84)"), hook{}("IO.open"), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/Users/manasvi/Projects/k-in-k/ext/k/k-distribution/target/release/k/include/builtin/domains.k)"), originalPrd{}(), impure{}(), productionID{}("1975873209"), function{}()]
  symbol Lbl'Hash'ESOCKTNOSUPPORT'Unds'K-IO'Unds'{}() : SortIOError{} [org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(807,22,807,39)"), functional{}(), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/Users/manasvi/Projects/k-in-k/ext/k/k-distribution/target/release/k/include/builtin/domains.k)"), originalPrd{}(), constructor{}(), productionID{}("2068897588")]
  symbol Lbl'Hash'ECHILD'Unds'K-IO'Unds'{}() : SortIOError{} [org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(766,22,766,30)"), functional{}(), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/Users/manasvi/Projects/k-in-k/ext/k/k-distribution/target/release/k/include/builtin/domains.k)"), originalPrd{}(), constructor{}(), productionID{}("1921242091")]
  hooked-symbol Lbl'Hash'stat'LParUndsRParUnds'K-IO'UndsUnds'String{}(SortString{}) : SortKItem{} [org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(844,20,844,75)"), hook{}("IO.stat"), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/Users/manasvi/Projects/k-in-k/ext/k/k-distribution/target/release/k/include/builtin/domains.k)"), originalPrd{}(), impure{}(), productionID{}("884603232"), function{}()]
  symbol Lbl'LBraUndsRBraUnds'IMP-SYNTAX'UndsUnds'Stmt{}(SortStmt{}) : SortBlock{} [org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(16,20,16,61)"), functional{}(), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/Users/manasvi/Projects/k-in-k/imp/./imp.k)"), originalPrd{}(), constructor{}(), productionID{}("1515403487"), symbol'Kywd'{}("block")]
  symbol LblisBlock{}(SortK{}) : SortBool{} [function{}(), predicate{}("Block"), originalPrd{}()]
  hooked-symbol Lbl'Unds'in'Unds'keys'LParUndsRParUnds'MAP'UndsUnds'K'Unds'Map{}(SortK{}, SortMap{}) : SortBool{} [org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(134,19,134,89)"), hook{}("MAP.in_keys"), functional{}(), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/Users/manasvi/Projects/k-in-k/ext/k/k-distribution/target/release/k/include/builtin/domains.k)"), originalPrd{}(), productionID{}("52514534"), function{}()]

// generated axioms
  axiom{R} \exists{R} (Val:SortIOError{}, \equals{SortIOError{}, R} (Val:SortIOError{}, Lbl'Hash'unknownIOError'LParUndsRParUnds'K-IO'UndsUnds'Int{}(K0:SortInt{}))) [functional{}()] // functional
  axiom{}\implies{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'unknownIOError'LParUndsRParUnds'K-IO'UndsUnds'Int{}(X0:SortInt{}), Lbl'Hash'unknownIOError'LParUndsRParUnds'K-IO'UndsUnds'Int{}(Y0:SortInt{})), Lbl'Hash'unknownIOError'LParUndsRParUnds'K-IO'UndsUnds'Int{}(\and{SortInt{}} (X0:SortInt{}, Y0:SortInt{}))) [constructor{}()] // no confusion same constructor
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'unknownIOError'LParUndsRParUnds'K-IO'UndsUnds'Int{}(X0:SortInt{}), Lbl'Hash'EBADF'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'unknownIOError'LParUndsRParUnds'K-IO'UndsUnds'Int{}(X0:SortInt{}), Lbl'Hash'ESPIPE'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'unknownIOError'LParUndsRParUnds'K-IO'UndsUnds'Int{}(X0:SortInt{}), Lbl'Hash'EOVERFLOW'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'unknownIOError'LParUndsRParUnds'K-IO'UndsUnds'Int{}(X0:SortInt{}), Lbl'Hash'ENFILE'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'unknownIOError'LParUndsRParUnds'K-IO'UndsUnds'Int{}(X0:SortInt{}), Lbl'Hash'ENETUNREACH'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'unknownIOError'LParUndsRParUnds'K-IO'UndsUnds'Int{}(X0:SortInt{}), Lbl'Hash'EOF'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'unknownIOError'LParUndsRParUnds'K-IO'UndsUnds'Int{}(X0:SortInt{}), Lbl'Hash'EXDEV'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'unknownIOError'LParUndsRParUnds'K-IO'UndsUnds'Int{}(X0:SortInt{}), Lbl'Hash'EADDRNOTAVAIL'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'unknownIOError'LParUndsRParUnds'K-IO'UndsUnds'Int{}(X0:SortInt{}), Lbl'Hash'EACCES'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'unknownIOError'LParUndsRParUnds'K-IO'UndsUnds'Int{}(X0:SortInt{}), Lbl'Hash'ENOPROTOOPT'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'unknownIOError'LParUndsRParUnds'K-IO'UndsUnds'Int{}(X0:SortInt{}), Lbl'Hash'EAGAIN'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'unknownIOError'LParUndsRParUnds'K-IO'UndsUnds'Int{}(X0:SortInt{}), Lbl'Hash'ENETDOWN'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'unknownIOError'LParUndsRParUnds'K-IO'UndsUnds'Int{}(X0:SortInt{}), Lbl'Hash'EISCONN'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'unknownIOError'LParUndsRParUnds'K-IO'UndsUnds'Int{}(X0:SortInt{}), Lbl'Hash'EPIPE'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'unknownIOError'LParUndsRParUnds'K-IO'UndsUnds'Int{}(X0:SortInt{}), Lbl'Hash'ECONNABORTED'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'unknownIOError'LParUndsRParUnds'K-IO'UndsUnds'Int{}(X0:SortInt{}), Lbl'Hash'ESRCH'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'unknownIOError'LParUndsRParUnds'K-IO'UndsUnds'Int{}(X0:SortInt{}), Lbl'Hash'EOPNOTSUPP'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'unknownIOError'LParUndsRParUnds'K-IO'UndsUnds'Int{}(X0:SortInt{}), Lbl'Hash'ENOSPC'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'unknownIOError'LParUndsRParUnds'K-IO'UndsUnds'Int{}(X0:SortInt{}), Lbl'Hash'EDEADLK'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'unknownIOError'LParUndsRParUnds'K-IO'UndsUnds'Int{}(X0:SortInt{}), Lbl'Hash'ECONNREFUSED'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'unknownIOError'LParUndsRParUnds'K-IO'UndsUnds'Int{}(X0:SortInt{}), Lbl'Hash'EPROTOTYPE'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'unknownIOError'LParUndsRParUnds'K-IO'UndsUnds'Int{}(X0:SortInt{}), Lbl'Hash'EAFNOSUPPORT'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'unknownIOError'LParUndsRParUnds'K-IO'UndsUnds'Int{}(X0:SortInt{}), Lbl'Hash'ENXIO'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'unknownIOError'LParUndsRParUnds'K-IO'UndsUnds'Int{}(X0:SortInt{}), Lbl'Hash'EWOULDBLOCK'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'unknownIOError'LParUndsRParUnds'K-IO'UndsUnds'Int{}(X0:SortInt{}), Lbl'Hash'E2BIG'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'unknownIOError'LParUndsRParUnds'K-IO'UndsUnds'Int{}(X0:SortInt{}), Lbl'Hash'ENETRESET'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'unknownIOError'LParUndsRParUnds'K-IO'UndsUnds'Int{}(X0:SortInt{}), Lbl'Hash'EPERM'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'unknownIOError'LParUndsRParUnds'K-IO'UndsUnds'Int{}(X0:SortInt{}), Lbl'Hash'ENOSYS'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'unknownIOError'LParUndsRParUnds'K-IO'UndsUnds'Int{}(X0:SortInt{}), Lbl'Hash'EALREADY'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'unknownIOError'LParUndsRParUnds'K-IO'UndsUnds'Int{}(X0:SortInt{}), Lbl'Hash'EHOSTDOWN'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'unknownIOError'LParUndsRParUnds'K-IO'UndsUnds'Int{}(X0:SortInt{}), Lbl'Hash'ENOTSOCK'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'unknownIOError'LParUndsRParUnds'K-IO'UndsUnds'Int{}(X0:SortInt{}), Lbl'Hash'EDOM'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'unknownIOError'LParUndsRParUnds'K-IO'UndsUnds'Int{}(X0:SortInt{}), Lbl'Hash'ENOBUFS'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'unknownIOError'LParUndsRParUnds'K-IO'UndsUnds'Int{}(X0:SortInt{}), Lbl'Hash'ETIMEDOUT'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'unknownIOError'LParUndsRParUnds'K-IO'UndsUnds'Int{}(X0:SortInt{}), Lbl'Hash'ETOOMANYREFS'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'unknownIOError'LParUndsRParUnds'K-IO'UndsUnds'Int{}(X0:SortInt{}), Lbl'Hash'EDESTADDRREQ'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'unknownIOError'LParUndsRParUnds'K-IO'UndsUnds'Int{}(X0:SortInt{}), Lbl'Hash'ENOTTY'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'unknownIOError'LParUndsRParUnds'K-IO'UndsUnds'Int{}(X0:SortInt{}), Lbl'Hash'ECONNRESET'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'unknownIOError'LParUndsRParUnds'K-IO'UndsUnds'Int{}(X0:SortInt{}), Lbl'Hash'EMFILE'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'unknownIOError'LParUndsRParUnds'K-IO'UndsUnds'Int{}(X0:SortInt{}), Lbl'Hash'EIO'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'unknownIOError'LParUndsRParUnds'K-IO'UndsUnds'Int{}(X0:SortInt{}), Lbl'Hash'ENOEXEC'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'unknownIOError'LParUndsRParUnds'K-IO'UndsUnds'Int{}(X0:SortInt{}), Lbl'Hash'EPFNOSUPPORT'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'unknownIOError'LParUndsRParUnds'K-IO'UndsUnds'Int{}(X0:SortInt{}), Lbl'Hash'ESHUTDOWN'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'unknownIOError'LParUndsRParUnds'K-IO'UndsUnds'Int{}(X0:SortInt{}), Lbl'Hash'EINVAL'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'unknownIOError'LParUndsRParUnds'K-IO'UndsUnds'Int{}(X0:SortInt{}), Lbl'Hash'EMLINK'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'unknownIOError'LParUndsRParUnds'K-IO'UndsUnds'Int{}(X0:SortInt{}), Lbl'Hash'EISDIR'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'unknownIOError'LParUndsRParUnds'K-IO'UndsUnds'Int{}(X0:SortInt{}), Lbl'Hash'EFBIG'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'unknownIOError'LParUndsRParUnds'K-IO'UndsUnds'Int{}(X0:SortInt{}), Lbl'Hash'ENOTCONN'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'unknownIOError'LParUndsRParUnds'K-IO'UndsUnds'Int{}(X0:SortInt{}), Lbl'Hash'ENODEV'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'unknownIOError'LParUndsRParUnds'K-IO'UndsUnds'Int{}(X0:SortInt{}), Lbl'Hash'EEXIST'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'unknownIOError'LParUndsRParUnds'K-IO'UndsUnds'Int{}(X0:SortInt{}), Lbl'Hash'ELOOP'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'unknownIOError'LParUndsRParUnds'K-IO'UndsUnds'Int{}(X0:SortInt{}), Lbl'Hash'ENOTEMPTY'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'unknownIOError'LParUndsRParUnds'K-IO'UndsUnds'Int{}(X0:SortInt{}), Lbl'Hash'EHOSTUNREACH'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'unknownIOError'LParUndsRParUnds'K-IO'UndsUnds'Int{}(X0:SortInt{}), Lbl'Hash'noparse'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'unknownIOError'LParUndsRParUnds'K-IO'UndsUnds'Int{}(X0:SortInt{}), Lbl'Hash'EINTR'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'unknownIOError'LParUndsRParUnds'K-IO'UndsUnds'Int{}(X0:SortInt{}), Lbl'Hash'EMSGSIZE'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'unknownIOError'LParUndsRParUnds'K-IO'UndsUnds'Int{}(X0:SortInt{}), Lbl'Hash'ENOENT'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'unknownIOError'LParUndsRParUnds'K-IO'UndsUnds'Int{}(X0:SortInt{}), Lbl'Hash'ENOLCK'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'unknownIOError'LParUndsRParUnds'K-IO'UndsUnds'Int{}(X0:SortInt{}), Lbl'Hash'EFAULT'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'unknownIOError'LParUndsRParUnds'K-IO'UndsUnds'Int{}(X0:SortInt{}), Lbl'Hash'ERANGE'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'unknownIOError'LParUndsRParUnds'K-IO'UndsUnds'Int{}(X0:SortInt{}), Lbl'Hash'EBUSY'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'unknownIOError'LParUndsRParUnds'K-IO'UndsUnds'Int{}(X0:SortInt{}), Lbl'Hash'EINPROGRESS'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'unknownIOError'LParUndsRParUnds'K-IO'UndsUnds'Int{}(X0:SortInt{}), Lbl'Hash'ENOMEM'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'unknownIOError'LParUndsRParUnds'K-IO'UndsUnds'Int{}(X0:SortInt{}), Lbl'Hash'ENOTDIR'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'unknownIOError'LParUndsRParUnds'K-IO'UndsUnds'Int{}(X0:SortInt{}), Lbl'Hash'ENAMETOOLONG'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'unknownIOError'LParUndsRParUnds'K-IO'UndsUnds'Int{}(X0:SortInt{}), Lbl'Hash'EADDRINUSE'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'unknownIOError'LParUndsRParUnds'K-IO'UndsUnds'Int{}(X0:SortInt{}), Lbl'Hash'EROFS'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'unknownIOError'LParUndsRParUnds'K-IO'UndsUnds'Int{}(X0:SortInt{}), Lbl'Hash'EPROTONOSUPPORT'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'unknownIOError'LParUndsRParUnds'K-IO'UndsUnds'Int{}(X0:SortInt{}), Lbl'Hash'ESOCKTNOSUPPORT'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'unknownIOError'LParUndsRParUnds'K-IO'UndsUnds'Int{}(X0:SortInt{}), Lbl'Hash'ECHILD'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{R} \exists{R} (Val:SortSet{}, \equals{SortSet{}, R} (Val:SortSet{}, Lbl'Stop'Set{}())) [functional{}()] // functional
  axiom{R} \exists{R} (Val:SortId{}, \equals{SortId{}, R} (Val:SortId{}, LblString2Id'LParUndsRParUnds'ID-SYNTAX'UndsUnds'String{}(K0:SortString{}))) [functional{}()] // functional
  axiom{R} \exists{R} (Val:SortIOError{}, \equals{SortIOError{}, R} (Val:SortIOError{}, Lbl'Hash'EBADF'Unds'K-IO'Unds'{}())) [functional{}()] // functional
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EBADF'Unds'K-IO'Unds'{}(), Lbl'Hash'ESPIPE'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EBADF'Unds'K-IO'Unds'{}(), Lbl'Hash'EOVERFLOW'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EBADF'Unds'K-IO'Unds'{}(), Lbl'Hash'ENFILE'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EBADF'Unds'K-IO'Unds'{}(), Lbl'Hash'ENETUNREACH'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EBADF'Unds'K-IO'Unds'{}(), Lbl'Hash'EOF'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EBADF'Unds'K-IO'Unds'{}(), Lbl'Hash'EXDEV'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EBADF'Unds'K-IO'Unds'{}(), Lbl'Hash'EADDRNOTAVAIL'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EBADF'Unds'K-IO'Unds'{}(), Lbl'Hash'EACCES'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EBADF'Unds'K-IO'Unds'{}(), Lbl'Hash'ENOPROTOOPT'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EBADF'Unds'K-IO'Unds'{}(), Lbl'Hash'EAGAIN'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EBADF'Unds'K-IO'Unds'{}(), Lbl'Hash'ENETDOWN'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EBADF'Unds'K-IO'Unds'{}(), Lbl'Hash'EISCONN'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EBADF'Unds'K-IO'Unds'{}(), Lbl'Hash'EPIPE'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EBADF'Unds'K-IO'Unds'{}(), Lbl'Hash'ECONNABORTED'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EBADF'Unds'K-IO'Unds'{}(), Lbl'Hash'ESRCH'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EBADF'Unds'K-IO'Unds'{}(), Lbl'Hash'EOPNOTSUPP'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EBADF'Unds'K-IO'Unds'{}(), Lbl'Hash'ENOSPC'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EBADF'Unds'K-IO'Unds'{}(), Lbl'Hash'EDEADLK'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EBADF'Unds'K-IO'Unds'{}(), Lbl'Hash'ECONNREFUSED'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EBADF'Unds'K-IO'Unds'{}(), Lbl'Hash'EPROTOTYPE'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EBADF'Unds'K-IO'Unds'{}(), Lbl'Hash'EAFNOSUPPORT'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EBADF'Unds'K-IO'Unds'{}(), Lbl'Hash'ENXIO'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EBADF'Unds'K-IO'Unds'{}(), Lbl'Hash'EWOULDBLOCK'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EBADF'Unds'K-IO'Unds'{}(), Lbl'Hash'E2BIG'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EBADF'Unds'K-IO'Unds'{}(), Lbl'Hash'ENETRESET'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EBADF'Unds'K-IO'Unds'{}(), Lbl'Hash'EPERM'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EBADF'Unds'K-IO'Unds'{}(), Lbl'Hash'ENOSYS'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EBADF'Unds'K-IO'Unds'{}(), Lbl'Hash'EALREADY'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EBADF'Unds'K-IO'Unds'{}(), Lbl'Hash'EHOSTDOWN'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EBADF'Unds'K-IO'Unds'{}(), Lbl'Hash'ENOTSOCK'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EBADF'Unds'K-IO'Unds'{}(), Lbl'Hash'EDOM'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EBADF'Unds'K-IO'Unds'{}(), Lbl'Hash'ENOBUFS'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EBADF'Unds'K-IO'Unds'{}(), Lbl'Hash'ETIMEDOUT'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EBADF'Unds'K-IO'Unds'{}(), Lbl'Hash'ETOOMANYREFS'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EBADF'Unds'K-IO'Unds'{}(), Lbl'Hash'EDESTADDRREQ'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EBADF'Unds'K-IO'Unds'{}(), Lbl'Hash'ENOTTY'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EBADF'Unds'K-IO'Unds'{}(), Lbl'Hash'ECONNRESET'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EBADF'Unds'K-IO'Unds'{}(), Lbl'Hash'EMFILE'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EBADF'Unds'K-IO'Unds'{}(), Lbl'Hash'EIO'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EBADF'Unds'K-IO'Unds'{}(), Lbl'Hash'ENOEXEC'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EBADF'Unds'K-IO'Unds'{}(), Lbl'Hash'EPFNOSUPPORT'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EBADF'Unds'K-IO'Unds'{}(), Lbl'Hash'ESHUTDOWN'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EBADF'Unds'K-IO'Unds'{}(), Lbl'Hash'EINVAL'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EBADF'Unds'K-IO'Unds'{}(), Lbl'Hash'EMLINK'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EBADF'Unds'K-IO'Unds'{}(), Lbl'Hash'EISDIR'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EBADF'Unds'K-IO'Unds'{}(), Lbl'Hash'EFBIG'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EBADF'Unds'K-IO'Unds'{}(), Lbl'Hash'ENOTCONN'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EBADF'Unds'K-IO'Unds'{}(), Lbl'Hash'ENODEV'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EBADF'Unds'K-IO'Unds'{}(), Lbl'Hash'EEXIST'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EBADF'Unds'K-IO'Unds'{}(), Lbl'Hash'ELOOP'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EBADF'Unds'K-IO'Unds'{}(), Lbl'Hash'ENOTEMPTY'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EBADF'Unds'K-IO'Unds'{}(), Lbl'Hash'EHOSTUNREACH'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EBADF'Unds'K-IO'Unds'{}(), Lbl'Hash'noparse'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EBADF'Unds'K-IO'Unds'{}(), Lbl'Hash'EINTR'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EBADF'Unds'K-IO'Unds'{}(), Lbl'Hash'EMSGSIZE'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EBADF'Unds'K-IO'Unds'{}(), Lbl'Hash'ENOENT'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EBADF'Unds'K-IO'Unds'{}(), Lbl'Hash'ENOLCK'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EBADF'Unds'K-IO'Unds'{}(), Lbl'Hash'EFAULT'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EBADF'Unds'K-IO'Unds'{}(), Lbl'Hash'ERANGE'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EBADF'Unds'K-IO'Unds'{}(), Lbl'Hash'EBUSY'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EBADF'Unds'K-IO'Unds'{}(), Lbl'Hash'EINPROGRESS'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EBADF'Unds'K-IO'Unds'{}(), Lbl'Hash'ENOMEM'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EBADF'Unds'K-IO'Unds'{}(), Lbl'Hash'ENOTDIR'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EBADF'Unds'K-IO'Unds'{}(), Lbl'Hash'ENAMETOOLONG'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EBADF'Unds'K-IO'Unds'{}(), Lbl'Hash'EADDRINUSE'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EBADF'Unds'K-IO'Unds'{}(), Lbl'Hash'EROFS'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EBADF'Unds'K-IO'Unds'{}(), Lbl'Hash'EPROTONOSUPPORT'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EBADF'Unds'K-IO'Unds'{}(), Lbl'Hash'ESOCKTNOSUPPORT'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EBADF'Unds'K-IO'Unds'{}(), Lbl'Hash'ECHILD'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{R} \exists{R} (Val:SortIOError{}, \equals{SortIOError{}, R} (Val:SortIOError{}, Lbl'Hash'ESPIPE'Unds'K-IO'Unds'{}())) [functional{}()] // functional
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ESPIPE'Unds'K-IO'Unds'{}(), Lbl'Hash'EOVERFLOW'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ESPIPE'Unds'K-IO'Unds'{}(), Lbl'Hash'ENFILE'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ESPIPE'Unds'K-IO'Unds'{}(), Lbl'Hash'ENETUNREACH'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ESPIPE'Unds'K-IO'Unds'{}(), Lbl'Hash'EOF'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ESPIPE'Unds'K-IO'Unds'{}(), Lbl'Hash'EXDEV'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ESPIPE'Unds'K-IO'Unds'{}(), Lbl'Hash'EADDRNOTAVAIL'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ESPIPE'Unds'K-IO'Unds'{}(), Lbl'Hash'EACCES'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ESPIPE'Unds'K-IO'Unds'{}(), Lbl'Hash'ENOPROTOOPT'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ESPIPE'Unds'K-IO'Unds'{}(), Lbl'Hash'EAGAIN'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ESPIPE'Unds'K-IO'Unds'{}(), Lbl'Hash'ENETDOWN'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ESPIPE'Unds'K-IO'Unds'{}(), Lbl'Hash'EISCONN'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ESPIPE'Unds'K-IO'Unds'{}(), Lbl'Hash'EPIPE'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ESPIPE'Unds'K-IO'Unds'{}(), Lbl'Hash'ECONNABORTED'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ESPIPE'Unds'K-IO'Unds'{}(), Lbl'Hash'ESRCH'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ESPIPE'Unds'K-IO'Unds'{}(), Lbl'Hash'EOPNOTSUPP'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ESPIPE'Unds'K-IO'Unds'{}(), Lbl'Hash'ENOSPC'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ESPIPE'Unds'K-IO'Unds'{}(), Lbl'Hash'EDEADLK'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ESPIPE'Unds'K-IO'Unds'{}(), Lbl'Hash'ECONNREFUSED'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ESPIPE'Unds'K-IO'Unds'{}(), Lbl'Hash'EPROTOTYPE'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ESPIPE'Unds'K-IO'Unds'{}(), Lbl'Hash'EAFNOSUPPORT'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ESPIPE'Unds'K-IO'Unds'{}(), Lbl'Hash'ENXIO'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ESPIPE'Unds'K-IO'Unds'{}(), Lbl'Hash'EWOULDBLOCK'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ESPIPE'Unds'K-IO'Unds'{}(), Lbl'Hash'E2BIG'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ESPIPE'Unds'K-IO'Unds'{}(), Lbl'Hash'ENETRESET'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ESPIPE'Unds'K-IO'Unds'{}(), Lbl'Hash'EPERM'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ESPIPE'Unds'K-IO'Unds'{}(), Lbl'Hash'ENOSYS'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ESPIPE'Unds'K-IO'Unds'{}(), Lbl'Hash'EALREADY'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ESPIPE'Unds'K-IO'Unds'{}(), Lbl'Hash'EHOSTDOWN'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ESPIPE'Unds'K-IO'Unds'{}(), Lbl'Hash'ENOTSOCK'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ESPIPE'Unds'K-IO'Unds'{}(), Lbl'Hash'EDOM'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ESPIPE'Unds'K-IO'Unds'{}(), Lbl'Hash'ENOBUFS'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ESPIPE'Unds'K-IO'Unds'{}(), Lbl'Hash'ETIMEDOUT'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ESPIPE'Unds'K-IO'Unds'{}(), Lbl'Hash'ETOOMANYREFS'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ESPIPE'Unds'K-IO'Unds'{}(), Lbl'Hash'EDESTADDRREQ'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ESPIPE'Unds'K-IO'Unds'{}(), Lbl'Hash'ENOTTY'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ESPIPE'Unds'K-IO'Unds'{}(), Lbl'Hash'ECONNRESET'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ESPIPE'Unds'K-IO'Unds'{}(), Lbl'Hash'EMFILE'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ESPIPE'Unds'K-IO'Unds'{}(), Lbl'Hash'EIO'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ESPIPE'Unds'K-IO'Unds'{}(), Lbl'Hash'ENOEXEC'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ESPIPE'Unds'K-IO'Unds'{}(), Lbl'Hash'EPFNOSUPPORT'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ESPIPE'Unds'K-IO'Unds'{}(), Lbl'Hash'ESHUTDOWN'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ESPIPE'Unds'K-IO'Unds'{}(), Lbl'Hash'EINVAL'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ESPIPE'Unds'K-IO'Unds'{}(), Lbl'Hash'EMLINK'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ESPIPE'Unds'K-IO'Unds'{}(), Lbl'Hash'EISDIR'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ESPIPE'Unds'K-IO'Unds'{}(), Lbl'Hash'EFBIG'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ESPIPE'Unds'K-IO'Unds'{}(), Lbl'Hash'ENOTCONN'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ESPIPE'Unds'K-IO'Unds'{}(), Lbl'Hash'ENODEV'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ESPIPE'Unds'K-IO'Unds'{}(), Lbl'Hash'EEXIST'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ESPIPE'Unds'K-IO'Unds'{}(), Lbl'Hash'ELOOP'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ESPIPE'Unds'K-IO'Unds'{}(), Lbl'Hash'ENOTEMPTY'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ESPIPE'Unds'K-IO'Unds'{}(), Lbl'Hash'EHOSTUNREACH'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ESPIPE'Unds'K-IO'Unds'{}(), Lbl'Hash'noparse'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ESPIPE'Unds'K-IO'Unds'{}(), Lbl'Hash'EINTR'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ESPIPE'Unds'K-IO'Unds'{}(), Lbl'Hash'EMSGSIZE'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ESPIPE'Unds'K-IO'Unds'{}(), Lbl'Hash'ENOENT'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ESPIPE'Unds'K-IO'Unds'{}(), Lbl'Hash'ENOLCK'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ESPIPE'Unds'K-IO'Unds'{}(), Lbl'Hash'EFAULT'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ESPIPE'Unds'K-IO'Unds'{}(), Lbl'Hash'ERANGE'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ESPIPE'Unds'K-IO'Unds'{}(), Lbl'Hash'EBUSY'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ESPIPE'Unds'K-IO'Unds'{}(), Lbl'Hash'EINPROGRESS'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ESPIPE'Unds'K-IO'Unds'{}(), Lbl'Hash'ENOMEM'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ESPIPE'Unds'K-IO'Unds'{}(), Lbl'Hash'ENOTDIR'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ESPIPE'Unds'K-IO'Unds'{}(), Lbl'Hash'ENAMETOOLONG'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ESPIPE'Unds'K-IO'Unds'{}(), Lbl'Hash'EADDRINUSE'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ESPIPE'Unds'K-IO'Unds'{}(), Lbl'Hash'EROFS'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ESPIPE'Unds'K-IO'Unds'{}(), Lbl'Hash'EPROTONOSUPPORT'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ESPIPE'Unds'K-IO'Unds'{}(), Lbl'Hash'ESOCKTNOSUPPORT'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ESPIPE'Unds'K-IO'Unds'{}(), Lbl'Hash'ECHILD'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{R} \exists{R} (Val:SortIOError{}, \equals{SortIOError{}, R} (Val:SortIOError{}, Lbl'Hash'EOVERFLOW'Unds'K-IO'Unds'{}())) [functional{}()] // functional
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EOVERFLOW'Unds'K-IO'Unds'{}(), Lbl'Hash'ENFILE'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EOVERFLOW'Unds'K-IO'Unds'{}(), Lbl'Hash'ENETUNREACH'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EOVERFLOW'Unds'K-IO'Unds'{}(), Lbl'Hash'EOF'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EOVERFLOW'Unds'K-IO'Unds'{}(), Lbl'Hash'EXDEV'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EOVERFLOW'Unds'K-IO'Unds'{}(), Lbl'Hash'EADDRNOTAVAIL'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EOVERFLOW'Unds'K-IO'Unds'{}(), Lbl'Hash'EACCES'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EOVERFLOW'Unds'K-IO'Unds'{}(), Lbl'Hash'ENOPROTOOPT'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EOVERFLOW'Unds'K-IO'Unds'{}(), Lbl'Hash'EAGAIN'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EOVERFLOW'Unds'K-IO'Unds'{}(), Lbl'Hash'ENETDOWN'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EOVERFLOW'Unds'K-IO'Unds'{}(), Lbl'Hash'EISCONN'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EOVERFLOW'Unds'K-IO'Unds'{}(), Lbl'Hash'EPIPE'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EOVERFLOW'Unds'K-IO'Unds'{}(), Lbl'Hash'ECONNABORTED'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EOVERFLOW'Unds'K-IO'Unds'{}(), Lbl'Hash'ESRCH'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EOVERFLOW'Unds'K-IO'Unds'{}(), Lbl'Hash'EOPNOTSUPP'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EOVERFLOW'Unds'K-IO'Unds'{}(), Lbl'Hash'ENOSPC'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EOVERFLOW'Unds'K-IO'Unds'{}(), Lbl'Hash'EDEADLK'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EOVERFLOW'Unds'K-IO'Unds'{}(), Lbl'Hash'ECONNREFUSED'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EOVERFLOW'Unds'K-IO'Unds'{}(), Lbl'Hash'EPROTOTYPE'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EOVERFLOW'Unds'K-IO'Unds'{}(), Lbl'Hash'EAFNOSUPPORT'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EOVERFLOW'Unds'K-IO'Unds'{}(), Lbl'Hash'ENXIO'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EOVERFLOW'Unds'K-IO'Unds'{}(), Lbl'Hash'EWOULDBLOCK'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EOVERFLOW'Unds'K-IO'Unds'{}(), Lbl'Hash'E2BIG'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EOVERFLOW'Unds'K-IO'Unds'{}(), Lbl'Hash'ENETRESET'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EOVERFLOW'Unds'K-IO'Unds'{}(), Lbl'Hash'EPERM'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EOVERFLOW'Unds'K-IO'Unds'{}(), Lbl'Hash'ENOSYS'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EOVERFLOW'Unds'K-IO'Unds'{}(), Lbl'Hash'EALREADY'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EOVERFLOW'Unds'K-IO'Unds'{}(), Lbl'Hash'EHOSTDOWN'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EOVERFLOW'Unds'K-IO'Unds'{}(), Lbl'Hash'ENOTSOCK'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EOVERFLOW'Unds'K-IO'Unds'{}(), Lbl'Hash'EDOM'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EOVERFLOW'Unds'K-IO'Unds'{}(), Lbl'Hash'ENOBUFS'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EOVERFLOW'Unds'K-IO'Unds'{}(), Lbl'Hash'ETIMEDOUT'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EOVERFLOW'Unds'K-IO'Unds'{}(), Lbl'Hash'ETOOMANYREFS'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EOVERFLOW'Unds'K-IO'Unds'{}(), Lbl'Hash'EDESTADDRREQ'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EOVERFLOW'Unds'K-IO'Unds'{}(), Lbl'Hash'ENOTTY'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EOVERFLOW'Unds'K-IO'Unds'{}(), Lbl'Hash'ECONNRESET'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EOVERFLOW'Unds'K-IO'Unds'{}(), Lbl'Hash'EMFILE'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EOVERFLOW'Unds'K-IO'Unds'{}(), Lbl'Hash'EIO'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EOVERFLOW'Unds'K-IO'Unds'{}(), Lbl'Hash'ENOEXEC'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EOVERFLOW'Unds'K-IO'Unds'{}(), Lbl'Hash'EPFNOSUPPORT'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EOVERFLOW'Unds'K-IO'Unds'{}(), Lbl'Hash'ESHUTDOWN'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EOVERFLOW'Unds'K-IO'Unds'{}(), Lbl'Hash'EINVAL'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EOVERFLOW'Unds'K-IO'Unds'{}(), Lbl'Hash'EMLINK'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EOVERFLOW'Unds'K-IO'Unds'{}(), Lbl'Hash'EISDIR'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EOVERFLOW'Unds'K-IO'Unds'{}(), Lbl'Hash'EFBIG'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EOVERFLOW'Unds'K-IO'Unds'{}(), Lbl'Hash'ENOTCONN'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EOVERFLOW'Unds'K-IO'Unds'{}(), Lbl'Hash'ENODEV'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EOVERFLOW'Unds'K-IO'Unds'{}(), Lbl'Hash'EEXIST'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EOVERFLOW'Unds'K-IO'Unds'{}(), Lbl'Hash'ELOOP'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EOVERFLOW'Unds'K-IO'Unds'{}(), Lbl'Hash'ENOTEMPTY'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EOVERFLOW'Unds'K-IO'Unds'{}(), Lbl'Hash'EHOSTUNREACH'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EOVERFLOW'Unds'K-IO'Unds'{}(), Lbl'Hash'noparse'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EOVERFLOW'Unds'K-IO'Unds'{}(), Lbl'Hash'EINTR'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EOVERFLOW'Unds'K-IO'Unds'{}(), Lbl'Hash'EMSGSIZE'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EOVERFLOW'Unds'K-IO'Unds'{}(), Lbl'Hash'ENOENT'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EOVERFLOW'Unds'K-IO'Unds'{}(), Lbl'Hash'ENOLCK'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EOVERFLOW'Unds'K-IO'Unds'{}(), Lbl'Hash'EFAULT'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EOVERFLOW'Unds'K-IO'Unds'{}(), Lbl'Hash'ERANGE'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EOVERFLOW'Unds'K-IO'Unds'{}(), Lbl'Hash'EBUSY'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EOVERFLOW'Unds'K-IO'Unds'{}(), Lbl'Hash'EINPROGRESS'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EOVERFLOW'Unds'K-IO'Unds'{}(), Lbl'Hash'ENOMEM'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EOVERFLOW'Unds'K-IO'Unds'{}(), Lbl'Hash'ENOTDIR'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EOVERFLOW'Unds'K-IO'Unds'{}(), Lbl'Hash'ENAMETOOLONG'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EOVERFLOW'Unds'K-IO'Unds'{}(), Lbl'Hash'EADDRINUSE'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EOVERFLOW'Unds'K-IO'Unds'{}(), Lbl'Hash'EROFS'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EOVERFLOW'Unds'K-IO'Unds'{}(), Lbl'Hash'EPROTONOSUPPORT'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EOVERFLOW'Unds'K-IO'Unds'{}(), Lbl'Hash'ESOCKTNOSUPPORT'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EOVERFLOW'Unds'K-IO'Unds'{}(), Lbl'Hash'ECHILD'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{R} \exists{R} (Val:SortBool{}, \equals{SortBool{}, R} (Val:SortBool{}, Lbl'Unds-GT-Eqls'Int'UndsUnds'INT'UndsUnds'Int'Unds'Int{}(K0:SortInt{}, K1:SortInt{}))) [functional{}()] // functional
  axiom{R} \exists{R} (Val:SortBool{}, \equals{SortBool{}, R} (Val:SortBool{}, Lbl'UndsEqlsEqls'String'UndsUnds'STRING'UndsUnds'String'Unds'String{}(K0:SortString{}, K1:SortString{}))) [functional{}()] // functional
  axiom{R} \exists{R} (Val:SortInt{}, \equals{SortInt{}, R} (Val:SortInt{}, Lbl'Unds'xorInt'UndsUnds'INT'UndsUnds'Int'Unds'Int{}(K0:SortInt{}, K1:SortInt{}))) [functional{}()] // functional
  axiom{R} \exists{R} (Val:SortBExp{}, \equals{SortBExp{}, R} (Val:SortBExp{}, Lbl'BangUndsUnds'IMP-SYNTAX'UndsUnds'BExp{}(K0:SortBExp{}))) [functional{}()] // functional
  axiom{}\implies{SortBExp{}} (\and{SortBExp{}} (Lbl'BangUndsUnds'IMP-SYNTAX'UndsUnds'BExp{}(X0:SortBExp{}), Lbl'BangUndsUnds'IMP-SYNTAX'UndsUnds'BExp{}(Y0:SortBExp{})), Lbl'BangUndsUnds'IMP-SYNTAX'UndsUnds'BExp{}(\and{SortBExp{}} (X0:SortBExp{}, Y0:SortBExp{}))) [constructor{}()] // no confusion same constructor
  axiom{}\not{SortBExp{}} (\and{SortBExp{}} (Lbl'BangUndsUnds'IMP-SYNTAX'UndsUnds'BExp{}(X0:SortBExp{}), Lbl'Unds-LT-EqlsUndsUnds'IMP-SYNTAX'UndsUnds'AExp'Unds'AExp{}(Y0:SortAExp{}, Y1:SortAExp{}))) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortBExp{}} (\and{SortBExp{}} (Lbl'BangUndsUnds'IMP-SYNTAX'UndsUnds'BExp{}(X0:SortBExp{}), Lbl'UndsAndAndUndsUnds'IMP-SYNTAX'UndsUnds'BExp'Unds'BExp{}(Y0:SortBExp{}, Y1:SortBExp{}))) [constructor{}()] // no confusion different constructors
  axiom{R} \exists{R} (Val:SortIOError{}, \equals{SortIOError{}, R} (Val:SortIOError{}, Lbl'Hash'ENFILE'Unds'K-IO'Unds'{}())) [functional{}()] // functional
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENFILE'Unds'K-IO'Unds'{}(), Lbl'Hash'ENETUNREACH'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENFILE'Unds'K-IO'Unds'{}(), Lbl'Hash'EOF'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENFILE'Unds'K-IO'Unds'{}(), Lbl'Hash'EXDEV'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENFILE'Unds'K-IO'Unds'{}(), Lbl'Hash'EADDRNOTAVAIL'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENFILE'Unds'K-IO'Unds'{}(), Lbl'Hash'EACCES'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENFILE'Unds'K-IO'Unds'{}(), Lbl'Hash'ENOPROTOOPT'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENFILE'Unds'K-IO'Unds'{}(), Lbl'Hash'EAGAIN'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENFILE'Unds'K-IO'Unds'{}(), Lbl'Hash'ENETDOWN'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENFILE'Unds'K-IO'Unds'{}(), Lbl'Hash'EISCONN'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENFILE'Unds'K-IO'Unds'{}(), Lbl'Hash'EPIPE'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENFILE'Unds'K-IO'Unds'{}(), Lbl'Hash'ECONNABORTED'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENFILE'Unds'K-IO'Unds'{}(), Lbl'Hash'ESRCH'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENFILE'Unds'K-IO'Unds'{}(), Lbl'Hash'EOPNOTSUPP'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENFILE'Unds'K-IO'Unds'{}(), Lbl'Hash'ENOSPC'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENFILE'Unds'K-IO'Unds'{}(), Lbl'Hash'EDEADLK'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENFILE'Unds'K-IO'Unds'{}(), Lbl'Hash'ECONNREFUSED'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENFILE'Unds'K-IO'Unds'{}(), Lbl'Hash'EPROTOTYPE'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENFILE'Unds'K-IO'Unds'{}(), Lbl'Hash'EAFNOSUPPORT'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENFILE'Unds'K-IO'Unds'{}(), Lbl'Hash'ENXIO'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENFILE'Unds'K-IO'Unds'{}(), Lbl'Hash'EWOULDBLOCK'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENFILE'Unds'K-IO'Unds'{}(), Lbl'Hash'E2BIG'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENFILE'Unds'K-IO'Unds'{}(), Lbl'Hash'ENETRESET'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENFILE'Unds'K-IO'Unds'{}(), Lbl'Hash'EPERM'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENFILE'Unds'K-IO'Unds'{}(), Lbl'Hash'ENOSYS'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENFILE'Unds'K-IO'Unds'{}(), Lbl'Hash'EALREADY'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENFILE'Unds'K-IO'Unds'{}(), Lbl'Hash'EHOSTDOWN'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENFILE'Unds'K-IO'Unds'{}(), Lbl'Hash'ENOTSOCK'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENFILE'Unds'K-IO'Unds'{}(), Lbl'Hash'EDOM'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENFILE'Unds'K-IO'Unds'{}(), Lbl'Hash'ENOBUFS'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENFILE'Unds'K-IO'Unds'{}(), Lbl'Hash'ETIMEDOUT'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENFILE'Unds'K-IO'Unds'{}(), Lbl'Hash'ETOOMANYREFS'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENFILE'Unds'K-IO'Unds'{}(), Lbl'Hash'EDESTADDRREQ'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENFILE'Unds'K-IO'Unds'{}(), Lbl'Hash'ENOTTY'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENFILE'Unds'K-IO'Unds'{}(), Lbl'Hash'ECONNRESET'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENFILE'Unds'K-IO'Unds'{}(), Lbl'Hash'EMFILE'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENFILE'Unds'K-IO'Unds'{}(), Lbl'Hash'EIO'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENFILE'Unds'K-IO'Unds'{}(), Lbl'Hash'ENOEXEC'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENFILE'Unds'K-IO'Unds'{}(), Lbl'Hash'EPFNOSUPPORT'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENFILE'Unds'K-IO'Unds'{}(), Lbl'Hash'ESHUTDOWN'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENFILE'Unds'K-IO'Unds'{}(), Lbl'Hash'EINVAL'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENFILE'Unds'K-IO'Unds'{}(), Lbl'Hash'EMLINK'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENFILE'Unds'K-IO'Unds'{}(), Lbl'Hash'EISDIR'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENFILE'Unds'K-IO'Unds'{}(), Lbl'Hash'EFBIG'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENFILE'Unds'K-IO'Unds'{}(), Lbl'Hash'ENOTCONN'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENFILE'Unds'K-IO'Unds'{}(), Lbl'Hash'ENODEV'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENFILE'Unds'K-IO'Unds'{}(), Lbl'Hash'EEXIST'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENFILE'Unds'K-IO'Unds'{}(), Lbl'Hash'ELOOP'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENFILE'Unds'K-IO'Unds'{}(), Lbl'Hash'ENOTEMPTY'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENFILE'Unds'K-IO'Unds'{}(), Lbl'Hash'EHOSTUNREACH'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENFILE'Unds'K-IO'Unds'{}(), Lbl'Hash'noparse'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENFILE'Unds'K-IO'Unds'{}(), Lbl'Hash'EINTR'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENFILE'Unds'K-IO'Unds'{}(), Lbl'Hash'EMSGSIZE'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENFILE'Unds'K-IO'Unds'{}(), Lbl'Hash'ENOENT'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENFILE'Unds'K-IO'Unds'{}(), Lbl'Hash'ENOLCK'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENFILE'Unds'K-IO'Unds'{}(), Lbl'Hash'EFAULT'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENFILE'Unds'K-IO'Unds'{}(), Lbl'Hash'ERANGE'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENFILE'Unds'K-IO'Unds'{}(), Lbl'Hash'EBUSY'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENFILE'Unds'K-IO'Unds'{}(), Lbl'Hash'EINPROGRESS'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENFILE'Unds'K-IO'Unds'{}(), Lbl'Hash'ENOMEM'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENFILE'Unds'K-IO'Unds'{}(), Lbl'Hash'ENOTDIR'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENFILE'Unds'K-IO'Unds'{}(), Lbl'Hash'ENAMETOOLONG'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENFILE'Unds'K-IO'Unds'{}(), Lbl'Hash'EADDRINUSE'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENFILE'Unds'K-IO'Unds'{}(), Lbl'Hash'EROFS'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENFILE'Unds'K-IO'Unds'{}(), Lbl'Hash'EPROTONOSUPPORT'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENFILE'Unds'K-IO'Unds'{}(), Lbl'Hash'ESOCKTNOSUPPORT'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENFILE'Unds'K-IO'Unds'{}(), Lbl'Hash'ECHILD'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{R} \exists{R} (Val:SortInt{}, \equals{SortInt{}, R} (Val:SortInt{}, Lbl'UndsPlus'Int'UndsUnds'INT'UndsUnds'Int'Unds'Int{}(K0:SortInt{}, K1:SortInt{}))) [functional{}()] // functional
  axiom{R} \exists{R} (Val:SortIOError{}, \equals{SortIOError{}, R} (Val:SortIOError{}, Lbl'Hash'ENETUNREACH'Unds'K-IO'Unds'{}())) [functional{}()] // functional
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENETUNREACH'Unds'K-IO'Unds'{}(), Lbl'Hash'EOF'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENETUNREACH'Unds'K-IO'Unds'{}(), Lbl'Hash'EXDEV'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENETUNREACH'Unds'K-IO'Unds'{}(), Lbl'Hash'EADDRNOTAVAIL'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENETUNREACH'Unds'K-IO'Unds'{}(), Lbl'Hash'EACCES'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENETUNREACH'Unds'K-IO'Unds'{}(), Lbl'Hash'ENOPROTOOPT'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENETUNREACH'Unds'K-IO'Unds'{}(), Lbl'Hash'EAGAIN'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENETUNREACH'Unds'K-IO'Unds'{}(), Lbl'Hash'ENETDOWN'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENETUNREACH'Unds'K-IO'Unds'{}(), Lbl'Hash'EISCONN'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENETUNREACH'Unds'K-IO'Unds'{}(), Lbl'Hash'EPIPE'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENETUNREACH'Unds'K-IO'Unds'{}(), Lbl'Hash'ECONNABORTED'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENETUNREACH'Unds'K-IO'Unds'{}(), Lbl'Hash'ESRCH'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENETUNREACH'Unds'K-IO'Unds'{}(), Lbl'Hash'EOPNOTSUPP'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENETUNREACH'Unds'K-IO'Unds'{}(), Lbl'Hash'ENOSPC'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENETUNREACH'Unds'K-IO'Unds'{}(), Lbl'Hash'EDEADLK'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENETUNREACH'Unds'K-IO'Unds'{}(), Lbl'Hash'ECONNREFUSED'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENETUNREACH'Unds'K-IO'Unds'{}(), Lbl'Hash'EPROTOTYPE'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENETUNREACH'Unds'K-IO'Unds'{}(), Lbl'Hash'EAFNOSUPPORT'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENETUNREACH'Unds'K-IO'Unds'{}(), Lbl'Hash'ENXIO'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENETUNREACH'Unds'K-IO'Unds'{}(), Lbl'Hash'EWOULDBLOCK'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENETUNREACH'Unds'K-IO'Unds'{}(), Lbl'Hash'E2BIG'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENETUNREACH'Unds'K-IO'Unds'{}(), Lbl'Hash'ENETRESET'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENETUNREACH'Unds'K-IO'Unds'{}(), Lbl'Hash'EPERM'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENETUNREACH'Unds'K-IO'Unds'{}(), Lbl'Hash'ENOSYS'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENETUNREACH'Unds'K-IO'Unds'{}(), Lbl'Hash'EALREADY'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENETUNREACH'Unds'K-IO'Unds'{}(), Lbl'Hash'EHOSTDOWN'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENETUNREACH'Unds'K-IO'Unds'{}(), Lbl'Hash'ENOTSOCK'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENETUNREACH'Unds'K-IO'Unds'{}(), Lbl'Hash'EDOM'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENETUNREACH'Unds'K-IO'Unds'{}(), Lbl'Hash'ENOBUFS'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENETUNREACH'Unds'K-IO'Unds'{}(), Lbl'Hash'ETIMEDOUT'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENETUNREACH'Unds'K-IO'Unds'{}(), Lbl'Hash'ETOOMANYREFS'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENETUNREACH'Unds'K-IO'Unds'{}(), Lbl'Hash'EDESTADDRREQ'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENETUNREACH'Unds'K-IO'Unds'{}(), Lbl'Hash'ENOTTY'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENETUNREACH'Unds'K-IO'Unds'{}(), Lbl'Hash'ECONNRESET'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENETUNREACH'Unds'K-IO'Unds'{}(), Lbl'Hash'EMFILE'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENETUNREACH'Unds'K-IO'Unds'{}(), Lbl'Hash'EIO'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENETUNREACH'Unds'K-IO'Unds'{}(), Lbl'Hash'ENOEXEC'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENETUNREACH'Unds'K-IO'Unds'{}(), Lbl'Hash'EPFNOSUPPORT'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENETUNREACH'Unds'K-IO'Unds'{}(), Lbl'Hash'ESHUTDOWN'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENETUNREACH'Unds'K-IO'Unds'{}(), Lbl'Hash'EINVAL'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENETUNREACH'Unds'K-IO'Unds'{}(), Lbl'Hash'EMLINK'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENETUNREACH'Unds'K-IO'Unds'{}(), Lbl'Hash'EISDIR'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENETUNREACH'Unds'K-IO'Unds'{}(), Lbl'Hash'EFBIG'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENETUNREACH'Unds'K-IO'Unds'{}(), Lbl'Hash'ENOTCONN'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENETUNREACH'Unds'K-IO'Unds'{}(), Lbl'Hash'ENODEV'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENETUNREACH'Unds'K-IO'Unds'{}(), Lbl'Hash'EEXIST'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENETUNREACH'Unds'K-IO'Unds'{}(), Lbl'Hash'ELOOP'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENETUNREACH'Unds'K-IO'Unds'{}(), Lbl'Hash'ENOTEMPTY'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENETUNREACH'Unds'K-IO'Unds'{}(), Lbl'Hash'EHOSTUNREACH'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENETUNREACH'Unds'K-IO'Unds'{}(), Lbl'Hash'noparse'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENETUNREACH'Unds'K-IO'Unds'{}(), Lbl'Hash'EINTR'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENETUNREACH'Unds'K-IO'Unds'{}(), Lbl'Hash'EMSGSIZE'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENETUNREACH'Unds'K-IO'Unds'{}(), Lbl'Hash'ENOENT'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENETUNREACH'Unds'K-IO'Unds'{}(), Lbl'Hash'ENOLCK'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENETUNREACH'Unds'K-IO'Unds'{}(), Lbl'Hash'EFAULT'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENETUNREACH'Unds'K-IO'Unds'{}(), Lbl'Hash'ERANGE'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENETUNREACH'Unds'K-IO'Unds'{}(), Lbl'Hash'EBUSY'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENETUNREACH'Unds'K-IO'Unds'{}(), Lbl'Hash'EINPROGRESS'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENETUNREACH'Unds'K-IO'Unds'{}(), Lbl'Hash'ENOMEM'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENETUNREACH'Unds'K-IO'Unds'{}(), Lbl'Hash'ENOTDIR'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENETUNREACH'Unds'K-IO'Unds'{}(), Lbl'Hash'ENAMETOOLONG'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENETUNREACH'Unds'K-IO'Unds'{}(), Lbl'Hash'EADDRINUSE'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENETUNREACH'Unds'K-IO'Unds'{}(), Lbl'Hash'EROFS'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENETUNREACH'Unds'K-IO'Unds'{}(), Lbl'Hash'EPROTONOSUPPORT'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENETUNREACH'Unds'K-IO'Unds'{}(), Lbl'Hash'ESOCKTNOSUPPORT'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENETUNREACH'Unds'K-IO'Unds'{}(), Lbl'Hash'ECHILD'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{R} \exists{R} (Val:SortInt{}, \equals{SortInt{}, R} (Val:SortInt{}, Lblsize'LParUndsRParUnds'MAP'UndsUnds'Map{}(K0:SortMap{}))) [functional{}()] // functional
  axiom{R} \exists{R} (Val:SortBool{}, \equals{SortBool{}, R} (Val:SortBool{}, Lbl'UndsEqlsSlshEqls'Int'UndsUnds'INT'UndsUnds'Int'Unds'Int{}(K0:SortInt{}, K1:SortInt{}))) [functional{}()] // functional
  axiom{R} \exists{R} (Val:SortIOError{}, \equals{SortIOError{}, R} (Val:SortIOError{}, Lbl'Hash'EOF'Unds'K-IO'Unds'{}())) [functional{}()] // functional
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EOF'Unds'K-IO'Unds'{}(), Lbl'Hash'EXDEV'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EOF'Unds'K-IO'Unds'{}(), Lbl'Hash'EADDRNOTAVAIL'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EOF'Unds'K-IO'Unds'{}(), Lbl'Hash'EACCES'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EOF'Unds'K-IO'Unds'{}(), Lbl'Hash'ENOPROTOOPT'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EOF'Unds'K-IO'Unds'{}(), Lbl'Hash'EAGAIN'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EOF'Unds'K-IO'Unds'{}(), Lbl'Hash'ENETDOWN'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EOF'Unds'K-IO'Unds'{}(), Lbl'Hash'EISCONN'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EOF'Unds'K-IO'Unds'{}(), Lbl'Hash'EPIPE'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EOF'Unds'K-IO'Unds'{}(), Lbl'Hash'ECONNABORTED'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EOF'Unds'K-IO'Unds'{}(), Lbl'Hash'ESRCH'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EOF'Unds'K-IO'Unds'{}(), Lbl'Hash'EOPNOTSUPP'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EOF'Unds'K-IO'Unds'{}(), Lbl'Hash'ENOSPC'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EOF'Unds'K-IO'Unds'{}(), Lbl'Hash'EDEADLK'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EOF'Unds'K-IO'Unds'{}(), Lbl'Hash'ECONNREFUSED'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EOF'Unds'K-IO'Unds'{}(), Lbl'Hash'EPROTOTYPE'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EOF'Unds'K-IO'Unds'{}(), Lbl'Hash'EAFNOSUPPORT'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EOF'Unds'K-IO'Unds'{}(), Lbl'Hash'ENXIO'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EOF'Unds'K-IO'Unds'{}(), Lbl'Hash'EWOULDBLOCK'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EOF'Unds'K-IO'Unds'{}(), Lbl'Hash'E2BIG'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EOF'Unds'K-IO'Unds'{}(), Lbl'Hash'ENETRESET'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EOF'Unds'K-IO'Unds'{}(), Lbl'Hash'EPERM'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EOF'Unds'K-IO'Unds'{}(), Lbl'Hash'ENOSYS'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EOF'Unds'K-IO'Unds'{}(), Lbl'Hash'EALREADY'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EOF'Unds'K-IO'Unds'{}(), Lbl'Hash'EHOSTDOWN'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EOF'Unds'K-IO'Unds'{}(), Lbl'Hash'ENOTSOCK'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EOF'Unds'K-IO'Unds'{}(), Lbl'Hash'EDOM'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EOF'Unds'K-IO'Unds'{}(), Lbl'Hash'ENOBUFS'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EOF'Unds'K-IO'Unds'{}(), Lbl'Hash'ETIMEDOUT'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EOF'Unds'K-IO'Unds'{}(), Lbl'Hash'ETOOMANYREFS'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EOF'Unds'K-IO'Unds'{}(), Lbl'Hash'EDESTADDRREQ'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EOF'Unds'K-IO'Unds'{}(), Lbl'Hash'ENOTTY'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EOF'Unds'K-IO'Unds'{}(), Lbl'Hash'ECONNRESET'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EOF'Unds'K-IO'Unds'{}(), Lbl'Hash'EMFILE'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EOF'Unds'K-IO'Unds'{}(), Lbl'Hash'EIO'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EOF'Unds'K-IO'Unds'{}(), Lbl'Hash'ENOEXEC'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EOF'Unds'K-IO'Unds'{}(), Lbl'Hash'EPFNOSUPPORT'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EOF'Unds'K-IO'Unds'{}(), Lbl'Hash'ESHUTDOWN'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EOF'Unds'K-IO'Unds'{}(), Lbl'Hash'EINVAL'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EOF'Unds'K-IO'Unds'{}(), Lbl'Hash'EMLINK'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EOF'Unds'K-IO'Unds'{}(), Lbl'Hash'EISDIR'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EOF'Unds'K-IO'Unds'{}(), Lbl'Hash'EFBIG'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EOF'Unds'K-IO'Unds'{}(), Lbl'Hash'ENOTCONN'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EOF'Unds'K-IO'Unds'{}(), Lbl'Hash'ENODEV'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EOF'Unds'K-IO'Unds'{}(), Lbl'Hash'EEXIST'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EOF'Unds'K-IO'Unds'{}(), Lbl'Hash'ELOOP'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EOF'Unds'K-IO'Unds'{}(), Lbl'Hash'ENOTEMPTY'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EOF'Unds'K-IO'Unds'{}(), Lbl'Hash'EHOSTUNREACH'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EOF'Unds'K-IO'Unds'{}(), Lbl'Hash'noparse'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EOF'Unds'K-IO'Unds'{}(), Lbl'Hash'EINTR'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EOF'Unds'K-IO'Unds'{}(), Lbl'Hash'EMSGSIZE'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EOF'Unds'K-IO'Unds'{}(), Lbl'Hash'ENOENT'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EOF'Unds'K-IO'Unds'{}(), Lbl'Hash'ENOLCK'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EOF'Unds'K-IO'Unds'{}(), Lbl'Hash'EFAULT'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EOF'Unds'K-IO'Unds'{}(), Lbl'Hash'ERANGE'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EOF'Unds'K-IO'Unds'{}(), Lbl'Hash'EBUSY'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EOF'Unds'K-IO'Unds'{}(), Lbl'Hash'EINPROGRESS'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EOF'Unds'K-IO'Unds'{}(), Lbl'Hash'ENOMEM'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EOF'Unds'K-IO'Unds'{}(), Lbl'Hash'ENOTDIR'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EOF'Unds'K-IO'Unds'{}(), Lbl'Hash'ENAMETOOLONG'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EOF'Unds'K-IO'Unds'{}(), Lbl'Hash'EADDRINUSE'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EOF'Unds'K-IO'Unds'{}(), Lbl'Hash'EROFS'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EOF'Unds'K-IO'Unds'{}(), Lbl'Hash'EPROTONOSUPPORT'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EOF'Unds'K-IO'Unds'{}(), Lbl'Hash'ESOCKTNOSUPPORT'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EOF'Unds'K-IO'Unds'{}(), Lbl'Hash'ECHILD'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{R} \exists{R} (Val:SortIOError{}, \equals{SortIOError{}, R} (Val:SortIOError{}, Lbl'Hash'EXDEV'Unds'K-IO'Unds'{}())) [functional{}()] // functional
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EXDEV'Unds'K-IO'Unds'{}(), Lbl'Hash'EADDRNOTAVAIL'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EXDEV'Unds'K-IO'Unds'{}(), Lbl'Hash'EACCES'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EXDEV'Unds'K-IO'Unds'{}(), Lbl'Hash'ENOPROTOOPT'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EXDEV'Unds'K-IO'Unds'{}(), Lbl'Hash'EAGAIN'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EXDEV'Unds'K-IO'Unds'{}(), Lbl'Hash'ENETDOWN'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EXDEV'Unds'K-IO'Unds'{}(), Lbl'Hash'EISCONN'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EXDEV'Unds'K-IO'Unds'{}(), Lbl'Hash'EPIPE'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EXDEV'Unds'K-IO'Unds'{}(), Lbl'Hash'ECONNABORTED'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EXDEV'Unds'K-IO'Unds'{}(), Lbl'Hash'ESRCH'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EXDEV'Unds'K-IO'Unds'{}(), Lbl'Hash'EOPNOTSUPP'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EXDEV'Unds'K-IO'Unds'{}(), Lbl'Hash'ENOSPC'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EXDEV'Unds'K-IO'Unds'{}(), Lbl'Hash'EDEADLK'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EXDEV'Unds'K-IO'Unds'{}(), Lbl'Hash'ECONNREFUSED'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EXDEV'Unds'K-IO'Unds'{}(), Lbl'Hash'EPROTOTYPE'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EXDEV'Unds'K-IO'Unds'{}(), Lbl'Hash'EAFNOSUPPORT'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EXDEV'Unds'K-IO'Unds'{}(), Lbl'Hash'ENXIO'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EXDEV'Unds'K-IO'Unds'{}(), Lbl'Hash'EWOULDBLOCK'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EXDEV'Unds'K-IO'Unds'{}(), Lbl'Hash'E2BIG'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EXDEV'Unds'K-IO'Unds'{}(), Lbl'Hash'ENETRESET'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EXDEV'Unds'K-IO'Unds'{}(), Lbl'Hash'EPERM'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EXDEV'Unds'K-IO'Unds'{}(), Lbl'Hash'ENOSYS'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EXDEV'Unds'K-IO'Unds'{}(), Lbl'Hash'EALREADY'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EXDEV'Unds'K-IO'Unds'{}(), Lbl'Hash'EHOSTDOWN'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EXDEV'Unds'K-IO'Unds'{}(), Lbl'Hash'ENOTSOCK'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EXDEV'Unds'K-IO'Unds'{}(), Lbl'Hash'EDOM'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EXDEV'Unds'K-IO'Unds'{}(), Lbl'Hash'ENOBUFS'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EXDEV'Unds'K-IO'Unds'{}(), Lbl'Hash'ETIMEDOUT'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EXDEV'Unds'K-IO'Unds'{}(), Lbl'Hash'ETOOMANYREFS'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EXDEV'Unds'K-IO'Unds'{}(), Lbl'Hash'EDESTADDRREQ'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EXDEV'Unds'K-IO'Unds'{}(), Lbl'Hash'ENOTTY'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EXDEV'Unds'K-IO'Unds'{}(), Lbl'Hash'ECONNRESET'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EXDEV'Unds'K-IO'Unds'{}(), Lbl'Hash'EMFILE'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EXDEV'Unds'K-IO'Unds'{}(), Lbl'Hash'EIO'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EXDEV'Unds'K-IO'Unds'{}(), Lbl'Hash'ENOEXEC'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EXDEV'Unds'K-IO'Unds'{}(), Lbl'Hash'EPFNOSUPPORT'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EXDEV'Unds'K-IO'Unds'{}(), Lbl'Hash'ESHUTDOWN'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EXDEV'Unds'K-IO'Unds'{}(), Lbl'Hash'EINVAL'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EXDEV'Unds'K-IO'Unds'{}(), Lbl'Hash'EMLINK'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EXDEV'Unds'K-IO'Unds'{}(), Lbl'Hash'EISDIR'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EXDEV'Unds'K-IO'Unds'{}(), Lbl'Hash'EFBIG'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EXDEV'Unds'K-IO'Unds'{}(), Lbl'Hash'ENOTCONN'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EXDEV'Unds'K-IO'Unds'{}(), Lbl'Hash'ENODEV'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EXDEV'Unds'K-IO'Unds'{}(), Lbl'Hash'EEXIST'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EXDEV'Unds'K-IO'Unds'{}(), Lbl'Hash'ELOOP'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EXDEV'Unds'K-IO'Unds'{}(), Lbl'Hash'ENOTEMPTY'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EXDEV'Unds'K-IO'Unds'{}(), Lbl'Hash'EHOSTUNREACH'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EXDEV'Unds'K-IO'Unds'{}(), Lbl'Hash'noparse'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EXDEV'Unds'K-IO'Unds'{}(), Lbl'Hash'EINTR'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EXDEV'Unds'K-IO'Unds'{}(), Lbl'Hash'EMSGSIZE'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EXDEV'Unds'K-IO'Unds'{}(), Lbl'Hash'ENOENT'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EXDEV'Unds'K-IO'Unds'{}(), Lbl'Hash'ENOLCK'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EXDEV'Unds'K-IO'Unds'{}(), Lbl'Hash'EFAULT'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EXDEV'Unds'K-IO'Unds'{}(), Lbl'Hash'ERANGE'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EXDEV'Unds'K-IO'Unds'{}(), Lbl'Hash'EBUSY'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EXDEV'Unds'K-IO'Unds'{}(), Lbl'Hash'EINPROGRESS'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EXDEV'Unds'K-IO'Unds'{}(), Lbl'Hash'ENOMEM'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EXDEV'Unds'K-IO'Unds'{}(), Lbl'Hash'ENOTDIR'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EXDEV'Unds'K-IO'Unds'{}(), Lbl'Hash'ENAMETOOLONG'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EXDEV'Unds'K-IO'Unds'{}(), Lbl'Hash'EADDRINUSE'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EXDEV'Unds'K-IO'Unds'{}(), Lbl'Hash'EROFS'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EXDEV'Unds'K-IO'Unds'{}(), Lbl'Hash'EPROTONOSUPPORT'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EXDEV'Unds'K-IO'Unds'{}(), Lbl'Hash'ESOCKTNOSUPPORT'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EXDEV'Unds'K-IO'Unds'{}(), Lbl'Hash'ECHILD'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{R} \exists{R} (Val:SortInt{}, \equals{SortInt{}, R} (Val:SortInt{}, LblcountAllOccurrences'LParUndsCommUndsRParUnds'STRING'UndsUnds'String'Unds'String{}(K0:SortString{}, K1:SortString{}))) [functional{}()] // functional
  axiom{R} \exists{R} (Val:SortIOError{}, \equals{SortIOError{}, R} (Val:SortIOError{}, Lbl'Hash'EADDRNOTAVAIL'Unds'K-IO'Unds'{}())) [functional{}()] // functional
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EADDRNOTAVAIL'Unds'K-IO'Unds'{}(), Lbl'Hash'EACCES'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EADDRNOTAVAIL'Unds'K-IO'Unds'{}(), Lbl'Hash'ENOPROTOOPT'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EADDRNOTAVAIL'Unds'K-IO'Unds'{}(), Lbl'Hash'EAGAIN'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EADDRNOTAVAIL'Unds'K-IO'Unds'{}(), Lbl'Hash'ENETDOWN'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EADDRNOTAVAIL'Unds'K-IO'Unds'{}(), Lbl'Hash'EISCONN'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EADDRNOTAVAIL'Unds'K-IO'Unds'{}(), Lbl'Hash'EPIPE'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EADDRNOTAVAIL'Unds'K-IO'Unds'{}(), Lbl'Hash'ECONNABORTED'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EADDRNOTAVAIL'Unds'K-IO'Unds'{}(), Lbl'Hash'ESRCH'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EADDRNOTAVAIL'Unds'K-IO'Unds'{}(), Lbl'Hash'EOPNOTSUPP'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EADDRNOTAVAIL'Unds'K-IO'Unds'{}(), Lbl'Hash'ENOSPC'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EADDRNOTAVAIL'Unds'K-IO'Unds'{}(), Lbl'Hash'EDEADLK'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EADDRNOTAVAIL'Unds'K-IO'Unds'{}(), Lbl'Hash'ECONNREFUSED'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EADDRNOTAVAIL'Unds'K-IO'Unds'{}(), Lbl'Hash'EPROTOTYPE'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EADDRNOTAVAIL'Unds'K-IO'Unds'{}(), Lbl'Hash'EAFNOSUPPORT'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EADDRNOTAVAIL'Unds'K-IO'Unds'{}(), Lbl'Hash'ENXIO'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EADDRNOTAVAIL'Unds'K-IO'Unds'{}(), Lbl'Hash'EWOULDBLOCK'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EADDRNOTAVAIL'Unds'K-IO'Unds'{}(), Lbl'Hash'E2BIG'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EADDRNOTAVAIL'Unds'K-IO'Unds'{}(), Lbl'Hash'ENETRESET'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EADDRNOTAVAIL'Unds'K-IO'Unds'{}(), Lbl'Hash'EPERM'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EADDRNOTAVAIL'Unds'K-IO'Unds'{}(), Lbl'Hash'ENOSYS'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EADDRNOTAVAIL'Unds'K-IO'Unds'{}(), Lbl'Hash'EALREADY'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EADDRNOTAVAIL'Unds'K-IO'Unds'{}(), Lbl'Hash'EHOSTDOWN'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EADDRNOTAVAIL'Unds'K-IO'Unds'{}(), Lbl'Hash'ENOTSOCK'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EADDRNOTAVAIL'Unds'K-IO'Unds'{}(), Lbl'Hash'EDOM'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EADDRNOTAVAIL'Unds'K-IO'Unds'{}(), Lbl'Hash'ENOBUFS'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EADDRNOTAVAIL'Unds'K-IO'Unds'{}(), Lbl'Hash'ETIMEDOUT'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EADDRNOTAVAIL'Unds'K-IO'Unds'{}(), Lbl'Hash'ETOOMANYREFS'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EADDRNOTAVAIL'Unds'K-IO'Unds'{}(), Lbl'Hash'EDESTADDRREQ'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EADDRNOTAVAIL'Unds'K-IO'Unds'{}(), Lbl'Hash'ENOTTY'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EADDRNOTAVAIL'Unds'K-IO'Unds'{}(), Lbl'Hash'ECONNRESET'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EADDRNOTAVAIL'Unds'K-IO'Unds'{}(), Lbl'Hash'EMFILE'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EADDRNOTAVAIL'Unds'K-IO'Unds'{}(), Lbl'Hash'EIO'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EADDRNOTAVAIL'Unds'K-IO'Unds'{}(), Lbl'Hash'ENOEXEC'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EADDRNOTAVAIL'Unds'K-IO'Unds'{}(), Lbl'Hash'EPFNOSUPPORT'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EADDRNOTAVAIL'Unds'K-IO'Unds'{}(), Lbl'Hash'ESHUTDOWN'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EADDRNOTAVAIL'Unds'K-IO'Unds'{}(), Lbl'Hash'EINVAL'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EADDRNOTAVAIL'Unds'K-IO'Unds'{}(), Lbl'Hash'EMLINK'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EADDRNOTAVAIL'Unds'K-IO'Unds'{}(), Lbl'Hash'EISDIR'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EADDRNOTAVAIL'Unds'K-IO'Unds'{}(), Lbl'Hash'EFBIG'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EADDRNOTAVAIL'Unds'K-IO'Unds'{}(), Lbl'Hash'ENOTCONN'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EADDRNOTAVAIL'Unds'K-IO'Unds'{}(), Lbl'Hash'ENODEV'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EADDRNOTAVAIL'Unds'K-IO'Unds'{}(), Lbl'Hash'EEXIST'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EADDRNOTAVAIL'Unds'K-IO'Unds'{}(), Lbl'Hash'ELOOP'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EADDRNOTAVAIL'Unds'K-IO'Unds'{}(), Lbl'Hash'ENOTEMPTY'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EADDRNOTAVAIL'Unds'K-IO'Unds'{}(), Lbl'Hash'EHOSTUNREACH'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EADDRNOTAVAIL'Unds'K-IO'Unds'{}(), Lbl'Hash'noparse'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EADDRNOTAVAIL'Unds'K-IO'Unds'{}(), Lbl'Hash'EINTR'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EADDRNOTAVAIL'Unds'K-IO'Unds'{}(), Lbl'Hash'EMSGSIZE'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EADDRNOTAVAIL'Unds'K-IO'Unds'{}(), Lbl'Hash'ENOENT'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EADDRNOTAVAIL'Unds'K-IO'Unds'{}(), Lbl'Hash'ENOLCK'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EADDRNOTAVAIL'Unds'K-IO'Unds'{}(), Lbl'Hash'EFAULT'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EADDRNOTAVAIL'Unds'K-IO'Unds'{}(), Lbl'Hash'ERANGE'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EADDRNOTAVAIL'Unds'K-IO'Unds'{}(), Lbl'Hash'EBUSY'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EADDRNOTAVAIL'Unds'K-IO'Unds'{}(), Lbl'Hash'EINPROGRESS'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EADDRNOTAVAIL'Unds'K-IO'Unds'{}(), Lbl'Hash'ENOMEM'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EADDRNOTAVAIL'Unds'K-IO'Unds'{}(), Lbl'Hash'ENOTDIR'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EADDRNOTAVAIL'Unds'K-IO'Unds'{}(), Lbl'Hash'ENAMETOOLONG'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EADDRNOTAVAIL'Unds'K-IO'Unds'{}(), Lbl'Hash'EADDRINUSE'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EADDRNOTAVAIL'Unds'K-IO'Unds'{}(), Lbl'Hash'EROFS'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EADDRNOTAVAIL'Unds'K-IO'Unds'{}(), Lbl'Hash'EPROTONOSUPPORT'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EADDRNOTAVAIL'Unds'K-IO'Unds'{}(), Lbl'Hash'ESOCKTNOSUPPORT'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EADDRNOTAVAIL'Unds'K-IO'Unds'{}(), Lbl'Hash'ECHILD'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{R} \exists{R} (Val:SortString{}, \equals{SortString{}, R} (Val:SortString{}, LblreplaceFirst'LParUndsCommUndsCommUndsRParUnds'STRING'UndsUnds'String'Unds'String'Unds'String{}(K0:SortString{}, K1:SortString{}, K2:SortString{}))) [functional{}()] // functional
  axiom{R} \exists{R} (Val:SortBool{}, \equals{SortBool{}, R} (Val:SortBool{}, Lbl'Unds-LT-Eqls'Int'UndsUnds'INT'UndsUnds'Int'Unds'Int{}(K0:SortInt{}, K1:SortInt{}))) [functional{}()] // functional
  axiom{R} \exists{R} (Val:SortPgm{}, \equals{SortPgm{}, R} (Val:SortPgm{}, Lblint'UndsSClnUndsUnds'IMP-SYNTAX'UndsUnds'Ids'Unds'Stmt{}(K0:SortIds{}, K1:SortStmt{}))) [functional{}()] // functional
  axiom{}\implies{SortPgm{}} (\and{SortPgm{}} (Lblint'UndsSClnUndsUnds'IMP-SYNTAX'UndsUnds'Ids'Unds'Stmt{}(X0:SortIds{}, X1:SortStmt{}), Lblint'UndsSClnUndsUnds'IMP-SYNTAX'UndsUnds'Ids'Unds'Stmt{}(Y0:SortIds{}, Y1:SortStmt{})), Lblint'UndsSClnUndsUnds'IMP-SYNTAX'UndsUnds'Ids'Unds'Stmt{}(\and{SortIds{}} (X0:SortIds{}, Y0:SortIds{}), \and{SortStmt{}} (X1:SortStmt{}, Y1:SortStmt{}))) [constructor{}()] // no confusion same constructor
  axiom{R} \exists{R} (Val:SortBool{}, \equals{SortBool{}, R} (Val:SortBool{}, Lbl'UndsEqlsEqls'K'Unds'{}(K0:SortK{}, K1:SortK{}))) [functional{}()] // functional
  axiom{R} \exists{R} (Val:SortIOError{}, \equals{SortIOError{}, R} (Val:SortIOError{}, Lbl'Hash'EACCES'Unds'K-IO'Unds'{}())) [functional{}()] // functional
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EACCES'Unds'K-IO'Unds'{}(), Lbl'Hash'ENOPROTOOPT'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EACCES'Unds'K-IO'Unds'{}(), Lbl'Hash'EAGAIN'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EACCES'Unds'K-IO'Unds'{}(), Lbl'Hash'ENETDOWN'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EACCES'Unds'K-IO'Unds'{}(), Lbl'Hash'EISCONN'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EACCES'Unds'K-IO'Unds'{}(), Lbl'Hash'EPIPE'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EACCES'Unds'K-IO'Unds'{}(), Lbl'Hash'ECONNABORTED'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EACCES'Unds'K-IO'Unds'{}(), Lbl'Hash'ESRCH'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EACCES'Unds'K-IO'Unds'{}(), Lbl'Hash'EOPNOTSUPP'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EACCES'Unds'K-IO'Unds'{}(), Lbl'Hash'ENOSPC'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EACCES'Unds'K-IO'Unds'{}(), Lbl'Hash'EDEADLK'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EACCES'Unds'K-IO'Unds'{}(), Lbl'Hash'ECONNREFUSED'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EACCES'Unds'K-IO'Unds'{}(), Lbl'Hash'EPROTOTYPE'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EACCES'Unds'K-IO'Unds'{}(), Lbl'Hash'EAFNOSUPPORT'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EACCES'Unds'K-IO'Unds'{}(), Lbl'Hash'ENXIO'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EACCES'Unds'K-IO'Unds'{}(), Lbl'Hash'EWOULDBLOCK'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EACCES'Unds'K-IO'Unds'{}(), Lbl'Hash'E2BIG'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EACCES'Unds'K-IO'Unds'{}(), Lbl'Hash'ENETRESET'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EACCES'Unds'K-IO'Unds'{}(), Lbl'Hash'EPERM'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EACCES'Unds'K-IO'Unds'{}(), Lbl'Hash'ENOSYS'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EACCES'Unds'K-IO'Unds'{}(), Lbl'Hash'EALREADY'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EACCES'Unds'K-IO'Unds'{}(), Lbl'Hash'EHOSTDOWN'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EACCES'Unds'K-IO'Unds'{}(), Lbl'Hash'ENOTSOCK'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EACCES'Unds'K-IO'Unds'{}(), Lbl'Hash'EDOM'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EACCES'Unds'K-IO'Unds'{}(), Lbl'Hash'ENOBUFS'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EACCES'Unds'K-IO'Unds'{}(), Lbl'Hash'ETIMEDOUT'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EACCES'Unds'K-IO'Unds'{}(), Lbl'Hash'ETOOMANYREFS'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EACCES'Unds'K-IO'Unds'{}(), Lbl'Hash'EDESTADDRREQ'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EACCES'Unds'K-IO'Unds'{}(), Lbl'Hash'ENOTTY'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EACCES'Unds'K-IO'Unds'{}(), Lbl'Hash'ECONNRESET'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EACCES'Unds'K-IO'Unds'{}(), Lbl'Hash'EMFILE'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EACCES'Unds'K-IO'Unds'{}(), Lbl'Hash'EIO'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EACCES'Unds'K-IO'Unds'{}(), Lbl'Hash'ENOEXEC'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EACCES'Unds'K-IO'Unds'{}(), Lbl'Hash'EPFNOSUPPORT'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EACCES'Unds'K-IO'Unds'{}(), Lbl'Hash'ESHUTDOWN'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EACCES'Unds'K-IO'Unds'{}(), Lbl'Hash'EINVAL'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EACCES'Unds'K-IO'Unds'{}(), Lbl'Hash'EMLINK'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EACCES'Unds'K-IO'Unds'{}(), Lbl'Hash'EISDIR'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EACCES'Unds'K-IO'Unds'{}(), Lbl'Hash'EFBIG'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EACCES'Unds'K-IO'Unds'{}(), Lbl'Hash'ENOTCONN'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EACCES'Unds'K-IO'Unds'{}(), Lbl'Hash'ENODEV'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EACCES'Unds'K-IO'Unds'{}(), Lbl'Hash'EEXIST'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EACCES'Unds'K-IO'Unds'{}(), Lbl'Hash'ELOOP'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EACCES'Unds'K-IO'Unds'{}(), Lbl'Hash'ENOTEMPTY'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EACCES'Unds'K-IO'Unds'{}(), Lbl'Hash'EHOSTUNREACH'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EACCES'Unds'K-IO'Unds'{}(), Lbl'Hash'noparse'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EACCES'Unds'K-IO'Unds'{}(), Lbl'Hash'EINTR'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EACCES'Unds'K-IO'Unds'{}(), Lbl'Hash'EMSGSIZE'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EACCES'Unds'K-IO'Unds'{}(), Lbl'Hash'ENOENT'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EACCES'Unds'K-IO'Unds'{}(), Lbl'Hash'ENOLCK'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EACCES'Unds'K-IO'Unds'{}(), Lbl'Hash'EFAULT'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EACCES'Unds'K-IO'Unds'{}(), Lbl'Hash'ERANGE'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EACCES'Unds'K-IO'Unds'{}(), Lbl'Hash'EBUSY'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EACCES'Unds'K-IO'Unds'{}(), Lbl'Hash'EINPROGRESS'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EACCES'Unds'K-IO'Unds'{}(), Lbl'Hash'ENOMEM'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EACCES'Unds'K-IO'Unds'{}(), Lbl'Hash'ENOTDIR'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EACCES'Unds'K-IO'Unds'{}(), Lbl'Hash'ENAMETOOLONG'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EACCES'Unds'K-IO'Unds'{}(), Lbl'Hash'EADDRINUSE'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EACCES'Unds'K-IO'Unds'{}(), Lbl'Hash'EROFS'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EACCES'Unds'K-IO'Unds'{}(), Lbl'Hash'EPROTONOSUPPORT'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EACCES'Unds'K-IO'Unds'{}(), Lbl'Hash'ESOCKTNOSUPPORT'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EACCES'Unds'K-IO'Unds'{}(), Lbl'Hash'ECHILD'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{R} \exists{R} (Val:SortList{}, \equals{SortList{}, R} (Val:SortList{}, LblListItem{}(K0:SortK{}))) [functional{}()] // functional
  axiom{R} \exists{R} (Val:SortIOError{}, \equals{SortIOError{}, R} (Val:SortIOError{}, Lbl'Hash'ENOPROTOOPT'Unds'K-IO'Unds'{}())) [functional{}()] // functional
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOPROTOOPT'Unds'K-IO'Unds'{}(), Lbl'Hash'EAGAIN'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOPROTOOPT'Unds'K-IO'Unds'{}(), Lbl'Hash'ENETDOWN'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOPROTOOPT'Unds'K-IO'Unds'{}(), Lbl'Hash'EISCONN'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOPROTOOPT'Unds'K-IO'Unds'{}(), Lbl'Hash'EPIPE'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOPROTOOPT'Unds'K-IO'Unds'{}(), Lbl'Hash'ECONNABORTED'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOPROTOOPT'Unds'K-IO'Unds'{}(), Lbl'Hash'ESRCH'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOPROTOOPT'Unds'K-IO'Unds'{}(), Lbl'Hash'EOPNOTSUPP'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOPROTOOPT'Unds'K-IO'Unds'{}(), Lbl'Hash'ENOSPC'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOPROTOOPT'Unds'K-IO'Unds'{}(), Lbl'Hash'EDEADLK'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOPROTOOPT'Unds'K-IO'Unds'{}(), Lbl'Hash'ECONNREFUSED'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOPROTOOPT'Unds'K-IO'Unds'{}(), Lbl'Hash'EPROTOTYPE'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOPROTOOPT'Unds'K-IO'Unds'{}(), Lbl'Hash'EAFNOSUPPORT'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOPROTOOPT'Unds'K-IO'Unds'{}(), Lbl'Hash'ENXIO'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOPROTOOPT'Unds'K-IO'Unds'{}(), Lbl'Hash'EWOULDBLOCK'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOPROTOOPT'Unds'K-IO'Unds'{}(), Lbl'Hash'E2BIG'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOPROTOOPT'Unds'K-IO'Unds'{}(), Lbl'Hash'ENETRESET'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOPROTOOPT'Unds'K-IO'Unds'{}(), Lbl'Hash'EPERM'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOPROTOOPT'Unds'K-IO'Unds'{}(), Lbl'Hash'ENOSYS'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOPROTOOPT'Unds'K-IO'Unds'{}(), Lbl'Hash'EALREADY'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOPROTOOPT'Unds'K-IO'Unds'{}(), Lbl'Hash'EHOSTDOWN'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOPROTOOPT'Unds'K-IO'Unds'{}(), Lbl'Hash'ENOTSOCK'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOPROTOOPT'Unds'K-IO'Unds'{}(), Lbl'Hash'EDOM'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOPROTOOPT'Unds'K-IO'Unds'{}(), Lbl'Hash'ENOBUFS'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOPROTOOPT'Unds'K-IO'Unds'{}(), Lbl'Hash'ETIMEDOUT'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOPROTOOPT'Unds'K-IO'Unds'{}(), Lbl'Hash'ETOOMANYREFS'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOPROTOOPT'Unds'K-IO'Unds'{}(), Lbl'Hash'EDESTADDRREQ'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOPROTOOPT'Unds'K-IO'Unds'{}(), Lbl'Hash'ENOTTY'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOPROTOOPT'Unds'K-IO'Unds'{}(), Lbl'Hash'ECONNRESET'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOPROTOOPT'Unds'K-IO'Unds'{}(), Lbl'Hash'EMFILE'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOPROTOOPT'Unds'K-IO'Unds'{}(), Lbl'Hash'EIO'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOPROTOOPT'Unds'K-IO'Unds'{}(), Lbl'Hash'ENOEXEC'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOPROTOOPT'Unds'K-IO'Unds'{}(), Lbl'Hash'EPFNOSUPPORT'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOPROTOOPT'Unds'K-IO'Unds'{}(), Lbl'Hash'ESHUTDOWN'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOPROTOOPT'Unds'K-IO'Unds'{}(), Lbl'Hash'EINVAL'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOPROTOOPT'Unds'K-IO'Unds'{}(), Lbl'Hash'EMLINK'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOPROTOOPT'Unds'K-IO'Unds'{}(), Lbl'Hash'EISDIR'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOPROTOOPT'Unds'K-IO'Unds'{}(), Lbl'Hash'EFBIG'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOPROTOOPT'Unds'K-IO'Unds'{}(), Lbl'Hash'ENOTCONN'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOPROTOOPT'Unds'K-IO'Unds'{}(), Lbl'Hash'ENODEV'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOPROTOOPT'Unds'K-IO'Unds'{}(), Lbl'Hash'EEXIST'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOPROTOOPT'Unds'K-IO'Unds'{}(), Lbl'Hash'ELOOP'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOPROTOOPT'Unds'K-IO'Unds'{}(), Lbl'Hash'ENOTEMPTY'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOPROTOOPT'Unds'K-IO'Unds'{}(), Lbl'Hash'EHOSTUNREACH'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOPROTOOPT'Unds'K-IO'Unds'{}(), Lbl'Hash'noparse'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOPROTOOPT'Unds'K-IO'Unds'{}(), Lbl'Hash'EINTR'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOPROTOOPT'Unds'K-IO'Unds'{}(), Lbl'Hash'EMSGSIZE'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOPROTOOPT'Unds'K-IO'Unds'{}(), Lbl'Hash'ENOENT'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOPROTOOPT'Unds'K-IO'Unds'{}(), Lbl'Hash'ENOLCK'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOPROTOOPT'Unds'K-IO'Unds'{}(), Lbl'Hash'EFAULT'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOPROTOOPT'Unds'K-IO'Unds'{}(), Lbl'Hash'ERANGE'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOPROTOOPT'Unds'K-IO'Unds'{}(), Lbl'Hash'EBUSY'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOPROTOOPT'Unds'K-IO'Unds'{}(), Lbl'Hash'EINPROGRESS'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOPROTOOPT'Unds'K-IO'Unds'{}(), Lbl'Hash'ENOMEM'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOPROTOOPT'Unds'K-IO'Unds'{}(), Lbl'Hash'ENOTDIR'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOPROTOOPT'Unds'K-IO'Unds'{}(), Lbl'Hash'ENAMETOOLONG'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOPROTOOPT'Unds'K-IO'Unds'{}(), Lbl'Hash'EADDRINUSE'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOPROTOOPT'Unds'K-IO'Unds'{}(), Lbl'Hash'EROFS'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOPROTOOPT'Unds'K-IO'Unds'{}(), Lbl'Hash'EPROTONOSUPPORT'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOPROTOOPT'Unds'K-IO'Unds'{}(), Lbl'Hash'ESOCKTNOSUPPORT'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOPROTOOPT'Unds'K-IO'Unds'{}(), Lbl'Hash'ECHILD'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{R} \exists{R} (Val:SortIOError{}, \equals{SortIOError{}, R} (Val:SortIOError{}, Lbl'Hash'EAGAIN'Unds'K-IO'Unds'{}())) [functional{}()] // functional
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EAGAIN'Unds'K-IO'Unds'{}(), Lbl'Hash'ENETDOWN'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EAGAIN'Unds'K-IO'Unds'{}(), Lbl'Hash'EISCONN'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EAGAIN'Unds'K-IO'Unds'{}(), Lbl'Hash'EPIPE'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EAGAIN'Unds'K-IO'Unds'{}(), Lbl'Hash'ECONNABORTED'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EAGAIN'Unds'K-IO'Unds'{}(), Lbl'Hash'ESRCH'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EAGAIN'Unds'K-IO'Unds'{}(), Lbl'Hash'EOPNOTSUPP'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EAGAIN'Unds'K-IO'Unds'{}(), Lbl'Hash'ENOSPC'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EAGAIN'Unds'K-IO'Unds'{}(), Lbl'Hash'EDEADLK'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EAGAIN'Unds'K-IO'Unds'{}(), Lbl'Hash'ECONNREFUSED'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EAGAIN'Unds'K-IO'Unds'{}(), Lbl'Hash'EPROTOTYPE'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EAGAIN'Unds'K-IO'Unds'{}(), Lbl'Hash'EAFNOSUPPORT'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EAGAIN'Unds'K-IO'Unds'{}(), Lbl'Hash'ENXIO'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EAGAIN'Unds'K-IO'Unds'{}(), Lbl'Hash'EWOULDBLOCK'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EAGAIN'Unds'K-IO'Unds'{}(), Lbl'Hash'E2BIG'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EAGAIN'Unds'K-IO'Unds'{}(), Lbl'Hash'ENETRESET'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EAGAIN'Unds'K-IO'Unds'{}(), Lbl'Hash'EPERM'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EAGAIN'Unds'K-IO'Unds'{}(), Lbl'Hash'ENOSYS'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EAGAIN'Unds'K-IO'Unds'{}(), Lbl'Hash'EALREADY'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EAGAIN'Unds'K-IO'Unds'{}(), Lbl'Hash'EHOSTDOWN'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EAGAIN'Unds'K-IO'Unds'{}(), Lbl'Hash'ENOTSOCK'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EAGAIN'Unds'K-IO'Unds'{}(), Lbl'Hash'EDOM'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EAGAIN'Unds'K-IO'Unds'{}(), Lbl'Hash'ENOBUFS'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EAGAIN'Unds'K-IO'Unds'{}(), Lbl'Hash'ETIMEDOUT'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EAGAIN'Unds'K-IO'Unds'{}(), Lbl'Hash'ETOOMANYREFS'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EAGAIN'Unds'K-IO'Unds'{}(), Lbl'Hash'EDESTADDRREQ'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EAGAIN'Unds'K-IO'Unds'{}(), Lbl'Hash'ENOTTY'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EAGAIN'Unds'K-IO'Unds'{}(), Lbl'Hash'ECONNRESET'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EAGAIN'Unds'K-IO'Unds'{}(), Lbl'Hash'EMFILE'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EAGAIN'Unds'K-IO'Unds'{}(), Lbl'Hash'EIO'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EAGAIN'Unds'K-IO'Unds'{}(), Lbl'Hash'ENOEXEC'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EAGAIN'Unds'K-IO'Unds'{}(), Lbl'Hash'EPFNOSUPPORT'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EAGAIN'Unds'K-IO'Unds'{}(), Lbl'Hash'ESHUTDOWN'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EAGAIN'Unds'K-IO'Unds'{}(), Lbl'Hash'EINVAL'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EAGAIN'Unds'K-IO'Unds'{}(), Lbl'Hash'EMLINK'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EAGAIN'Unds'K-IO'Unds'{}(), Lbl'Hash'EISDIR'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EAGAIN'Unds'K-IO'Unds'{}(), Lbl'Hash'EFBIG'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EAGAIN'Unds'K-IO'Unds'{}(), Lbl'Hash'ENOTCONN'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EAGAIN'Unds'K-IO'Unds'{}(), Lbl'Hash'ENODEV'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EAGAIN'Unds'K-IO'Unds'{}(), Lbl'Hash'EEXIST'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EAGAIN'Unds'K-IO'Unds'{}(), Lbl'Hash'ELOOP'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EAGAIN'Unds'K-IO'Unds'{}(), Lbl'Hash'ENOTEMPTY'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EAGAIN'Unds'K-IO'Unds'{}(), Lbl'Hash'EHOSTUNREACH'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EAGAIN'Unds'K-IO'Unds'{}(), Lbl'Hash'noparse'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EAGAIN'Unds'K-IO'Unds'{}(), Lbl'Hash'EINTR'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EAGAIN'Unds'K-IO'Unds'{}(), Lbl'Hash'EMSGSIZE'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EAGAIN'Unds'K-IO'Unds'{}(), Lbl'Hash'ENOENT'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EAGAIN'Unds'K-IO'Unds'{}(), Lbl'Hash'ENOLCK'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EAGAIN'Unds'K-IO'Unds'{}(), Lbl'Hash'EFAULT'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EAGAIN'Unds'K-IO'Unds'{}(), Lbl'Hash'ERANGE'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EAGAIN'Unds'K-IO'Unds'{}(), Lbl'Hash'EBUSY'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EAGAIN'Unds'K-IO'Unds'{}(), Lbl'Hash'EINPROGRESS'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EAGAIN'Unds'K-IO'Unds'{}(), Lbl'Hash'ENOMEM'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EAGAIN'Unds'K-IO'Unds'{}(), Lbl'Hash'ENOTDIR'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EAGAIN'Unds'K-IO'Unds'{}(), Lbl'Hash'ENAMETOOLONG'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EAGAIN'Unds'K-IO'Unds'{}(), Lbl'Hash'EADDRINUSE'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EAGAIN'Unds'K-IO'Unds'{}(), Lbl'Hash'EROFS'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EAGAIN'Unds'K-IO'Unds'{}(), Lbl'Hash'EPROTONOSUPPORT'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EAGAIN'Unds'K-IO'Unds'{}(), Lbl'Hash'ESOCKTNOSUPPORT'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EAGAIN'Unds'K-IO'Unds'{}(), Lbl'Hash'ECHILD'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{R} \exists{R} (Val:SortBool{}, \equals{SortBool{}, R} (Val:SortBool{}, Lbl'Unds-LT-'String'UndsUnds'STRING'UndsUnds'String'Unds'String{}(K0:SortString{}, K1:SortString{}))) [functional{}()] // functional
  axiom{R} \exists{R} (Val:SortIOError{}, \equals{SortIOError{}, R} (Val:SortIOError{}, Lbl'Hash'ENETDOWN'Unds'K-IO'Unds'{}())) [functional{}()] // functional
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENETDOWN'Unds'K-IO'Unds'{}(), Lbl'Hash'EISCONN'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENETDOWN'Unds'K-IO'Unds'{}(), Lbl'Hash'EPIPE'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENETDOWN'Unds'K-IO'Unds'{}(), Lbl'Hash'ECONNABORTED'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENETDOWN'Unds'K-IO'Unds'{}(), Lbl'Hash'ESRCH'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENETDOWN'Unds'K-IO'Unds'{}(), Lbl'Hash'EOPNOTSUPP'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENETDOWN'Unds'K-IO'Unds'{}(), Lbl'Hash'ENOSPC'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENETDOWN'Unds'K-IO'Unds'{}(), Lbl'Hash'EDEADLK'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENETDOWN'Unds'K-IO'Unds'{}(), Lbl'Hash'ECONNREFUSED'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENETDOWN'Unds'K-IO'Unds'{}(), Lbl'Hash'EPROTOTYPE'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENETDOWN'Unds'K-IO'Unds'{}(), Lbl'Hash'EAFNOSUPPORT'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENETDOWN'Unds'K-IO'Unds'{}(), Lbl'Hash'ENXIO'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENETDOWN'Unds'K-IO'Unds'{}(), Lbl'Hash'EWOULDBLOCK'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENETDOWN'Unds'K-IO'Unds'{}(), Lbl'Hash'E2BIG'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENETDOWN'Unds'K-IO'Unds'{}(), Lbl'Hash'ENETRESET'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENETDOWN'Unds'K-IO'Unds'{}(), Lbl'Hash'EPERM'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENETDOWN'Unds'K-IO'Unds'{}(), Lbl'Hash'ENOSYS'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENETDOWN'Unds'K-IO'Unds'{}(), Lbl'Hash'EALREADY'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENETDOWN'Unds'K-IO'Unds'{}(), Lbl'Hash'EHOSTDOWN'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENETDOWN'Unds'K-IO'Unds'{}(), Lbl'Hash'ENOTSOCK'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENETDOWN'Unds'K-IO'Unds'{}(), Lbl'Hash'EDOM'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENETDOWN'Unds'K-IO'Unds'{}(), Lbl'Hash'ENOBUFS'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENETDOWN'Unds'K-IO'Unds'{}(), Lbl'Hash'ETIMEDOUT'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENETDOWN'Unds'K-IO'Unds'{}(), Lbl'Hash'ETOOMANYREFS'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENETDOWN'Unds'K-IO'Unds'{}(), Lbl'Hash'EDESTADDRREQ'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENETDOWN'Unds'K-IO'Unds'{}(), Lbl'Hash'ENOTTY'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENETDOWN'Unds'K-IO'Unds'{}(), Lbl'Hash'ECONNRESET'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENETDOWN'Unds'K-IO'Unds'{}(), Lbl'Hash'EMFILE'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENETDOWN'Unds'K-IO'Unds'{}(), Lbl'Hash'EIO'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENETDOWN'Unds'K-IO'Unds'{}(), Lbl'Hash'ENOEXEC'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENETDOWN'Unds'K-IO'Unds'{}(), Lbl'Hash'EPFNOSUPPORT'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENETDOWN'Unds'K-IO'Unds'{}(), Lbl'Hash'ESHUTDOWN'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENETDOWN'Unds'K-IO'Unds'{}(), Lbl'Hash'EINVAL'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENETDOWN'Unds'K-IO'Unds'{}(), Lbl'Hash'EMLINK'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENETDOWN'Unds'K-IO'Unds'{}(), Lbl'Hash'EISDIR'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENETDOWN'Unds'K-IO'Unds'{}(), Lbl'Hash'EFBIG'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENETDOWN'Unds'K-IO'Unds'{}(), Lbl'Hash'ENOTCONN'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENETDOWN'Unds'K-IO'Unds'{}(), Lbl'Hash'ENODEV'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENETDOWN'Unds'K-IO'Unds'{}(), Lbl'Hash'EEXIST'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENETDOWN'Unds'K-IO'Unds'{}(), Lbl'Hash'ELOOP'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENETDOWN'Unds'K-IO'Unds'{}(), Lbl'Hash'ENOTEMPTY'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENETDOWN'Unds'K-IO'Unds'{}(), Lbl'Hash'EHOSTUNREACH'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENETDOWN'Unds'K-IO'Unds'{}(), Lbl'Hash'noparse'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENETDOWN'Unds'K-IO'Unds'{}(), Lbl'Hash'EINTR'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENETDOWN'Unds'K-IO'Unds'{}(), Lbl'Hash'EMSGSIZE'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENETDOWN'Unds'K-IO'Unds'{}(), Lbl'Hash'ENOENT'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENETDOWN'Unds'K-IO'Unds'{}(), Lbl'Hash'ENOLCK'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENETDOWN'Unds'K-IO'Unds'{}(), Lbl'Hash'EFAULT'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENETDOWN'Unds'K-IO'Unds'{}(), Lbl'Hash'ERANGE'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENETDOWN'Unds'K-IO'Unds'{}(), Lbl'Hash'EBUSY'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENETDOWN'Unds'K-IO'Unds'{}(), Lbl'Hash'EINPROGRESS'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENETDOWN'Unds'K-IO'Unds'{}(), Lbl'Hash'ENOMEM'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENETDOWN'Unds'K-IO'Unds'{}(), Lbl'Hash'ENOTDIR'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENETDOWN'Unds'K-IO'Unds'{}(), Lbl'Hash'ENAMETOOLONG'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENETDOWN'Unds'K-IO'Unds'{}(), Lbl'Hash'EADDRINUSE'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENETDOWN'Unds'K-IO'Unds'{}(), Lbl'Hash'EROFS'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENETDOWN'Unds'K-IO'Unds'{}(), Lbl'Hash'EPROTONOSUPPORT'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENETDOWN'Unds'K-IO'Unds'{}(), Lbl'Hash'ESOCKTNOSUPPORT'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENETDOWN'Unds'K-IO'Unds'{}(), Lbl'Hash'ECHILD'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{R} \exists{R} (Val:SortIOError{}, \equals{SortIOError{}, R} (Val:SortIOError{}, Lbl'Hash'EISCONN'Unds'K-IO'Unds'{}())) [functional{}()] // functional
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EISCONN'Unds'K-IO'Unds'{}(), Lbl'Hash'EPIPE'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EISCONN'Unds'K-IO'Unds'{}(), Lbl'Hash'ECONNABORTED'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EISCONN'Unds'K-IO'Unds'{}(), Lbl'Hash'ESRCH'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EISCONN'Unds'K-IO'Unds'{}(), Lbl'Hash'EOPNOTSUPP'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EISCONN'Unds'K-IO'Unds'{}(), Lbl'Hash'ENOSPC'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EISCONN'Unds'K-IO'Unds'{}(), Lbl'Hash'EDEADLK'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EISCONN'Unds'K-IO'Unds'{}(), Lbl'Hash'ECONNREFUSED'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EISCONN'Unds'K-IO'Unds'{}(), Lbl'Hash'EPROTOTYPE'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EISCONN'Unds'K-IO'Unds'{}(), Lbl'Hash'EAFNOSUPPORT'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EISCONN'Unds'K-IO'Unds'{}(), Lbl'Hash'ENXIO'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EISCONN'Unds'K-IO'Unds'{}(), Lbl'Hash'EWOULDBLOCK'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EISCONN'Unds'K-IO'Unds'{}(), Lbl'Hash'E2BIG'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EISCONN'Unds'K-IO'Unds'{}(), Lbl'Hash'ENETRESET'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EISCONN'Unds'K-IO'Unds'{}(), Lbl'Hash'EPERM'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EISCONN'Unds'K-IO'Unds'{}(), Lbl'Hash'ENOSYS'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EISCONN'Unds'K-IO'Unds'{}(), Lbl'Hash'EALREADY'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EISCONN'Unds'K-IO'Unds'{}(), Lbl'Hash'EHOSTDOWN'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EISCONN'Unds'K-IO'Unds'{}(), Lbl'Hash'ENOTSOCK'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EISCONN'Unds'K-IO'Unds'{}(), Lbl'Hash'EDOM'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EISCONN'Unds'K-IO'Unds'{}(), Lbl'Hash'ENOBUFS'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EISCONN'Unds'K-IO'Unds'{}(), Lbl'Hash'ETIMEDOUT'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EISCONN'Unds'K-IO'Unds'{}(), Lbl'Hash'ETOOMANYREFS'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EISCONN'Unds'K-IO'Unds'{}(), Lbl'Hash'EDESTADDRREQ'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EISCONN'Unds'K-IO'Unds'{}(), Lbl'Hash'ENOTTY'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EISCONN'Unds'K-IO'Unds'{}(), Lbl'Hash'ECONNRESET'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EISCONN'Unds'K-IO'Unds'{}(), Lbl'Hash'EMFILE'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EISCONN'Unds'K-IO'Unds'{}(), Lbl'Hash'EIO'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EISCONN'Unds'K-IO'Unds'{}(), Lbl'Hash'ENOEXEC'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EISCONN'Unds'K-IO'Unds'{}(), Lbl'Hash'EPFNOSUPPORT'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EISCONN'Unds'K-IO'Unds'{}(), Lbl'Hash'ESHUTDOWN'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EISCONN'Unds'K-IO'Unds'{}(), Lbl'Hash'EINVAL'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EISCONN'Unds'K-IO'Unds'{}(), Lbl'Hash'EMLINK'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EISCONN'Unds'K-IO'Unds'{}(), Lbl'Hash'EISDIR'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EISCONN'Unds'K-IO'Unds'{}(), Lbl'Hash'EFBIG'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EISCONN'Unds'K-IO'Unds'{}(), Lbl'Hash'ENOTCONN'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EISCONN'Unds'K-IO'Unds'{}(), Lbl'Hash'ENODEV'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EISCONN'Unds'K-IO'Unds'{}(), Lbl'Hash'EEXIST'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EISCONN'Unds'K-IO'Unds'{}(), Lbl'Hash'ELOOP'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EISCONN'Unds'K-IO'Unds'{}(), Lbl'Hash'ENOTEMPTY'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EISCONN'Unds'K-IO'Unds'{}(), Lbl'Hash'EHOSTUNREACH'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EISCONN'Unds'K-IO'Unds'{}(), Lbl'Hash'noparse'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EISCONN'Unds'K-IO'Unds'{}(), Lbl'Hash'EINTR'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EISCONN'Unds'K-IO'Unds'{}(), Lbl'Hash'EMSGSIZE'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EISCONN'Unds'K-IO'Unds'{}(), Lbl'Hash'ENOENT'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EISCONN'Unds'K-IO'Unds'{}(), Lbl'Hash'ENOLCK'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EISCONN'Unds'K-IO'Unds'{}(), Lbl'Hash'EFAULT'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EISCONN'Unds'K-IO'Unds'{}(), Lbl'Hash'ERANGE'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EISCONN'Unds'K-IO'Unds'{}(), Lbl'Hash'EBUSY'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EISCONN'Unds'K-IO'Unds'{}(), Lbl'Hash'EINPROGRESS'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EISCONN'Unds'K-IO'Unds'{}(), Lbl'Hash'ENOMEM'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EISCONN'Unds'K-IO'Unds'{}(), Lbl'Hash'ENOTDIR'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EISCONN'Unds'K-IO'Unds'{}(), Lbl'Hash'ENAMETOOLONG'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EISCONN'Unds'K-IO'Unds'{}(), Lbl'Hash'EADDRINUSE'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EISCONN'Unds'K-IO'Unds'{}(), Lbl'Hash'EROFS'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EISCONN'Unds'K-IO'Unds'{}(), Lbl'Hash'EPROTONOSUPPORT'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EISCONN'Unds'K-IO'Unds'{}(), Lbl'Hash'ESOCKTNOSUPPORT'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EISCONN'Unds'K-IO'Unds'{}(), Lbl'Hash'ECHILD'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{R} \exists{R} (Val:SortIOError{}, \equals{SortIOError{}, R} (Val:SortIOError{}, Lbl'Hash'EPIPE'Unds'K-IO'Unds'{}())) [functional{}()] // functional
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EPIPE'Unds'K-IO'Unds'{}(), Lbl'Hash'ECONNABORTED'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EPIPE'Unds'K-IO'Unds'{}(), Lbl'Hash'ESRCH'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EPIPE'Unds'K-IO'Unds'{}(), Lbl'Hash'EOPNOTSUPP'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EPIPE'Unds'K-IO'Unds'{}(), Lbl'Hash'ENOSPC'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EPIPE'Unds'K-IO'Unds'{}(), Lbl'Hash'EDEADLK'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EPIPE'Unds'K-IO'Unds'{}(), Lbl'Hash'ECONNREFUSED'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EPIPE'Unds'K-IO'Unds'{}(), Lbl'Hash'EPROTOTYPE'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EPIPE'Unds'K-IO'Unds'{}(), Lbl'Hash'EAFNOSUPPORT'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EPIPE'Unds'K-IO'Unds'{}(), Lbl'Hash'ENXIO'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EPIPE'Unds'K-IO'Unds'{}(), Lbl'Hash'EWOULDBLOCK'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EPIPE'Unds'K-IO'Unds'{}(), Lbl'Hash'E2BIG'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EPIPE'Unds'K-IO'Unds'{}(), Lbl'Hash'ENETRESET'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EPIPE'Unds'K-IO'Unds'{}(), Lbl'Hash'EPERM'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EPIPE'Unds'K-IO'Unds'{}(), Lbl'Hash'ENOSYS'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EPIPE'Unds'K-IO'Unds'{}(), Lbl'Hash'EALREADY'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EPIPE'Unds'K-IO'Unds'{}(), Lbl'Hash'EHOSTDOWN'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EPIPE'Unds'K-IO'Unds'{}(), Lbl'Hash'ENOTSOCK'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EPIPE'Unds'K-IO'Unds'{}(), Lbl'Hash'EDOM'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EPIPE'Unds'K-IO'Unds'{}(), Lbl'Hash'ENOBUFS'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EPIPE'Unds'K-IO'Unds'{}(), Lbl'Hash'ETIMEDOUT'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EPIPE'Unds'K-IO'Unds'{}(), Lbl'Hash'ETOOMANYREFS'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EPIPE'Unds'K-IO'Unds'{}(), Lbl'Hash'EDESTADDRREQ'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EPIPE'Unds'K-IO'Unds'{}(), Lbl'Hash'ENOTTY'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EPIPE'Unds'K-IO'Unds'{}(), Lbl'Hash'ECONNRESET'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EPIPE'Unds'K-IO'Unds'{}(), Lbl'Hash'EMFILE'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EPIPE'Unds'K-IO'Unds'{}(), Lbl'Hash'EIO'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EPIPE'Unds'K-IO'Unds'{}(), Lbl'Hash'ENOEXEC'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EPIPE'Unds'K-IO'Unds'{}(), Lbl'Hash'EPFNOSUPPORT'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EPIPE'Unds'K-IO'Unds'{}(), Lbl'Hash'ESHUTDOWN'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EPIPE'Unds'K-IO'Unds'{}(), Lbl'Hash'EINVAL'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EPIPE'Unds'K-IO'Unds'{}(), Lbl'Hash'EMLINK'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EPIPE'Unds'K-IO'Unds'{}(), Lbl'Hash'EISDIR'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EPIPE'Unds'K-IO'Unds'{}(), Lbl'Hash'EFBIG'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EPIPE'Unds'K-IO'Unds'{}(), Lbl'Hash'ENOTCONN'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EPIPE'Unds'K-IO'Unds'{}(), Lbl'Hash'ENODEV'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EPIPE'Unds'K-IO'Unds'{}(), Lbl'Hash'EEXIST'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EPIPE'Unds'K-IO'Unds'{}(), Lbl'Hash'ELOOP'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EPIPE'Unds'K-IO'Unds'{}(), Lbl'Hash'ENOTEMPTY'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EPIPE'Unds'K-IO'Unds'{}(), Lbl'Hash'EHOSTUNREACH'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EPIPE'Unds'K-IO'Unds'{}(), Lbl'Hash'noparse'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EPIPE'Unds'K-IO'Unds'{}(), Lbl'Hash'EINTR'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EPIPE'Unds'K-IO'Unds'{}(), Lbl'Hash'EMSGSIZE'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EPIPE'Unds'K-IO'Unds'{}(), Lbl'Hash'ENOENT'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EPIPE'Unds'K-IO'Unds'{}(), Lbl'Hash'ENOLCK'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EPIPE'Unds'K-IO'Unds'{}(), Lbl'Hash'EFAULT'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EPIPE'Unds'K-IO'Unds'{}(), Lbl'Hash'ERANGE'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EPIPE'Unds'K-IO'Unds'{}(), Lbl'Hash'EBUSY'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EPIPE'Unds'K-IO'Unds'{}(), Lbl'Hash'EINPROGRESS'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EPIPE'Unds'K-IO'Unds'{}(), Lbl'Hash'ENOMEM'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EPIPE'Unds'K-IO'Unds'{}(), Lbl'Hash'ENOTDIR'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EPIPE'Unds'K-IO'Unds'{}(), Lbl'Hash'ENAMETOOLONG'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EPIPE'Unds'K-IO'Unds'{}(), Lbl'Hash'EADDRINUSE'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EPIPE'Unds'K-IO'Unds'{}(), Lbl'Hash'EROFS'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EPIPE'Unds'K-IO'Unds'{}(), Lbl'Hash'EPROTONOSUPPORT'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EPIPE'Unds'K-IO'Unds'{}(), Lbl'Hash'ESOCKTNOSUPPORT'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EPIPE'Unds'K-IO'Unds'{}(), Lbl'Hash'ECHILD'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{R} \exists{R} (Val:SortIOError{}, \equals{SortIOError{}, R} (Val:SortIOError{}, Lbl'Hash'ECONNABORTED'Unds'K-IO'Unds'{}())) [functional{}()] // functional
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ECONNABORTED'Unds'K-IO'Unds'{}(), Lbl'Hash'ESRCH'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ECONNABORTED'Unds'K-IO'Unds'{}(), Lbl'Hash'EOPNOTSUPP'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ECONNABORTED'Unds'K-IO'Unds'{}(), Lbl'Hash'ENOSPC'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ECONNABORTED'Unds'K-IO'Unds'{}(), Lbl'Hash'EDEADLK'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ECONNABORTED'Unds'K-IO'Unds'{}(), Lbl'Hash'ECONNREFUSED'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ECONNABORTED'Unds'K-IO'Unds'{}(), Lbl'Hash'EPROTOTYPE'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ECONNABORTED'Unds'K-IO'Unds'{}(), Lbl'Hash'EAFNOSUPPORT'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ECONNABORTED'Unds'K-IO'Unds'{}(), Lbl'Hash'ENXIO'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ECONNABORTED'Unds'K-IO'Unds'{}(), Lbl'Hash'EWOULDBLOCK'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ECONNABORTED'Unds'K-IO'Unds'{}(), Lbl'Hash'E2BIG'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ECONNABORTED'Unds'K-IO'Unds'{}(), Lbl'Hash'ENETRESET'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ECONNABORTED'Unds'K-IO'Unds'{}(), Lbl'Hash'EPERM'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ECONNABORTED'Unds'K-IO'Unds'{}(), Lbl'Hash'ENOSYS'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ECONNABORTED'Unds'K-IO'Unds'{}(), Lbl'Hash'EALREADY'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ECONNABORTED'Unds'K-IO'Unds'{}(), Lbl'Hash'EHOSTDOWN'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ECONNABORTED'Unds'K-IO'Unds'{}(), Lbl'Hash'ENOTSOCK'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ECONNABORTED'Unds'K-IO'Unds'{}(), Lbl'Hash'EDOM'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ECONNABORTED'Unds'K-IO'Unds'{}(), Lbl'Hash'ENOBUFS'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ECONNABORTED'Unds'K-IO'Unds'{}(), Lbl'Hash'ETIMEDOUT'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ECONNABORTED'Unds'K-IO'Unds'{}(), Lbl'Hash'ETOOMANYREFS'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ECONNABORTED'Unds'K-IO'Unds'{}(), Lbl'Hash'EDESTADDRREQ'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ECONNABORTED'Unds'K-IO'Unds'{}(), Lbl'Hash'ENOTTY'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ECONNABORTED'Unds'K-IO'Unds'{}(), Lbl'Hash'ECONNRESET'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ECONNABORTED'Unds'K-IO'Unds'{}(), Lbl'Hash'EMFILE'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ECONNABORTED'Unds'K-IO'Unds'{}(), Lbl'Hash'EIO'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ECONNABORTED'Unds'K-IO'Unds'{}(), Lbl'Hash'ENOEXEC'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ECONNABORTED'Unds'K-IO'Unds'{}(), Lbl'Hash'EPFNOSUPPORT'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ECONNABORTED'Unds'K-IO'Unds'{}(), Lbl'Hash'ESHUTDOWN'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ECONNABORTED'Unds'K-IO'Unds'{}(), Lbl'Hash'EINVAL'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ECONNABORTED'Unds'K-IO'Unds'{}(), Lbl'Hash'EMLINK'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ECONNABORTED'Unds'K-IO'Unds'{}(), Lbl'Hash'EISDIR'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ECONNABORTED'Unds'K-IO'Unds'{}(), Lbl'Hash'EFBIG'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ECONNABORTED'Unds'K-IO'Unds'{}(), Lbl'Hash'ENOTCONN'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ECONNABORTED'Unds'K-IO'Unds'{}(), Lbl'Hash'ENODEV'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ECONNABORTED'Unds'K-IO'Unds'{}(), Lbl'Hash'EEXIST'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ECONNABORTED'Unds'K-IO'Unds'{}(), Lbl'Hash'ELOOP'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ECONNABORTED'Unds'K-IO'Unds'{}(), Lbl'Hash'ENOTEMPTY'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ECONNABORTED'Unds'K-IO'Unds'{}(), Lbl'Hash'EHOSTUNREACH'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ECONNABORTED'Unds'K-IO'Unds'{}(), Lbl'Hash'noparse'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ECONNABORTED'Unds'K-IO'Unds'{}(), Lbl'Hash'EINTR'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ECONNABORTED'Unds'K-IO'Unds'{}(), Lbl'Hash'EMSGSIZE'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ECONNABORTED'Unds'K-IO'Unds'{}(), Lbl'Hash'ENOENT'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ECONNABORTED'Unds'K-IO'Unds'{}(), Lbl'Hash'ENOLCK'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ECONNABORTED'Unds'K-IO'Unds'{}(), Lbl'Hash'EFAULT'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ECONNABORTED'Unds'K-IO'Unds'{}(), Lbl'Hash'ERANGE'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ECONNABORTED'Unds'K-IO'Unds'{}(), Lbl'Hash'EBUSY'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ECONNABORTED'Unds'K-IO'Unds'{}(), Lbl'Hash'EINPROGRESS'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ECONNABORTED'Unds'K-IO'Unds'{}(), Lbl'Hash'ENOMEM'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ECONNABORTED'Unds'K-IO'Unds'{}(), Lbl'Hash'ENOTDIR'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ECONNABORTED'Unds'K-IO'Unds'{}(), Lbl'Hash'ENAMETOOLONG'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ECONNABORTED'Unds'K-IO'Unds'{}(), Lbl'Hash'EADDRINUSE'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ECONNABORTED'Unds'K-IO'Unds'{}(), Lbl'Hash'EROFS'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ECONNABORTED'Unds'K-IO'Unds'{}(), Lbl'Hash'EPROTONOSUPPORT'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ECONNABORTED'Unds'K-IO'Unds'{}(), Lbl'Hash'ESOCKTNOSUPPORT'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ECONNABORTED'Unds'K-IO'Unds'{}(), Lbl'Hash'ECHILD'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{R} \exists{R} (Val:SortIOError{}, \equals{SortIOError{}, R} (Val:SortIOError{}, Lbl'Hash'ESRCH'Unds'K-IO'Unds'{}())) [functional{}()] // functional
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ESRCH'Unds'K-IO'Unds'{}(), Lbl'Hash'EOPNOTSUPP'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ESRCH'Unds'K-IO'Unds'{}(), Lbl'Hash'ENOSPC'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ESRCH'Unds'K-IO'Unds'{}(), Lbl'Hash'EDEADLK'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ESRCH'Unds'K-IO'Unds'{}(), Lbl'Hash'ECONNREFUSED'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ESRCH'Unds'K-IO'Unds'{}(), Lbl'Hash'EPROTOTYPE'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ESRCH'Unds'K-IO'Unds'{}(), Lbl'Hash'EAFNOSUPPORT'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ESRCH'Unds'K-IO'Unds'{}(), Lbl'Hash'ENXIO'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ESRCH'Unds'K-IO'Unds'{}(), Lbl'Hash'EWOULDBLOCK'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ESRCH'Unds'K-IO'Unds'{}(), Lbl'Hash'E2BIG'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ESRCH'Unds'K-IO'Unds'{}(), Lbl'Hash'ENETRESET'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ESRCH'Unds'K-IO'Unds'{}(), Lbl'Hash'EPERM'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ESRCH'Unds'K-IO'Unds'{}(), Lbl'Hash'ENOSYS'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ESRCH'Unds'K-IO'Unds'{}(), Lbl'Hash'EALREADY'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ESRCH'Unds'K-IO'Unds'{}(), Lbl'Hash'EHOSTDOWN'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ESRCH'Unds'K-IO'Unds'{}(), Lbl'Hash'ENOTSOCK'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ESRCH'Unds'K-IO'Unds'{}(), Lbl'Hash'EDOM'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ESRCH'Unds'K-IO'Unds'{}(), Lbl'Hash'ENOBUFS'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ESRCH'Unds'K-IO'Unds'{}(), Lbl'Hash'ETIMEDOUT'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ESRCH'Unds'K-IO'Unds'{}(), Lbl'Hash'ETOOMANYREFS'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ESRCH'Unds'K-IO'Unds'{}(), Lbl'Hash'EDESTADDRREQ'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ESRCH'Unds'K-IO'Unds'{}(), Lbl'Hash'ENOTTY'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ESRCH'Unds'K-IO'Unds'{}(), Lbl'Hash'ECONNRESET'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ESRCH'Unds'K-IO'Unds'{}(), Lbl'Hash'EMFILE'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ESRCH'Unds'K-IO'Unds'{}(), Lbl'Hash'EIO'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ESRCH'Unds'K-IO'Unds'{}(), Lbl'Hash'ENOEXEC'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ESRCH'Unds'K-IO'Unds'{}(), Lbl'Hash'EPFNOSUPPORT'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ESRCH'Unds'K-IO'Unds'{}(), Lbl'Hash'ESHUTDOWN'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ESRCH'Unds'K-IO'Unds'{}(), Lbl'Hash'EINVAL'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ESRCH'Unds'K-IO'Unds'{}(), Lbl'Hash'EMLINK'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ESRCH'Unds'K-IO'Unds'{}(), Lbl'Hash'EISDIR'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ESRCH'Unds'K-IO'Unds'{}(), Lbl'Hash'EFBIG'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ESRCH'Unds'K-IO'Unds'{}(), Lbl'Hash'ENOTCONN'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ESRCH'Unds'K-IO'Unds'{}(), Lbl'Hash'ENODEV'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ESRCH'Unds'K-IO'Unds'{}(), Lbl'Hash'EEXIST'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ESRCH'Unds'K-IO'Unds'{}(), Lbl'Hash'ELOOP'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ESRCH'Unds'K-IO'Unds'{}(), Lbl'Hash'ENOTEMPTY'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ESRCH'Unds'K-IO'Unds'{}(), Lbl'Hash'EHOSTUNREACH'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ESRCH'Unds'K-IO'Unds'{}(), Lbl'Hash'noparse'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ESRCH'Unds'K-IO'Unds'{}(), Lbl'Hash'EINTR'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ESRCH'Unds'K-IO'Unds'{}(), Lbl'Hash'EMSGSIZE'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ESRCH'Unds'K-IO'Unds'{}(), Lbl'Hash'ENOENT'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ESRCH'Unds'K-IO'Unds'{}(), Lbl'Hash'ENOLCK'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ESRCH'Unds'K-IO'Unds'{}(), Lbl'Hash'EFAULT'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ESRCH'Unds'K-IO'Unds'{}(), Lbl'Hash'ERANGE'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ESRCH'Unds'K-IO'Unds'{}(), Lbl'Hash'EBUSY'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ESRCH'Unds'K-IO'Unds'{}(), Lbl'Hash'EINPROGRESS'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ESRCH'Unds'K-IO'Unds'{}(), Lbl'Hash'ENOMEM'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ESRCH'Unds'K-IO'Unds'{}(), Lbl'Hash'ENOTDIR'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ESRCH'Unds'K-IO'Unds'{}(), Lbl'Hash'ENAMETOOLONG'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ESRCH'Unds'K-IO'Unds'{}(), Lbl'Hash'EADDRINUSE'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ESRCH'Unds'K-IO'Unds'{}(), Lbl'Hash'EROFS'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ESRCH'Unds'K-IO'Unds'{}(), Lbl'Hash'EPROTONOSUPPORT'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ESRCH'Unds'K-IO'Unds'{}(), Lbl'Hash'ESOCKTNOSUPPORT'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ESRCH'Unds'K-IO'Unds'{}(), Lbl'Hash'ECHILD'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{R} \exists{R} (Val:SortStmt{}, \equals{SortStmt{}, R} (Val:SortStmt{}, Lbl'UndsEqlsUndsSClnUnds'IMP-SYNTAX'UndsUnds'Id'Unds'AExp{}(K0:SortId{}, K1:SortAExp{}))) [functional{}()] // functional
  axiom{}\implies{SortStmt{}} (\and{SortStmt{}} (Lbl'UndsEqlsUndsSClnUnds'IMP-SYNTAX'UndsUnds'Id'Unds'AExp{}(X0:SortId{}, X1:SortAExp{}), Lbl'UndsEqlsUndsSClnUnds'IMP-SYNTAX'UndsUnds'Id'Unds'AExp{}(Y0:SortId{}, Y1:SortAExp{})), Lbl'UndsEqlsUndsSClnUnds'IMP-SYNTAX'UndsUnds'Id'Unds'AExp{}(\and{SortId{}} (X0:SortId{}, Y0:SortId{}), \and{SortAExp{}} (X1:SortAExp{}, Y1:SortAExp{}))) [constructor{}()] // no confusion same constructor
  axiom{}\not{SortStmt{}} (\and{SortStmt{}} (Lbl'UndsEqlsUndsSClnUnds'IMP-SYNTAX'UndsUnds'Id'Unds'AExp{}(X0:SortId{}, X1:SortAExp{}), Lblwhile'LParUndsRParUndsUnds'IMP-SYNTAX'UndsUnds'BExp'Unds'Block{}(Y0:SortBExp{}, Y1:SortBlock{}))) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortStmt{}} (\and{SortStmt{}} (Lbl'UndsEqlsUndsSClnUnds'IMP-SYNTAX'UndsUnds'Id'Unds'AExp{}(X0:SortId{}, X1:SortAExp{}), Lbl'UndsUndsUnds'IMP-SYNTAX'UndsUnds'Stmt'Unds'Stmt{}(Y0:SortStmt{}, Y1:SortStmt{}))) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortStmt{}} (\and{SortStmt{}} (Lbl'UndsEqlsUndsSClnUnds'IMP-SYNTAX'UndsUnds'Id'Unds'AExp{}(X0:SortId{}, X1:SortAExp{}), Lblif'LParUndsRParUnds'else'UndsUnds'IMP-SYNTAX'UndsUnds'BExp'Unds'Block'Unds'Block{}(Y0:SortBExp{}, Y1:SortBlock{}, Y2:SortBlock{}))) [constructor{}()] // no confusion different constructors
  axiom{R} \exists{R} (Val:SortIOError{}, \equals{SortIOError{}, R} (Val:SortIOError{}, Lbl'Hash'EOPNOTSUPP'Unds'K-IO'Unds'{}())) [functional{}()] // functional
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EOPNOTSUPP'Unds'K-IO'Unds'{}(), Lbl'Hash'ENOSPC'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EOPNOTSUPP'Unds'K-IO'Unds'{}(), Lbl'Hash'EDEADLK'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EOPNOTSUPP'Unds'K-IO'Unds'{}(), Lbl'Hash'ECONNREFUSED'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EOPNOTSUPP'Unds'K-IO'Unds'{}(), Lbl'Hash'EPROTOTYPE'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EOPNOTSUPP'Unds'K-IO'Unds'{}(), Lbl'Hash'EAFNOSUPPORT'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EOPNOTSUPP'Unds'K-IO'Unds'{}(), Lbl'Hash'ENXIO'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EOPNOTSUPP'Unds'K-IO'Unds'{}(), Lbl'Hash'EWOULDBLOCK'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EOPNOTSUPP'Unds'K-IO'Unds'{}(), Lbl'Hash'E2BIG'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EOPNOTSUPP'Unds'K-IO'Unds'{}(), Lbl'Hash'ENETRESET'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EOPNOTSUPP'Unds'K-IO'Unds'{}(), Lbl'Hash'EPERM'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EOPNOTSUPP'Unds'K-IO'Unds'{}(), Lbl'Hash'ENOSYS'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EOPNOTSUPP'Unds'K-IO'Unds'{}(), Lbl'Hash'EALREADY'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EOPNOTSUPP'Unds'K-IO'Unds'{}(), Lbl'Hash'EHOSTDOWN'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EOPNOTSUPP'Unds'K-IO'Unds'{}(), Lbl'Hash'ENOTSOCK'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EOPNOTSUPP'Unds'K-IO'Unds'{}(), Lbl'Hash'EDOM'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EOPNOTSUPP'Unds'K-IO'Unds'{}(), Lbl'Hash'ENOBUFS'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EOPNOTSUPP'Unds'K-IO'Unds'{}(), Lbl'Hash'ETIMEDOUT'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EOPNOTSUPP'Unds'K-IO'Unds'{}(), Lbl'Hash'ETOOMANYREFS'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EOPNOTSUPP'Unds'K-IO'Unds'{}(), Lbl'Hash'EDESTADDRREQ'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EOPNOTSUPP'Unds'K-IO'Unds'{}(), Lbl'Hash'ENOTTY'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EOPNOTSUPP'Unds'K-IO'Unds'{}(), Lbl'Hash'ECONNRESET'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EOPNOTSUPP'Unds'K-IO'Unds'{}(), Lbl'Hash'EMFILE'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EOPNOTSUPP'Unds'K-IO'Unds'{}(), Lbl'Hash'EIO'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EOPNOTSUPP'Unds'K-IO'Unds'{}(), Lbl'Hash'ENOEXEC'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EOPNOTSUPP'Unds'K-IO'Unds'{}(), Lbl'Hash'EPFNOSUPPORT'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EOPNOTSUPP'Unds'K-IO'Unds'{}(), Lbl'Hash'ESHUTDOWN'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EOPNOTSUPP'Unds'K-IO'Unds'{}(), Lbl'Hash'EINVAL'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EOPNOTSUPP'Unds'K-IO'Unds'{}(), Lbl'Hash'EMLINK'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EOPNOTSUPP'Unds'K-IO'Unds'{}(), Lbl'Hash'EISDIR'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EOPNOTSUPP'Unds'K-IO'Unds'{}(), Lbl'Hash'EFBIG'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EOPNOTSUPP'Unds'K-IO'Unds'{}(), Lbl'Hash'ENOTCONN'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EOPNOTSUPP'Unds'K-IO'Unds'{}(), Lbl'Hash'ENODEV'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EOPNOTSUPP'Unds'K-IO'Unds'{}(), Lbl'Hash'EEXIST'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EOPNOTSUPP'Unds'K-IO'Unds'{}(), Lbl'Hash'ELOOP'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EOPNOTSUPP'Unds'K-IO'Unds'{}(), Lbl'Hash'ENOTEMPTY'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EOPNOTSUPP'Unds'K-IO'Unds'{}(), Lbl'Hash'EHOSTUNREACH'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EOPNOTSUPP'Unds'K-IO'Unds'{}(), Lbl'Hash'noparse'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EOPNOTSUPP'Unds'K-IO'Unds'{}(), Lbl'Hash'EINTR'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EOPNOTSUPP'Unds'K-IO'Unds'{}(), Lbl'Hash'EMSGSIZE'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EOPNOTSUPP'Unds'K-IO'Unds'{}(), Lbl'Hash'ENOENT'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EOPNOTSUPP'Unds'K-IO'Unds'{}(), Lbl'Hash'ENOLCK'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EOPNOTSUPP'Unds'K-IO'Unds'{}(), Lbl'Hash'EFAULT'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EOPNOTSUPP'Unds'K-IO'Unds'{}(), Lbl'Hash'ERANGE'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EOPNOTSUPP'Unds'K-IO'Unds'{}(), Lbl'Hash'EBUSY'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EOPNOTSUPP'Unds'K-IO'Unds'{}(), Lbl'Hash'EINPROGRESS'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EOPNOTSUPP'Unds'K-IO'Unds'{}(), Lbl'Hash'ENOMEM'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EOPNOTSUPP'Unds'K-IO'Unds'{}(), Lbl'Hash'ENOTDIR'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EOPNOTSUPP'Unds'K-IO'Unds'{}(), Lbl'Hash'ENAMETOOLONG'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EOPNOTSUPP'Unds'K-IO'Unds'{}(), Lbl'Hash'EADDRINUSE'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EOPNOTSUPP'Unds'K-IO'Unds'{}(), Lbl'Hash'EROFS'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EOPNOTSUPP'Unds'K-IO'Unds'{}(), Lbl'Hash'EPROTONOSUPPORT'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EOPNOTSUPP'Unds'K-IO'Unds'{}(), Lbl'Hash'ESOCKTNOSUPPORT'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EOPNOTSUPP'Unds'K-IO'Unds'{}(), Lbl'Hash'ECHILD'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{R} \exists{R} (Val:SortMap{}, \equals{SortMap{}, R} (Val:SortMap{}, Lbl'UndsLSqBUnds-LT-'-undef'RSqB'{}(K0:SortMap{}, K1:SortK{}))) [functional{}()] // functional
  axiom{R} \exists{R} (Val:SortInt{}, \equals{SortInt{}, R} (Val:SortInt{}, Lbl'UndsAnd'Int'UndsUnds'INT'UndsUnds'Int'Unds'Int{}(K0:SortInt{}, K1:SortInt{}))) [functional{}()] // functional
  axiom{R} \exists{R} (Val:SortIOError{}, \equals{SortIOError{}, R} (Val:SortIOError{}, Lbl'Hash'ENOSPC'Unds'K-IO'Unds'{}())) [functional{}()] // functional
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOSPC'Unds'K-IO'Unds'{}(), Lbl'Hash'EDEADLK'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOSPC'Unds'K-IO'Unds'{}(), Lbl'Hash'ECONNREFUSED'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOSPC'Unds'K-IO'Unds'{}(), Lbl'Hash'EPROTOTYPE'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOSPC'Unds'K-IO'Unds'{}(), Lbl'Hash'EAFNOSUPPORT'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOSPC'Unds'K-IO'Unds'{}(), Lbl'Hash'ENXIO'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOSPC'Unds'K-IO'Unds'{}(), Lbl'Hash'EWOULDBLOCK'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOSPC'Unds'K-IO'Unds'{}(), Lbl'Hash'E2BIG'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOSPC'Unds'K-IO'Unds'{}(), Lbl'Hash'ENETRESET'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOSPC'Unds'K-IO'Unds'{}(), Lbl'Hash'EPERM'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOSPC'Unds'K-IO'Unds'{}(), Lbl'Hash'ENOSYS'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOSPC'Unds'K-IO'Unds'{}(), Lbl'Hash'EALREADY'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOSPC'Unds'K-IO'Unds'{}(), Lbl'Hash'EHOSTDOWN'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOSPC'Unds'K-IO'Unds'{}(), Lbl'Hash'ENOTSOCK'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOSPC'Unds'K-IO'Unds'{}(), Lbl'Hash'EDOM'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOSPC'Unds'K-IO'Unds'{}(), Lbl'Hash'ENOBUFS'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOSPC'Unds'K-IO'Unds'{}(), Lbl'Hash'ETIMEDOUT'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOSPC'Unds'K-IO'Unds'{}(), Lbl'Hash'ETOOMANYREFS'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOSPC'Unds'K-IO'Unds'{}(), Lbl'Hash'EDESTADDRREQ'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOSPC'Unds'K-IO'Unds'{}(), Lbl'Hash'ENOTTY'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOSPC'Unds'K-IO'Unds'{}(), Lbl'Hash'ECONNRESET'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOSPC'Unds'K-IO'Unds'{}(), Lbl'Hash'EMFILE'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOSPC'Unds'K-IO'Unds'{}(), Lbl'Hash'EIO'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOSPC'Unds'K-IO'Unds'{}(), Lbl'Hash'ENOEXEC'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOSPC'Unds'K-IO'Unds'{}(), Lbl'Hash'EPFNOSUPPORT'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOSPC'Unds'K-IO'Unds'{}(), Lbl'Hash'ESHUTDOWN'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOSPC'Unds'K-IO'Unds'{}(), Lbl'Hash'EINVAL'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOSPC'Unds'K-IO'Unds'{}(), Lbl'Hash'EMLINK'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOSPC'Unds'K-IO'Unds'{}(), Lbl'Hash'EISDIR'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOSPC'Unds'K-IO'Unds'{}(), Lbl'Hash'EFBIG'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOSPC'Unds'K-IO'Unds'{}(), Lbl'Hash'ENOTCONN'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOSPC'Unds'K-IO'Unds'{}(), Lbl'Hash'ENODEV'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOSPC'Unds'K-IO'Unds'{}(), Lbl'Hash'EEXIST'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOSPC'Unds'K-IO'Unds'{}(), Lbl'Hash'ELOOP'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOSPC'Unds'K-IO'Unds'{}(), Lbl'Hash'ENOTEMPTY'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOSPC'Unds'K-IO'Unds'{}(), Lbl'Hash'EHOSTUNREACH'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOSPC'Unds'K-IO'Unds'{}(), Lbl'Hash'noparse'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOSPC'Unds'K-IO'Unds'{}(), Lbl'Hash'EINTR'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOSPC'Unds'K-IO'Unds'{}(), Lbl'Hash'EMSGSIZE'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOSPC'Unds'K-IO'Unds'{}(), Lbl'Hash'ENOENT'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOSPC'Unds'K-IO'Unds'{}(), Lbl'Hash'ENOLCK'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOSPC'Unds'K-IO'Unds'{}(), Lbl'Hash'EFAULT'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOSPC'Unds'K-IO'Unds'{}(), Lbl'Hash'ERANGE'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOSPC'Unds'K-IO'Unds'{}(), Lbl'Hash'EBUSY'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOSPC'Unds'K-IO'Unds'{}(), Lbl'Hash'EINPROGRESS'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOSPC'Unds'K-IO'Unds'{}(), Lbl'Hash'ENOMEM'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOSPC'Unds'K-IO'Unds'{}(), Lbl'Hash'ENOTDIR'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOSPC'Unds'K-IO'Unds'{}(), Lbl'Hash'ENAMETOOLONG'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOSPC'Unds'K-IO'Unds'{}(), Lbl'Hash'EADDRINUSE'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOSPC'Unds'K-IO'Unds'{}(), Lbl'Hash'EROFS'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOSPC'Unds'K-IO'Unds'{}(), Lbl'Hash'EPROTONOSUPPORT'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOSPC'Unds'K-IO'Unds'{}(), Lbl'Hash'ESOCKTNOSUPPORT'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOSPC'Unds'K-IO'Unds'{}(), Lbl'Hash'ECHILD'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{R} \exists{R} (Val:SortString{}, \equals{SortString{}, R} (Val:SortString{}, Lbl'UndsPlus'String'UndsUnds'STRING'UndsUnds'String'Unds'String{}(K0:SortString{}, K1:SortString{}))) [functional{}()] // functional
  axiom{R} \exists{R} (Val:SortTCell{}, \equals{SortTCell{}, R} (Val:SortTCell{}, Lbl'-LT-'T'-GT-'{}(K0:SortKCell{}, K1:SortStateCell{}))) [functional{}()] // functional
  axiom{}\implies{SortTCell{}} (\and{SortTCell{}} (Lbl'-LT-'T'-GT-'{}(X0:SortKCell{}, X1:SortStateCell{}), Lbl'-LT-'T'-GT-'{}(Y0:SortKCell{}, Y1:SortStateCell{})), Lbl'-LT-'T'-GT-'{}(\and{SortKCell{}} (X0:SortKCell{}, Y0:SortKCell{}), \and{SortStateCell{}} (X1:SortStateCell{}, Y1:SortStateCell{}))) [constructor{}()] // no confusion same constructor
  axiom{R} \exists{R} (Val:SortBool{}, \equals{SortBool{}, R} (Val:SortBool{}, Lbl'Unds-LT-Eqls'String'UndsUnds'STRING'UndsUnds'String'Unds'String{}(K0:SortString{}, K1:SortString{}))) [functional{}()] // functional
  axiom{R} \exists{R} (Val:SortBool{}, \equals{SortBool{}, R} (Val:SortBool{}, LblSet'Coln'in{}(K0:SortK{}, K1:SortSet{}))) [functional{}()] // functional
  axiom{R} \exists{R} (Val:SortInt{}, \equals{SortInt{}, R} (Val:SortInt{}, Lbl'Hash'stdout'Unds'K-IO'Unds'{}())) [functional{}()] // functional
  axiom{R} \exists{R} (Val:SortIds{}, \equals{SortIds{}, R} (Val:SortIds{}, Lbl'Stop'List'LBraQuotUndsCommUndsUnds'IMP-SYNTAX'UndsUnds'Id'Unds'Ids'QuotRBraUnds'Ids{}())) [functional{}()] // functional
  axiom{}\not{SortIds{}} (\and{SortIds{}} (Lbl'Stop'List'LBraQuotUndsCommUndsUnds'IMP-SYNTAX'UndsUnds'Id'Unds'Ids'QuotRBraUnds'Ids{}(), Lbl'UndsCommUndsUnds'IMP-SYNTAX'UndsUnds'Id'Unds'Ids{}(Y0:SortId{}, Y1:SortIds{}))) [constructor{}()] // no confusion different constructors
  axiom{R} \exists{R} (Val:SortIOError{}, \equals{SortIOError{}, R} (Val:SortIOError{}, Lbl'Hash'EDEADLK'Unds'K-IO'Unds'{}())) [functional{}()] // functional
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EDEADLK'Unds'K-IO'Unds'{}(), Lbl'Hash'ECONNREFUSED'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EDEADLK'Unds'K-IO'Unds'{}(), Lbl'Hash'EPROTOTYPE'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EDEADLK'Unds'K-IO'Unds'{}(), Lbl'Hash'EAFNOSUPPORT'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EDEADLK'Unds'K-IO'Unds'{}(), Lbl'Hash'ENXIO'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EDEADLK'Unds'K-IO'Unds'{}(), Lbl'Hash'EWOULDBLOCK'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EDEADLK'Unds'K-IO'Unds'{}(), Lbl'Hash'E2BIG'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EDEADLK'Unds'K-IO'Unds'{}(), Lbl'Hash'ENETRESET'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EDEADLK'Unds'K-IO'Unds'{}(), Lbl'Hash'EPERM'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EDEADLK'Unds'K-IO'Unds'{}(), Lbl'Hash'ENOSYS'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EDEADLK'Unds'K-IO'Unds'{}(), Lbl'Hash'EALREADY'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EDEADLK'Unds'K-IO'Unds'{}(), Lbl'Hash'EHOSTDOWN'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EDEADLK'Unds'K-IO'Unds'{}(), Lbl'Hash'ENOTSOCK'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EDEADLK'Unds'K-IO'Unds'{}(), Lbl'Hash'EDOM'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EDEADLK'Unds'K-IO'Unds'{}(), Lbl'Hash'ENOBUFS'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EDEADLK'Unds'K-IO'Unds'{}(), Lbl'Hash'ETIMEDOUT'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EDEADLK'Unds'K-IO'Unds'{}(), Lbl'Hash'ETOOMANYREFS'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EDEADLK'Unds'K-IO'Unds'{}(), Lbl'Hash'EDESTADDRREQ'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EDEADLK'Unds'K-IO'Unds'{}(), Lbl'Hash'ENOTTY'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EDEADLK'Unds'K-IO'Unds'{}(), Lbl'Hash'ECONNRESET'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EDEADLK'Unds'K-IO'Unds'{}(), Lbl'Hash'EMFILE'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EDEADLK'Unds'K-IO'Unds'{}(), Lbl'Hash'EIO'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EDEADLK'Unds'K-IO'Unds'{}(), Lbl'Hash'ENOEXEC'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EDEADLK'Unds'K-IO'Unds'{}(), Lbl'Hash'EPFNOSUPPORT'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EDEADLK'Unds'K-IO'Unds'{}(), Lbl'Hash'ESHUTDOWN'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EDEADLK'Unds'K-IO'Unds'{}(), Lbl'Hash'EINVAL'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EDEADLK'Unds'K-IO'Unds'{}(), Lbl'Hash'EMLINK'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EDEADLK'Unds'K-IO'Unds'{}(), Lbl'Hash'EISDIR'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EDEADLK'Unds'K-IO'Unds'{}(), Lbl'Hash'EFBIG'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EDEADLK'Unds'K-IO'Unds'{}(), Lbl'Hash'ENOTCONN'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EDEADLK'Unds'K-IO'Unds'{}(), Lbl'Hash'ENODEV'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EDEADLK'Unds'K-IO'Unds'{}(), Lbl'Hash'EEXIST'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EDEADLK'Unds'K-IO'Unds'{}(), Lbl'Hash'ELOOP'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EDEADLK'Unds'K-IO'Unds'{}(), Lbl'Hash'ENOTEMPTY'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EDEADLK'Unds'K-IO'Unds'{}(), Lbl'Hash'EHOSTUNREACH'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EDEADLK'Unds'K-IO'Unds'{}(), Lbl'Hash'noparse'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EDEADLK'Unds'K-IO'Unds'{}(), Lbl'Hash'EINTR'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EDEADLK'Unds'K-IO'Unds'{}(), Lbl'Hash'EMSGSIZE'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EDEADLK'Unds'K-IO'Unds'{}(), Lbl'Hash'ENOENT'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EDEADLK'Unds'K-IO'Unds'{}(), Lbl'Hash'ENOLCK'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EDEADLK'Unds'K-IO'Unds'{}(), Lbl'Hash'EFAULT'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EDEADLK'Unds'K-IO'Unds'{}(), Lbl'Hash'ERANGE'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EDEADLK'Unds'K-IO'Unds'{}(), Lbl'Hash'EBUSY'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EDEADLK'Unds'K-IO'Unds'{}(), Lbl'Hash'EINPROGRESS'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EDEADLK'Unds'K-IO'Unds'{}(), Lbl'Hash'ENOMEM'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EDEADLK'Unds'K-IO'Unds'{}(), Lbl'Hash'ENOTDIR'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EDEADLK'Unds'K-IO'Unds'{}(), Lbl'Hash'ENAMETOOLONG'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EDEADLK'Unds'K-IO'Unds'{}(), Lbl'Hash'EADDRINUSE'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EDEADLK'Unds'K-IO'Unds'{}(), Lbl'Hash'EROFS'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EDEADLK'Unds'K-IO'Unds'{}(), Lbl'Hash'EPROTONOSUPPORT'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EDEADLK'Unds'K-IO'Unds'{}(), Lbl'Hash'ESOCKTNOSUPPORT'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EDEADLK'Unds'K-IO'Unds'{}(), Lbl'Hash'ECHILD'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{R} \exists{R} (Val:SortIOError{}, \equals{SortIOError{}, R} (Val:SortIOError{}, Lbl'Hash'ECONNREFUSED'Unds'K-IO'Unds'{}())) [functional{}()] // functional
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ECONNREFUSED'Unds'K-IO'Unds'{}(), Lbl'Hash'EPROTOTYPE'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ECONNREFUSED'Unds'K-IO'Unds'{}(), Lbl'Hash'EAFNOSUPPORT'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ECONNREFUSED'Unds'K-IO'Unds'{}(), Lbl'Hash'ENXIO'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ECONNREFUSED'Unds'K-IO'Unds'{}(), Lbl'Hash'EWOULDBLOCK'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ECONNREFUSED'Unds'K-IO'Unds'{}(), Lbl'Hash'E2BIG'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ECONNREFUSED'Unds'K-IO'Unds'{}(), Lbl'Hash'ENETRESET'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ECONNREFUSED'Unds'K-IO'Unds'{}(), Lbl'Hash'EPERM'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ECONNREFUSED'Unds'K-IO'Unds'{}(), Lbl'Hash'ENOSYS'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ECONNREFUSED'Unds'K-IO'Unds'{}(), Lbl'Hash'EALREADY'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ECONNREFUSED'Unds'K-IO'Unds'{}(), Lbl'Hash'EHOSTDOWN'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ECONNREFUSED'Unds'K-IO'Unds'{}(), Lbl'Hash'ENOTSOCK'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ECONNREFUSED'Unds'K-IO'Unds'{}(), Lbl'Hash'EDOM'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ECONNREFUSED'Unds'K-IO'Unds'{}(), Lbl'Hash'ENOBUFS'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ECONNREFUSED'Unds'K-IO'Unds'{}(), Lbl'Hash'ETIMEDOUT'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ECONNREFUSED'Unds'K-IO'Unds'{}(), Lbl'Hash'ETOOMANYREFS'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ECONNREFUSED'Unds'K-IO'Unds'{}(), Lbl'Hash'EDESTADDRREQ'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ECONNREFUSED'Unds'K-IO'Unds'{}(), Lbl'Hash'ENOTTY'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ECONNREFUSED'Unds'K-IO'Unds'{}(), Lbl'Hash'ECONNRESET'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ECONNREFUSED'Unds'K-IO'Unds'{}(), Lbl'Hash'EMFILE'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ECONNREFUSED'Unds'K-IO'Unds'{}(), Lbl'Hash'EIO'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ECONNREFUSED'Unds'K-IO'Unds'{}(), Lbl'Hash'ENOEXEC'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ECONNREFUSED'Unds'K-IO'Unds'{}(), Lbl'Hash'EPFNOSUPPORT'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ECONNREFUSED'Unds'K-IO'Unds'{}(), Lbl'Hash'ESHUTDOWN'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ECONNREFUSED'Unds'K-IO'Unds'{}(), Lbl'Hash'EINVAL'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ECONNREFUSED'Unds'K-IO'Unds'{}(), Lbl'Hash'EMLINK'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ECONNREFUSED'Unds'K-IO'Unds'{}(), Lbl'Hash'EISDIR'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ECONNREFUSED'Unds'K-IO'Unds'{}(), Lbl'Hash'EFBIG'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ECONNREFUSED'Unds'K-IO'Unds'{}(), Lbl'Hash'ENOTCONN'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ECONNREFUSED'Unds'K-IO'Unds'{}(), Lbl'Hash'ENODEV'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ECONNREFUSED'Unds'K-IO'Unds'{}(), Lbl'Hash'EEXIST'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ECONNREFUSED'Unds'K-IO'Unds'{}(), Lbl'Hash'ELOOP'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ECONNREFUSED'Unds'K-IO'Unds'{}(), Lbl'Hash'ENOTEMPTY'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ECONNREFUSED'Unds'K-IO'Unds'{}(), Lbl'Hash'EHOSTUNREACH'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ECONNREFUSED'Unds'K-IO'Unds'{}(), Lbl'Hash'noparse'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ECONNREFUSED'Unds'K-IO'Unds'{}(), Lbl'Hash'EINTR'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ECONNREFUSED'Unds'K-IO'Unds'{}(), Lbl'Hash'EMSGSIZE'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ECONNREFUSED'Unds'K-IO'Unds'{}(), Lbl'Hash'ENOENT'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ECONNREFUSED'Unds'K-IO'Unds'{}(), Lbl'Hash'ENOLCK'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ECONNREFUSED'Unds'K-IO'Unds'{}(), Lbl'Hash'EFAULT'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ECONNREFUSED'Unds'K-IO'Unds'{}(), Lbl'Hash'ERANGE'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ECONNREFUSED'Unds'K-IO'Unds'{}(), Lbl'Hash'EBUSY'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ECONNREFUSED'Unds'K-IO'Unds'{}(), Lbl'Hash'EINPROGRESS'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ECONNREFUSED'Unds'K-IO'Unds'{}(), Lbl'Hash'ENOMEM'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ECONNREFUSED'Unds'K-IO'Unds'{}(), Lbl'Hash'ENOTDIR'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ECONNREFUSED'Unds'K-IO'Unds'{}(), Lbl'Hash'ENAMETOOLONG'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ECONNREFUSED'Unds'K-IO'Unds'{}(), Lbl'Hash'EADDRINUSE'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ECONNREFUSED'Unds'K-IO'Unds'{}(), Lbl'Hash'EROFS'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ECONNREFUSED'Unds'K-IO'Unds'{}(), Lbl'Hash'EPROTONOSUPPORT'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ECONNREFUSED'Unds'K-IO'Unds'{}(), Lbl'Hash'ESOCKTNOSUPPORT'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ECONNREFUSED'Unds'K-IO'Unds'{}(), Lbl'Hash'ECHILD'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{R} \exists{R} (Val:SortK{}, \equals{SortK{}, R} (Val:SortK{}, Lbl'UndsLSqBUndsRSqB'orDefault'UndsUnds'MAP'UndsUnds'Map'Unds'K'Unds'K{}(K0:SortMap{}, K1:SortK{}, K2:SortK{}))) [functional{}()] // functional
  axiom{R} \exists{R} (Val:SortBool{}, \equals{SortBool{}, R} (Val:SortBool{}, Lbl'Unds'orBool'UndsUnds'BOOL'UndsUnds'Bool'Unds'Bool{}(K0:SortBool{}, K1:SortBool{}))) [functional{}()] // functional
  axiom{R} \exists{R} (Val:SortIOError{}, \equals{SortIOError{}, R} (Val:SortIOError{}, Lbl'Hash'EPROTOTYPE'Unds'K-IO'Unds'{}())) [functional{}()] // functional
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EPROTOTYPE'Unds'K-IO'Unds'{}(), Lbl'Hash'EAFNOSUPPORT'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EPROTOTYPE'Unds'K-IO'Unds'{}(), Lbl'Hash'ENXIO'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EPROTOTYPE'Unds'K-IO'Unds'{}(), Lbl'Hash'EWOULDBLOCK'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EPROTOTYPE'Unds'K-IO'Unds'{}(), Lbl'Hash'E2BIG'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EPROTOTYPE'Unds'K-IO'Unds'{}(), Lbl'Hash'ENETRESET'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EPROTOTYPE'Unds'K-IO'Unds'{}(), Lbl'Hash'EPERM'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EPROTOTYPE'Unds'K-IO'Unds'{}(), Lbl'Hash'ENOSYS'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EPROTOTYPE'Unds'K-IO'Unds'{}(), Lbl'Hash'EALREADY'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EPROTOTYPE'Unds'K-IO'Unds'{}(), Lbl'Hash'EHOSTDOWN'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EPROTOTYPE'Unds'K-IO'Unds'{}(), Lbl'Hash'ENOTSOCK'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EPROTOTYPE'Unds'K-IO'Unds'{}(), Lbl'Hash'EDOM'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EPROTOTYPE'Unds'K-IO'Unds'{}(), Lbl'Hash'ENOBUFS'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EPROTOTYPE'Unds'K-IO'Unds'{}(), Lbl'Hash'ETIMEDOUT'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EPROTOTYPE'Unds'K-IO'Unds'{}(), Lbl'Hash'ETOOMANYREFS'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EPROTOTYPE'Unds'K-IO'Unds'{}(), Lbl'Hash'EDESTADDRREQ'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EPROTOTYPE'Unds'K-IO'Unds'{}(), Lbl'Hash'ENOTTY'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EPROTOTYPE'Unds'K-IO'Unds'{}(), Lbl'Hash'ECONNRESET'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EPROTOTYPE'Unds'K-IO'Unds'{}(), Lbl'Hash'EMFILE'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EPROTOTYPE'Unds'K-IO'Unds'{}(), Lbl'Hash'EIO'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EPROTOTYPE'Unds'K-IO'Unds'{}(), Lbl'Hash'ENOEXEC'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EPROTOTYPE'Unds'K-IO'Unds'{}(), Lbl'Hash'EPFNOSUPPORT'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EPROTOTYPE'Unds'K-IO'Unds'{}(), Lbl'Hash'ESHUTDOWN'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EPROTOTYPE'Unds'K-IO'Unds'{}(), Lbl'Hash'EINVAL'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EPROTOTYPE'Unds'K-IO'Unds'{}(), Lbl'Hash'EMLINK'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EPROTOTYPE'Unds'K-IO'Unds'{}(), Lbl'Hash'EISDIR'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EPROTOTYPE'Unds'K-IO'Unds'{}(), Lbl'Hash'EFBIG'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EPROTOTYPE'Unds'K-IO'Unds'{}(), Lbl'Hash'ENOTCONN'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EPROTOTYPE'Unds'K-IO'Unds'{}(), Lbl'Hash'ENODEV'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EPROTOTYPE'Unds'K-IO'Unds'{}(), Lbl'Hash'EEXIST'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EPROTOTYPE'Unds'K-IO'Unds'{}(), Lbl'Hash'ELOOP'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EPROTOTYPE'Unds'K-IO'Unds'{}(), Lbl'Hash'ENOTEMPTY'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EPROTOTYPE'Unds'K-IO'Unds'{}(), Lbl'Hash'EHOSTUNREACH'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EPROTOTYPE'Unds'K-IO'Unds'{}(), Lbl'Hash'noparse'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EPROTOTYPE'Unds'K-IO'Unds'{}(), Lbl'Hash'EINTR'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EPROTOTYPE'Unds'K-IO'Unds'{}(), Lbl'Hash'EMSGSIZE'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EPROTOTYPE'Unds'K-IO'Unds'{}(), Lbl'Hash'ENOENT'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EPROTOTYPE'Unds'K-IO'Unds'{}(), Lbl'Hash'ENOLCK'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EPROTOTYPE'Unds'K-IO'Unds'{}(), Lbl'Hash'EFAULT'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EPROTOTYPE'Unds'K-IO'Unds'{}(), Lbl'Hash'ERANGE'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EPROTOTYPE'Unds'K-IO'Unds'{}(), Lbl'Hash'EBUSY'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EPROTOTYPE'Unds'K-IO'Unds'{}(), Lbl'Hash'EINPROGRESS'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EPROTOTYPE'Unds'K-IO'Unds'{}(), Lbl'Hash'ENOMEM'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EPROTOTYPE'Unds'K-IO'Unds'{}(), Lbl'Hash'ENOTDIR'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EPROTOTYPE'Unds'K-IO'Unds'{}(), Lbl'Hash'ENAMETOOLONG'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EPROTOTYPE'Unds'K-IO'Unds'{}(), Lbl'Hash'EADDRINUSE'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EPROTOTYPE'Unds'K-IO'Unds'{}(), Lbl'Hash'EROFS'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EPROTOTYPE'Unds'K-IO'Unds'{}(), Lbl'Hash'EPROTONOSUPPORT'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EPROTOTYPE'Unds'K-IO'Unds'{}(), Lbl'Hash'ESOCKTNOSUPPORT'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EPROTOTYPE'Unds'K-IO'Unds'{}(), Lbl'Hash'ECHILD'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{R} \exists{R} (Val:SortIOError{}, \equals{SortIOError{}, R} (Val:SortIOError{}, Lbl'Hash'EAFNOSUPPORT'Unds'K-IO'Unds'{}())) [functional{}()] // functional
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EAFNOSUPPORT'Unds'K-IO'Unds'{}(), Lbl'Hash'ENXIO'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EAFNOSUPPORT'Unds'K-IO'Unds'{}(), Lbl'Hash'EWOULDBLOCK'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EAFNOSUPPORT'Unds'K-IO'Unds'{}(), Lbl'Hash'E2BIG'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EAFNOSUPPORT'Unds'K-IO'Unds'{}(), Lbl'Hash'ENETRESET'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EAFNOSUPPORT'Unds'K-IO'Unds'{}(), Lbl'Hash'EPERM'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EAFNOSUPPORT'Unds'K-IO'Unds'{}(), Lbl'Hash'ENOSYS'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EAFNOSUPPORT'Unds'K-IO'Unds'{}(), Lbl'Hash'EALREADY'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EAFNOSUPPORT'Unds'K-IO'Unds'{}(), Lbl'Hash'EHOSTDOWN'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EAFNOSUPPORT'Unds'K-IO'Unds'{}(), Lbl'Hash'ENOTSOCK'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EAFNOSUPPORT'Unds'K-IO'Unds'{}(), Lbl'Hash'EDOM'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EAFNOSUPPORT'Unds'K-IO'Unds'{}(), Lbl'Hash'ENOBUFS'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EAFNOSUPPORT'Unds'K-IO'Unds'{}(), Lbl'Hash'ETIMEDOUT'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EAFNOSUPPORT'Unds'K-IO'Unds'{}(), Lbl'Hash'ETOOMANYREFS'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EAFNOSUPPORT'Unds'K-IO'Unds'{}(), Lbl'Hash'EDESTADDRREQ'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EAFNOSUPPORT'Unds'K-IO'Unds'{}(), Lbl'Hash'ENOTTY'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EAFNOSUPPORT'Unds'K-IO'Unds'{}(), Lbl'Hash'ECONNRESET'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EAFNOSUPPORT'Unds'K-IO'Unds'{}(), Lbl'Hash'EMFILE'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EAFNOSUPPORT'Unds'K-IO'Unds'{}(), Lbl'Hash'EIO'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EAFNOSUPPORT'Unds'K-IO'Unds'{}(), Lbl'Hash'ENOEXEC'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EAFNOSUPPORT'Unds'K-IO'Unds'{}(), Lbl'Hash'EPFNOSUPPORT'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EAFNOSUPPORT'Unds'K-IO'Unds'{}(), Lbl'Hash'ESHUTDOWN'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EAFNOSUPPORT'Unds'K-IO'Unds'{}(), Lbl'Hash'EINVAL'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EAFNOSUPPORT'Unds'K-IO'Unds'{}(), Lbl'Hash'EMLINK'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EAFNOSUPPORT'Unds'K-IO'Unds'{}(), Lbl'Hash'EISDIR'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EAFNOSUPPORT'Unds'K-IO'Unds'{}(), Lbl'Hash'EFBIG'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EAFNOSUPPORT'Unds'K-IO'Unds'{}(), Lbl'Hash'ENOTCONN'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EAFNOSUPPORT'Unds'K-IO'Unds'{}(), Lbl'Hash'ENODEV'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EAFNOSUPPORT'Unds'K-IO'Unds'{}(), Lbl'Hash'EEXIST'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EAFNOSUPPORT'Unds'K-IO'Unds'{}(), Lbl'Hash'ELOOP'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EAFNOSUPPORT'Unds'K-IO'Unds'{}(), Lbl'Hash'ENOTEMPTY'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EAFNOSUPPORT'Unds'K-IO'Unds'{}(), Lbl'Hash'EHOSTUNREACH'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EAFNOSUPPORT'Unds'K-IO'Unds'{}(), Lbl'Hash'noparse'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EAFNOSUPPORT'Unds'K-IO'Unds'{}(), Lbl'Hash'EINTR'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EAFNOSUPPORT'Unds'K-IO'Unds'{}(), Lbl'Hash'EMSGSIZE'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EAFNOSUPPORT'Unds'K-IO'Unds'{}(), Lbl'Hash'ENOENT'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EAFNOSUPPORT'Unds'K-IO'Unds'{}(), Lbl'Hash'ENOLCK'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EAFNOSUPPORT'Unds'K-IO'Unds'{}(), Lbl'Hash'EFAULT'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EAFNOSUPPORT'Unds'K-IO'Unds'{}(), Lbl'Hash'ERANGE'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EAFNOSUPPORT'Unds'K-IO'Unds'{}(), Lbl'Hash'EBUSY'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EAFNOSUPPORT'Unds'K-IO'Unds'{}(), Lbl'Hash'EINPROGRESS'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EAFNOSUPPORT'Unds'K-IO'Unds'{}(), Lbl'Hash'ENOMEM'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EAFNOSUPPORT'Unds'K-IO'Unds'{}(), Lbl'Hash'ENOTDIR'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EAFNOSUPPORT'Unds'K-IO'Unds'{}(), Lbl'Hash'ENAMETOOLONG'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EAFNOSUPPORT'Unds'K-IO'Unds'{}(), Lbl'Hash'EADDRINUSE'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EAFNOSUPPORT'Unds'K-IO'Unds'{}(), Lbl'Hash'EROFS'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EAFNOSUPPORT'Unds'K-IO'Unds'{}(), Lbl'Hash'EPROTONOSUPPORT'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EAFNOSUPPORT'Unds'K-IO'Unds'{}(), Lbl'Hash'ESOCKTNOSUPPORT'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EAFNOSUPPORT'Unds'K-IO'Unds'{}(), Lbl'Hash'ECHILD'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{R} \exists{R} (Val:SortBool{}, \equals{SortBool{}, R} (Val:SortBool{}, Lbl'Unds'andThenBool'UndsUnds'BOOL'UndsUnds'Bool'Unds'Bool{}(K0:SortBool{}, K1:SortBool{}))) [functional{}()] // functional
  axiom{R} \exists{R} (Val:SortBExp{}, \equals{SortBExp{}, R} (Val:SortBExp{}, Lbl'Unds-LT-EqlsUndsUnds'IMP-SYNTAX'UndsUnds'AExp'Unds'AExp{}(K0:SortAExp{}, K1:SortAExp{}))) [functional{}()] // functional
  axiom{}\implies{SortBExp{}} (\and{SortBExp{}} (Lbl'Unds-LT-EqlsUndsUnds'IMP-SYNTAX'UndsUnds'AExp'Unds'AExp{}(X0:SortAExp{}, X1:SortAExp{}), Lbl'Unds-LT-EqlsUndsUnds'IMP-SYNTAX'UndsUnds'AExp'Unds'AExp{}(Y0:SortAExp{}, Y1:SortAExp{})), Lbl'Unds-LT-EqlsUndsUnds'IMP-SYNTAX'UndsUnds'AExp'Unds'AExp{}(\and{SortAExp{}} (X0:SortAExp{}, Y0:SortAExp{}), \and{SortAExp{}} (X1:SortAExp{}, Y1:SortAExp{}))) [constructor{}()] // no confusion same constructor
  axiom{}\not{SortBExp{}} (\and{SortBExp{}} (Lbl'Unds-LT-EqlsUndsUnds'IMP-SYNTAX'UndsUnds'AExp'Unds'AExp{}(X0:SortAExp{}, X1:SortAExp{}), Lbl'UndsAndAndUndsUnds'IMP-SYNTAX'UndsUnds'BExp'Unds'BExp{}(Y0:SortBExp{}, Y1:SortBExp{}))) [constructor{}()] // no confusion different constructors
  axiom{R} \exists{R} (Val:SortIOError{}, \equals{SortIOError{}, R} (Val:SortIOError{}, Lbl'Hash'ENXIO'Unds'K-IO'Unds'{}())) [functional{}()] // functional
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENXIO'Unds'K-IO'Unds'{}(), Lbl'Hash'EWOULDBLOCK'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENXIO'Unds'K-IO'Unds'{}(), Lbl'Hash'E2BIG'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENXIO'Unds'K-IO'Unds'{}(), Lbl'Hash'ENETRESET'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENXIO'Unds'K-IO'Unds'{}(), Lbl'Hash'EPERM'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENXIO'Unds'K-IO'Unds'{}(), Lbl'Hash'ENOSYS'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENXIO'Unds'K-IO'Unds'{}(), Lbl'Hash'EALREADY'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENXIO'Unds'K-IO'Unds'{}(), Lbl'Hash'EHOSTDOWN'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENXIO'Unds'K-IO'Unds'{}(), Lbl'Hash'ENOTSOCK'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENXIO'Unds'K-IO'Unds'{}(), Lbl'Hash'EDOM'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENXIO'Unds'K-IO'Unds'{}(), Lbl'Hash'ENOBUFS'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENXIO'Unds'K-IO'Unds'{}(), Lbl'Hash'ETIMEDOUT'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENXIO'Unds'K-IO'Unds'{}(), Lbl'Hash'ETOOMANYREFS'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENXIO'Unds'K-IO'Unds'{}(), Lbl'Hash'EDESTADDRREQ'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENXIO'Unds'K-IO'Unds'{}(), Lbl'Hash'ENOTTY'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENXIO'Unds'K-IO'Unds'{}(), Lbl'Hash'ECONNRESET'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENXIO'Unds'K-IO'Unds'{}(), Lbl'Hash'EMFILE'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENXIO'Unds'K-IO'Unds'{}(), Lbl'Hash'EIO'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENXIO'Unds'K-IO'Unds'{}(), Lbl'Hash'ENOEXEC'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENXIO'Unds'K-IO'Unds'{}(), Lbl'Hash'EPFNOSUPPORT'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENXIO'Unds'K-IO'Unds'{}(), Lbl'Hash'ESHUTDOWN'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENXIO'Unds'K-IO'Unds'{}(), Lbl'Hash'EINVAL'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENXIO'Unds'K-IO'Unds'{}(), Lbl'Hash'EMLINK'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENXIO'Unds'K-IO'Unds'{}(), Lbl'Hash'EISDIR'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENXIO'Unds'K-IO'Unds'{}(), Lbl'Hash'EFBIG'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENXIO'Unds'K-IO'Unds'{}(), Lbl'Hash'ENOTCONN'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENXIO'Unds'K-IO'Unds'{}(), Lbl'Hash'ENODEV'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENXIO'Unds'K-IO'Unds'{}(), Lbl'Hash'EEXIST'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENXIO'Unds'K-IO'Unds'{}(), Lbl'Hash'ELOOP'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENXIO'Unds'K-IO'Unds'{}(), Lbl'Hash'ENOTEMPTY'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENXIO'Unds'K-IO'Unds'{}(), Lbl'Hash'EHOSTUNREACH'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENXIO'Unds'K-IO'Unds'{}(), Lbl'Hash'noparse'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENXIO'Unds'K-IO'Unds'{}(), Lbl'Hash'EINTR'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENXIO'Unds'K-IO'Unds'{}(), Lbl'Hash'EMSGSIZE'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENXIO'Unds'K-IO'Unds'{}(), Lbl'Hash'ENOENT'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENXIO'Unds'K-IO'Unds'{}(), Lbl'Hash'ENOLCK'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENXIO'Unds'K-IO'Unds'{}(), Lbl'Hash'EFAULT'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENXIO'Unds'K-IO'Unds'{}(), Lbl'Hash'ERANGE'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENXIO'Unds'K-IO'Unds'{}(), Lbl'Hash'EBUSY'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENXIO'Unds'K-IO'Unds'{}(), Lbl'Hash'EINPROGRESS'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENXIO'Unds'K-IO'Unds'{}(), Lbl'Hash'ENOMEM'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENXIO'Unds'K-IO'Unds'{}(), Lbl'Hash'ENOTDIR'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENXIO'Unds'K-IO'Unds'{}(), Lbl'Hash'ENAMETOOLONG'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENXIO'Unds'K-IO'Unds'{}(), Lbl'Hash'EADDRINUSE'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENXIO'Unds'K-IO'Unds'{}(), Lbl'Hash'EROFS'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENXIO'Unds'K-IO'Unds'{}(), Lbl'Hash'EPROTONOSUPPORT'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENXIO'Unds'K-IO'Unds'{}(), Lbl'Hash'ESOCKTNOSUPPORT'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENXIO'Unds'K-IO'Unds'{}(), Lbl'Hash'ECHILD'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{R} \equals{SortMap{}, R} (Lbl'Unds'Map'Unds'{}(Lbl'Unds'Map'Unds'{}(K1:SortMap{},K2:SortMap{}),K3:SortMap{}),Lbl'Unds'Map'Unds'{}(K1:SortMap{},Lbl'Unds'Map'Unds'{}(K2:SortMap{},K3:SortMap{}))) [assoc{}()] // associativity
  axiom{R} \equals{SortMap{}, R} (Lbl'Unds'Map'Unds'{}(K1:SortMap{},K2:SortMap{}),Lbl'Unds'Map'Unds'{}(K2:SortMap{},K1:SortMap{})) [comm{}()] // commutativity
  axiom{R} \exists{R} (Val:SortMap{}, \equals{SortMap{}, R} (Val:SortMap{}, Lbl'Unds'Map'Unds'{}(K0:SortMap{}, K1:SortMap{}))) [functional{}()] // functional
  axiom{R} \exists{R} (Val:SortIOError{}, \equals{SortIOError{}, R} (Val:SortIOError{}, Lbl'Hash'EWOULDBLOCK'Unds'K-IO'Unds'{}())) [functional{}()] // functional
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EWOULDBLOCK'Unds'K-IO'Unds'{}(), Lbl'Hash'E2BIG'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EWOULDBLOCK'Unds'K-IO'Unds'{}(), Lbl'Hash'ENETRESET'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EWOULDBLOCK'Unds'K-IO'Unds'{}(), Lbl'Hash'EPERM'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EWOULDBLOCK'Unds'K-IO'Unds'{}(), Lbl'Hash'ENOSYS'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EWOULDBLOCK'Unds'K-IO'Unds'{}(), Lbl'Hash'EALREADY'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EWOULDBLOCK'Unds'K-IO'Unds'{}(), Lbl'Hash'EHOSTDOWN'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EWOULDBLOCK'Unds'K-IO'Unds'{}(), Lbl'Hash'ENOTSOCK'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EWOULDBLOCK'Unds'K-IO'Unds'{}(), Lbl'Hash'EDOM'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EWOULDBLOCK'Unds'K-IO'Unds'{}(), Lbl'Hash'ENOBUFS'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EWOULDBLOCK'Unds'K-IO'Unds'{}(), Lbl'Hash'ETIMEDOUT'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EWOULDBLOCK'Unds'K-IO'Unds'{}(), Lbl'Hash'ETOOMANYREFS'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EWOULDBLOCK'Unds'K-IO'Unds'{}(), Lbl'Hash'EDESTADDRREQ'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EWOULDBLOCK'Unds'K-IO'Unds'{}(), Lbl'Hash'ENOTTY'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EWOULDBLOCK'Unds'K-IO'Unds'{}(), Lbl'Hash'ECONNRESET'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EWOULDBLOCK'Unds'K-IO'Unds'{}(), Lbl'Hash'EMFILE'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EWOULDBLOCK'Unds'K-IO'Unds'{}(), Lbl'Hash'EIO'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EWOULDBLOCK'Unds'K-IO'Unds'{}(), Lbl'Hash'ENOEXEC'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EWOULDBLOCK'Unds'K-IO'Unds'{}(), Lbl'Hash'EPFNOSUPPORT'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EWOULDBLOCK'Unds'K-IO'Unds'{}(), Lbl'Hash'ESHUTDOWN'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EWOULDBLOCK'Unds'K-IO'Unds'{}(), Lbl'Hash'EINVAL'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EWOULDBLOCK'Unds'K-IO'Unds'{}(), Lbl'Hash'EMLINK'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EWOULDBLOCK'Unds'K-IO'Unds'{}(), Lbl'Hash'EISDIR'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EWOULDBLOCK'Unds'K-IO'Unds'{}(), Lbl'Hash'EFBIG'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EWOULDBLOCK'Unds'K-IO'Unds'{}(), Lbl'Hash'ENOTCONN'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EWOULDBLOCK'Unds'K-IO'Unds'{}(), Lbl'Hash'ENODEV'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EWOULDBLOCK'Unds'K-IO'Unds'{}(), Lbl'Hash'EEXIST'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EWOULDBLOCK'Unds'K-IO'Unds'{}(), Lbl'Hash'ELOOP'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EWOULDBLOCK'Unds'K-IO'Unds'{}(), Lbl'Hash'ENOTEMPTY'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EWOULDBLOCK'Unds'K-IO'Unds'{}(), Lbl'Hash'EHOSTUNREACH'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EWOULDBLOCK'Unds'K-IO'Unds'{}(), Lbl'Hash'noparse'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EWOULDBLOCK'Unds'K-IO'Unds'{}(), Lbl'Hash'EINTR'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EWOULDBLOCK'Unds'K-IO'Unds'{}(), Lbl'Hash'EMSGSIZE'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EWOULDBLOCK'Unds'K-IO'Unds'{}(), Lbl'Hash'ENOENT'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EWOULDBLOCK'Unds'K-IO'Unds'{}(), Lbl'Hash'ENOLCK'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EWOULDBLOCK'Unds'K-IO'Unds'{}(), Lbl'Hash'EFAULT'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EWOULDBLOCK'Unds'K-IO'Unds'{}(), Lbl'Hash'ERANGE'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EWOULDBLOCK'Unds'K-IO'Unds'{}(), Lbl'Hash'EBUSY'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EWOULDBLOCK'Unds'K-IO'Unds'{}(), Lbl'Hash'EINPROGRESS'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EWOULDBLOCK'Unds'K-IO'Unds'{}(), Lbl'Hash'ENOMEM'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EWOULDBLOCK'Unds'K-IO'Unds'{}(), Lbl'Hash'ENOTDIR'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EWOULDBLOCK'Unds'K-IO'Unds'{}(), Lbl'Hash'ENAMETOOLONG'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EWOULDBLOCK'Unds'K-IO'Unds'{}(), Lbl'Hash'EADDRINUSE'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EWOULDBLOCK'Unds'K-IO'Unds'{}(), Lbl'Hash'EROFS'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EWOULDBLOCK'Unds'K-IO'Unds'{}(), Lbl'Hash'EPROTONOSUPPORT'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EWOULDBLOCK'Unds'K-IO'Unds'{}(), Lbl'Hash'ESOCKTNOSUPPORT'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EWOULDBLOCK'Unds'K-IO'Unds'{}(), Lbl'Hash'ECHILD'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{R} \equals{SortList{}, R} (Lbl'Unds'List'Unds'{}(Lbl'Unds'List'Unds'{}(K1:SortList{},K2:SortList{}),K3:SortList{}),Lbl'Unds'List'Unds'{}(K1:SortList{},Lbl'Unds'List'Unds'{}(K2:SortList{},K3:SortList{}))) [assoc{}()] // associativity
  axiom{R} \exists{R} (Val:SortList{}, \equals{SortList{}, R} (Val:SortList{}, Lbl'Unds'List'Unds'{}(K0:SortList{}, K1:SortList{}))) [functional{}()] // functional
  axiom{R} \exists{R} (Val:SortString{}, \equals{SortString{}, R} (Val:SortString{}, LblInt2String'LParUndsRParUnds'STRING'UndsUnds'Int{}(K0:SortInt{}))) [functional{}()] // functional
  axiom{R} \exists{R} (Val:SortIOError{}, \equals{SortIOError{}, R} (Val:SortIOError{}, Lbl'Hash'E2BIG'Unds'K-IO'Unds'{}())) [functional{}()] // functional
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'E2BIG'Unds'K-IO'Unds'{}(), Lbl'Hash'ENETRESET'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'E2BIG'Unds'K-IO'Unds'{}(), Lbl'Hash'EPERM'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'E2BIG'Unds'K-IO'Unds'{}(), Lbl'Hash'ENOSYS'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'E2BIG'Unds'K-IO'Unds'{}(), Lbl'Hash'EALREADY'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'E2BIG'Unds'K-IO'Unds'{}(), Lbl'Hash'EHOSTDOWN'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'E2BIG'Unds'K-IO'Unds'{}(), Lbl'Hash'ENOTSOCK'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'E2BIG'Unds'K-IO'Unds'{}(), Lbl'Hash'EDOM'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'E2BIG'Unds'K-IO'Unds'{}(), Lbl'Hash'ENOBUFS'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'E2BIG'Unds'K-IO'Unds'{}(), Lbl'Hash'ETIMEDOUT'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'E2BIG'Unds'K-IO'Unds'{}(), Lbl'Hash'ETOOMANYREFS'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'E2BIG'Unds'K-IO'Unds'{}(), Lbl'Hash'EDESTADDRREQ'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'E2BIG'Unds'K-IO'Unds'{}(), Lbl'Hash'ENOTTY'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'E2BIG'Unds'K-IO'Unds'{}(), Lbl'Hash'ECONNRESET'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'E2BIG'Unds'K-IO'Unds'{}(), Lbl'Hash'EMFILE'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'E2BIG'Unds'K-IO'Unds'{}(), Lbl'Hash'EIO'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'E2BIG'Unds'K-IO'Unds'{}(), Lbl'Hash'ENOEXEC'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'E2BIG'Unds'K-IO'Unds'{}(), Lbl'Hash'EPFNOSUPPORT'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'E2BIG'Unds'K-IO'Unds'{}(), Lbl'Hash'ESHUTDOWN'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'E2BIG'Unds'K-IO'Unds'{}(), Lbl'Hash'EINVAL'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'E2BIG'Unds'K-IO'Unds'{}(), Lbl'Hash'EMLINK'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'E2BIG'Unds'K-IO'Unds'{}(), Lbl'Hash'EISDIR'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'E2BIG'Unds'K-IO'Unds'{}(), Lbl'Hash'EFBIG'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'E2BIG'Unds'K-IO'Unds'{}(), Lbl'Hash'ENOTCONN'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'E2BIG'Unds'K-IO'Unds'{}(), Lbl'Hash'ENODEV'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'E2BIG'Unds'K-IO'Unds'{}(), Lbl'Hash'EEXIST'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'E2BIG'Unds'K-IO'Unds'{}(), Lbl'Hash'ELOOP'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'E2BIG'Unds'K-IO'Unds'{}(), Lbl'Hash'ENOTEMPTY'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'E2BIG'Unds'K-IO'Unds'{}(), Lbl'Hash'EHOSTUNREACH'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'E2BIG'Unds'K-IO'Unds'{}(), Lbl'Hash'noparse'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'E2BIG'Unds'K-IO'Unds'{}(), Lbl'Hash'EINTR'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'E2BIG'Unds'K-IO'Unds'{}(), Lbl'Hash'EMSGSIZE'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'E2BIG'Unds'K-IO'Unds'{}(), Lbl'Hash'ENOENT'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'E2BIG'Unds'K-IO'Unds'{}(), Lbl'Hash'ENOLCK'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'E2BIG'Unds'K-IO'Unds'{}(), Lbl'Hash'EFAULT'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'E2BIG'Unds'K-IO'Unds'{}(), Lbl'Hash'ERANGE'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'E2BIG'Unds'K-IO'Unds'{}(), Lbl'Hash'EBUSY'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'E2BIG'Unds'K-IO'Unds'{}(), Lbl'Hash'EINPROGRESS'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'E2BIG'Unds'K-IO'Unds'{}(), Lbl'Hash'ENOMEM'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'E2BIG'Unds'K-IO'Unds'{}(), Lbl'Hash'ENOTDIR'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'E2BIG'Unds'K-IO'Unds'{}(), Lbl'Hash'ENAMETOOLONG'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'E2BIG'Unds'K-IO'Unds'{}(), Lbl'Hash'EADDRINUSE'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'E2BIG'Unds'K-IO'Unds'{}(), Lbl'Hash'EROFS'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'E2BIG'Unds'K-IO'Unds'{}(), Lbl'Hash'EPROTONOSUPPORT'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'E2BIG'Unds'K-IO'Unds'{}(), Lbl'Hash'ESOCKTNOSUPPORT'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'E2BIG'Unds'K-IO'Unds'{}(), Lbl'Hash'ECHILD'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{R} \exists{R} (Val:SortIOError{}, \equals{SortIOError{}, R} (Val:SortIOError{}, Lbl'Hash'ENETRESET'Unds'K-IO'Unds'{}())) [functional{}()] // functional
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENETRESET'Unds'K-IO'Unds'{}(), Lbl'Hash'EPERM'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENETRESET'Unds'K-IO'Unds'{}(), Lbl'Hash'ENOSYS'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENETRESET'Unds'K-IO'Unds'{}(), Lbl'Hash'EALREADY'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENETRESET'Unds'K-IO'Unds'{}(), Lbl'Hash'EHOSTDOWN'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENETRESET'Unds'K-IO'Unds'{}(), Lbl'Hash'ENOTSOCK'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENETRESET'Unds'K-IO'Unds'{}(), Lbl'Hash'EDOM'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENETRESET'Unds'K-IO'Unds'{}(), Lbl'Hash'ENOBUFS'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENETRESET'Unds'K-IO'Unds'{}(), Lbl'Hash'ETIMEDOUT'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENETRESET'Unds'K-IO'Unds'{}(), Lbl'Hash'ETOOMANYREFS'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENETRESET'Unds'K-IO'Unds'{}(), Lbl'Hash'EDESTADDRREQ'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENETRESET'Unds'K-IO'Unds'{}(), Lbl'Hash'ENOTTY'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENETRESET'Unds'K-IO'Unds'{}(), Lbl'Hash'ECONNRESET'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENETRESET'Unds'K-IO'Unds'{}(), Lbl'Hash'EMFILE'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENETRESET'Unds'K-IO'Unds'{}(), Lbl'Hash'EIO'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENETRESET'Unds'K-IO'Unds'{}(), Lbl'Hash'ENOEXEC'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENETRESET'Unds'K-IO'Unds'{}(), Lbl'Hash'EPFNOSUPPORT'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENETRESET'Unds'K-IO'Unds'{}(), Lbl'Hash'ESHUTDOWN'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENETRESET'Unds'K-IO'Unds'{}(), Lbl'Hash'EINVAL'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENETRESET'Unds'K-IO'Unds'{}(), Lbl'Hash'EMLINK'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENETRESET'Unds'K-IO'Unds'{}(), Lbl'Hash'EISDIR'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENETRESET'Unds'K-IO'Unds'{}(), Lbl'Hash'EFBIG'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENETRESET'Unds'K-IO'Unds'{}(), Lbl'Hash'ENOTCONN'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENETRESET'Unds'K-IO'Unds'{}(), Lbl'Hash'ENODEV'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENETRESET'Unds'K-IO'Unds'{}(), Lbl'Hash'EEXIST'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENETRESET'Unds'K-IO'Unds'{}(), Lbl'Hash'ELOOP'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENETRESET'Unds'K-IO'Unds'{}(), Lbl'Hash'ENOTEMPTY'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENETRESET'Unds'K-IO'Unds'{}(), Lbl'Hash'EHOSTUNREACH'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENETRESET'Unds'K-IO'Unds'{}(), Lbl'Hash'noparse'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENETRESET'Unds'K-IO'Unds'{}(), Lbl'Hash'EINTR'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENETRESET'Unds'K-IO'Unds'{}(), Lbl'Hash'EMSGSIZE'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENETRESET'Unds'K-IO'Unds'{}(), Lbl'Hash'ENOENT'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENETRESET'Unds'K-IO'Unds'{}(), Lbl'Hash'ENOLCK'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENETRESET'Unds'K-IO'Unds'{}(), Lbl'Hash'EFAULT'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENETRESET'Unds'K-IO'Unds'{}(), Lbl'Hash'ERANGE'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENETRESET'Unds'K-IO'Unds'{}(), Lbl'Hash'EBUSY'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENETRESET'Unds'K-IO'Unds'{}(), Lbl'Hash'EINPROGRESS'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENETRESET'Unds'K-IO'Unds'{}(), Lbl'Hash'ENOMEM'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENETRESET'Unds'K-IO'Unds'{}(), Lbl'Hash'ENOTDIR'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENETRESET'Unds'K-IO'Unds'{}(), Lbl'Hash'ENAMETOOLONG'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENETRESET'Unds'K-IO'Unds'{}(), Lbl'Hash'EADDRINUSE'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENETRESET'Unds'K-IO'Unds'{}(), Lbl'Hash'EROFS'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENETRESET'Unds'K-IO'Unds'{}(), Lbl'Hash'EPROTONOSUPPORT'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENETRESET'Unds'K-IO'Unds'{}(), Lbl'Hash'ESOCKTNOSUPPORT'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENETRESET'Unds'K-IO'Unds'{}(), Lbl'Hash'ECHILD'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{R} \exists{R} (Val:SortIOError{}, \equals{SortIOError{}, R} (Val:SortIOError{}, Lbl'Hash'EPERM'Unds'K-IO'Unds'{}())) [functional{}()] // functional
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EPERM'Unds'K-IO'Unds'{}(), Lbl'Hash'ENOSYS'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EPERM'Unds'K-IO'Unds'{}(), Lbl'Hash'EALREADY'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EPERM'Unds'K-IO'Unds'{}(), Lbl'Hash'EHOSTDOWN'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EPERM'Unds'K-IO'Unds'{}(), Lbl'Hash'ENOTSOCK'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EPERM'Unds'K-IO'Unds'{}(), Lbl'Hash'EDOM'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EPERM'Unds'K-IO'Unds'{}(), Lbl'Hash'ENOBUFS'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EPERM'Unds'K-IO'Unds'{}(), Lbl'Hash'ETIMEDOUT'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EPERM'Unds'K-IO'Unds'{}(), Lbl'Hash'ETOOMANYREFS'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EPERM'Unds'K-IO'Unds'{}(), Lbl'Hash'EDESTADDRREQ'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EPERM'Unds'K-IO'Unds'{}(), Lbl'Hash'ENOTTY'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EPERM'Unds'K-IO'Unds'{}(), Lbl'Hash'ECONNRESET'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EPERM'Unds'K-IO'Unds'{}(), Lbl'Hash'EMFILE'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EPERM'Unds'K-IO'Unds'{}(), Lbl'Hash'EIO'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EPERM'Unds'K-IO'Unds'{}(), Lbl'Hash'ENOEXEC'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EPERM'Unds'K-IO'Unds'{}(), Lbl'Hash'EPFNOSUPPORT'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EPERM'Unds'K-IO'Unds'{}(), Lbl'Hash'ESHUTDOWN'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EPERM'Unds'K-IO'Unds'{}(), Lbl'Hash'EINVAL'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EPERM'Unds'K-IO'Unds'{}(), Lbl'Hash'EMLINK'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EPERM'Unds'K-IO'Unds'{}(), Lbl'Hash'EISDIR'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EPERM'Unds'K-IO'Unds'{}(), Lbl'Hash'EFBIG'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EPERM'Unds'K-IO'Unds'{}(), Lbl'Hash'ENOTCONN'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EPERM'Unds'K-IO'Unds'{}(), Lbl'Hash'ENODEV'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EPERM'Unds'K-IO'Unds'{}(), Lbl'Hash'EEXIST'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EPERM'Unds'K-IO'Unds'{}(), Lbl'Hash'ELOOP'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EPERM'Unds'K-IO'Unds'{}(), Lbl'Hash'ENOTEMPTY'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EPERM'Unds'K-IO'Unds'{}(), Lbl'Hash'EHOSTUNREACH'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EPERM'Unds'K-IO'Unds'{}(), Lbl'Hash'noparse'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EPERM'Unds'K-IO'Unds'{}(), Lbl'Hash'EINTR'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EPERM'Unds'K-IO'Unds'{}(), Lbl'Hash'EMSGSIZE'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EPERM'Unds'K-IO'Unds'{}(), Lbl'Hash'ENOENT'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EPERM'Unds'K-IO'Unds'{}(), Lbl'Hash'ENOLCK'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EPERM'Unds'K-IO'Unds'{}(), Lbl'Hash'EFAULT'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EPERM'Unds'K-IO'Unds'{}(), Lbl'Hash'ERANGE'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EPERM'Unds'K-IO'Unds'{}(), Lbl'Hash'EBUSY'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EPERM'Unds'K-IO'Unds'{}(), Lbl'Hash'EINPROGRESS'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EPERM'Unds'K-IO'Unds'{}(), Lbl'Hash'ENOMEM'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EPERM'Unds'K-IO'Unds'{}(), Lbl'Hash'ENOTDIR'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EPERM'Unds'K-IO'Unds'{}(), Lbl'Hash'ENAMETOOLONG'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EPERM'Unds'K-IO'Unds'{}(), Lbl'Hash'EADDRINUSE'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EPERM'Unds'K-IO'Unds'{}(), Lbl'Hash'EROFS'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EPERM'Unds'K-IO'Unds'{}(), Lbl'Hash'EPROTONOSUPPORT'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EPERM'Unds'K-IO'Unds'{}(), Lbl'Hash'ESOCKTNOSUPPORT'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EPERM'Unds'K-IO'Unds'{}(), Lbl'Hash'ECHILD'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{R} \exists{R} (Val:SortIOError{}, \equals{SortIOError{}, R} (Val:SortIOError{}, Lbl'Hash'ENOSYS'Unds'K-IO'Unds'{}())) [functional{}()] // functional
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOSYS'Unds'K-IO'Unds'{}(), Lbl'Hash'EALREADY'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOSYS'Unds'K-IO'Unds'{}(), Lbl'Hash'EHOSTDOWN'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOSYS'Unds'K-IO'Unds'{}(), Lbl'Hash'ENOTSOCK'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOSYS'Unds'K-IO'Unds'{}(), Lbl'Hash'EDOM'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOSYS'Unds'K-IO'Unds'{}(), Lbl'Hash'ENOBUFS'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOSYS'Unds'K-IO'Unds'{}(), Lbl'Hash'ETIMEDOUT'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOSYS'Unds'K-IO'Unds'{}(), Lbl'Hash'ETOOMANYREFS'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOSYS'Unds'K-IO'Unds'{}(), Lbl'Hash'EDESTADDRREQ'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOSYS'Unds'K-IO'Unds'{}(), Lbl'Hash'ENOTTY'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOSYS'Unds'K-IO'Unds'{}(), Lbl'Hash'ECONNRESET'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOSYS'Unds'K-IO'Unds'{}(), Lbl'Hash'EMFILE'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOSYS'Unds'K-IO'Unds'{}(), Lbl'Hash'EIO'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOSYS'Unds'K-IO'Unds'{}(), Lbl'Hash'ENOEXEC'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOSYS'Unds'K-IO'Unds'{}(), Lbl'Hash'EPFNOSUPPORT'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOSYS'Unds'K-IO'Unds'{}(), Lbl'Hash'ESHUTDOWN'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOSYS'Unds'K-IO'Unds'{}(), Lbl'Hash'EINVAL'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOSYS'Unds'K-IO'Unds'{}(), Lbl'Hash'EMLINK'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOSYS'Unds'K-IO'Unds'{}(), Lbl'Hash'EISDIR'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOSYS'Unds'K-IO'Unds'{}(), Lbl'Hash'EFBIG'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOSYS'Unds'K-IO'Unds'{}(), Lbl'Hash'ENOTCONN'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOSYS'Unds'K-IO'Unds'{}(), Lbl'Hash'ENODEV'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOSYS'Unds'K-IO'Unds'{}(), Lbl'Hash'EEXIST'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOSYS'Unds'K-IO'Unds'{}(), Lbl'Hash'ELOOP'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOSYS'Unds'K-IO'Unds'{}(), Lbl'Hash'ENOTEMPTY'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOSYS'Unds'K-IO'Unds'{}(), Lbl'Hash'EHOSTUNREACH'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOSYS'Unds'K-IO'Unds'{}(), Lbl'Hash'noparse'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOSYS'Unds'K-IO'Unds'{}(), Lbl'Hash'EINTR'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOSYS'Unds'K-IO'Unds'{}(), Lbl'Hash'EMSGSIZE'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOSYS'Unds'K-IO'Unds'{}(), Lbl'Hash'ENOENT'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOSYS'Unds'K-IO'Unds'{}(), Lbl'Hash'ENOLCK'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOSYS'Unds'K-IO'Unds'{}(), Lbl'Hash'EFAULT'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOSYS'Unds'K-IO'Unds'{}(), Lbl'Hash'ERANGE'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOSYS'Unds'K-IO'Unds'{}(), Lbl'Hash'EBUSY'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOSYS'Unds'K-IO'Unds'{}(), Lbl'Hash'EINPROGRESS'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOSYS'Unds'K-IO'Unds'{}(), Lbl'Hash'ENOMEM'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOSYS'Unds'K-IO'Unds'{}(), Lbl'Hash'ENOTDIR'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOSYS'Unds'K-IO'Unds'{}(), Lbl'Hash'ENAMETOOLONG'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOSYS'Unds'K-IO'Unds'{}(), Lbl'Hash'EADDRINUSE'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOSYS'Unds'K-IO'Unds'{}(), Lbl'Hash'EROFS'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOSYS'Unds'K-IO'Unds'{}(), Lbl'Hash'EPROTONOSUPPORT'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOSYS'Unds'K-IO'Unds'{}(), Lbl'Hash'ESOCKTNOSUPPORT'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOSYS'Unds'K-IO'Unds'{}(), Lbl'Hash'ECHILD'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{R} \exists{R} (Val:SortBool{}, \equals{SortBool{}, R} (Val:SortBool{}, Lbl'UndsEqlsEqls'Int'UndsUnds'INT'UndsUnds'Int'Unds'Int{}(K0:SortInt{}, K1:SortInt{}))) [functional{}()] // functional
  axiom{R} \exists{R} (Val:SortIOError{}, \equals{SortIOError{}, R} (Val:SortIOError{}, Lbl'Hash'EALREADY'Unds'K-IO'Unds'{}())) [functional{}()] // functional
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EALREADY'Unds'K-IO'Unds'{}(), Lbl'Hash'EHOSTDOWN'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EALREADY'Unds'K-IO'Unds'{}(), Lbl'Hash'ENOTSOCK'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EALREADY'Unds'K-IO'Unds'{}(), Lbl'Hash'EDOM'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EALREADY'Unds'K-IO'Unds'{}(), Lbl'Hash'ENOBUFS'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EALREADY'Unds'K-IO'Unds'{}(), Lbl'Hash'ETIMEDOUT'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EALREADY'Unds'K-IO'Unds'{}(), Lbl'Hash'ETOOMANYREFS'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EALREADY'Unds'K-IO'Unds'{}(), Lbl'Hash'EDESTADDRREQ'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EALREADY'Unds'K-IO'Unds'{}(), Lbl'Hash'ENOTTY'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EALREADY'Unds'K-IO'Unds'{}(), Lbl'Hash'ECONNRESET'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EALREADY'Unds'K-IO'Unds'{}(), Lbl'Hash'EMFILE'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EALREADY'Unds'K-IO'Unds'{}(), Lbl'Hash'EIO'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EALREADY'Unds'K-IO'Unds'{}(), Lbl'Hash'ENOEXEC'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EALREADY'Unds'K-IO'Unds'{}(), Lbl'Hash'EPFNOSUPPORT'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EALREADY'Unds'K-IO'Unds'{}(), Lbl'Hash'ESHUTDOWN'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EALREADY'Unds'K-IO'Unds'{}(), Lbl'Hash'EINVAL'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EALREADY'Unds'K-IO'Unds'{}(), Lbl'Hash'EMLINK'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EALREADY'Unds'K-IO'Unds'{}(), Lbl'Hash'EISDIR'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EALREADY'Unds'K-IO'Unds'{}(), Lbl'Hash'EFBIG'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EALREADY'Unds'K-IO'Unds'{}(), Lbl'Hash'ENOTCONN'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EALREADY'Unds'K-IO'Unds'{}(), Lbl'Hash'ENODEV'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EALREADY'Unds'K-IO'Unds'{}(), Lbl'Hash'EEXIST'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EALREADY'Unds'K-IO'Unds'{}(), Lbl'Hash'ELOOP'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EALREADY'Unds'K-IO'Unds'{}(), Lbl'Hash'ENOTEMPTY'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EALREADY'Unds'K-IO'Unds'{}(), Lbl'Hash'EHOSTUNREACH'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EALREADY'Unds'K-IO'Unds'{}(), Lbl'Hash'noparse'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EALREADY'Unds'K-IO'Unds'{}(), Lbl'Hash'EINTR'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EALREADY'Unds'K-IO'Unds'{}(), Lbl'Hash'EMSGSIZE'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EALREADY'Unds'K-IO'Unds'{}(), Lbl'Hash'ENOENT'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EALREADY'Unds'K-IO'Unds'{}(), Lbl'Hash'ENOLCK'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EALREADY'Unds'K-IO'Unds'{}(), Lbl'Hash'EFAULT'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EALREADY'Unds'K-IO'Unds'{}(), Lbl'Hash'ERANGE'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EALREADY'Unds'K-IO'Unds'{}(), Lbl'Hash'EBUSY'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EALREADY'Unds'K-IO'Unds'{}(), Lbl'Hash'EINPROGRESS'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EALREADY'Unds'K-IO'Unds'{}(), Lbl'Hash'ENOMEM'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EALREADY'Unds'K-IO'Unds'{}(), Lbl'Hash'ENOTDIR'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EALREADY'Unds'K-IO'Unds'{}(), Lbl'Hash'ENAMETOOLONG'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EALREADY'Unds'K-IO'Unds'{}(), Lbl'Hash'EADDRINUSE'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EALREADY'Unds'K-IO'Unds'{}(), Lbl'Hash'EROFS'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EALREADY'Unds'K-IO'Unds'{}(), Lbl'Hash'EPROTONOSUPPORT'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EALREADY'Unds'K-IO'Unds'{}(), Lbl'Hash'ESOCKTNOSUPPORT'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EALREADY'Unds'K-IO'Unds'{}(), Lbl'Hash'ECHILD'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{R} \exists{R} (Val:SortIOError{}, \equals{SortIOError{}, R} (Val:SortIOError{}, Lbl'Hash'EHOSTDOWN'Unds'K-IO'Unds'{}())) [functional{}()] // functional
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EHOSTDOWN'Unds'K-IO'Unds'{}(), Lbl'Hash'ENOTSOCK'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EHOSTDOWN'Unds'K-IO'Unds'{}(), Lbl'Hash'EDOM'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EHOSTDOWN'Unds'K-IO'Unds'{}(), Lbl'Hash'ENOBUFS'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EHOSTDOWN'Unds'K-IO'Unds'{}(), Lbl'Hash'ETIMEDOUT'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EHOSTDOWN'Unds'K-IO'Unds'{}(), Lbl'Hash'ETOOMANYREFS'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EHOSTDOWN'Unds'K-IO'Unds'{}(), Lbl'Hash'EDESTADDRREQ'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EHOSTDOWN'Unds'K-IO'Unds'{}(), Lbl'Hash'ENOTTY'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EHOSTDOWN'Unds'K-IO'Unds'{}(), Lbl'Hash'ECONNRESET'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EHOSTDOWN'Unds'K-IO'Unds'{}(), Lbl'Hash'EMFILE'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EHOSTDOWN'Unds'K-IO'Unds'{}(), Lbl'Hash'EIO'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EHOSTDOWN'Unds'K-IO'Unds'{}(), Lbl'Hash'ENOEXEC'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EHOSTDOWN'Unds'K-IO'Unds'{}(), Lbl'Hash'EPFNOSUPPORT'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EHOSTDOWN'Unds'K-IO'Unds'{}(), Lbl'Hash'ESHUTDOWN'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EHOSTDOWN'Unds'K-IO'Unds'{}(), Lbl'Hash'EINVAL'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EHOSTDOWN'Unds'K-IO'Unds'{}(), Lbl'Hash'EMLINK'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EHOSTDOWN'Unds'K-IO'Unds'{}(), Lbl'Hash'EISDIR'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EHOSTDOWN'Unds'K-IO'Unds'{}(), Lbl'Hash'EFBIG'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EHOSTDOWN'Unds'K-IO'Unds'{}(), Lbl'Hash'ENOTCONN'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EHOSTDOWN'Unds'K-IO'Unds'{}(), Lbl'Hash'ENODEV'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EHOSTDOWN'Unds'K-IO'Unds'{}(), Lbl'Hash'EEXIST'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EHOSTDOWN'Unds'K-IO'Unds'{}(), Lbl'Hash'ELOOP'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EHOSTDOWN'Unds'K-IO'Unds'{}(), Lbl'Hash'ENOTEMPTY'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EHOSTDOWN'Unds'K-IO'Unds'{}(), Lbl'Hash'EHOSTUNREACH'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EHOSTDOWN'Unds'K-IO'Unds'{}(), Lbl'Hash'noparse'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EHOSTDOWN'Unds'K-IO'Unds'{}(), Lbl'Hash'EINTR'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EHOSTDOWN'Unds'K-IO'Unds'{}(), Lbl'Hash'EMSGSIZE'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EHOSTDOWN'Unds'K-IO'Unds'{}(), Lbl'Hash'ENOENT'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EHOSTDOWN'Unds'K-IO'Unds'{}(), Lbl'Hash'ENOLCK'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EHOSTDOWN'Unds'K-IO'Unds'{}(), Lbl'Hash'EFAULT'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EHOSTDOWN'Unds'K-IO'Unds'{}(), Lbl'Hash'ERANGE'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EHOSTDOWN'Unds'K-IO'Unds'{}(), Lbl'Hash'EBUSY'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EHOSTDOWN'Unds'K-IO'Unds'{}(), Lbl'Hash'EINPROGRESS'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EHOSTDOWN'Unds'K-IO'Unds'{}(), Lbl'Hash'ENOMEM'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EHOSTDOWN'Unds'K-IO'Unds'{}(), Lbl'Hash'ENOTDIR'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EHOSTDOWN'Unds'K-IO'Unds'{}(), Lbl'Hash'ENAMETOOLONG'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EHOSTDOWN'Unds'K-IO'Unds'{}(), Lbl'Hash'EADDRINUSE'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EHOSTDOWN'Unds'K-IO'Unds'{}(), Lbl'Hash'EROFS'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EHOSTDOWN'Unds'K-IO'Unds'{}(), Lbl'Hash'EPROTONOSUPPORT'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EHOSTDOWN'Unds'K-IO'Unds'{}(), Lbl'Hash'ESOCKTNOSUPPORT'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EHOSTDOWN'Unds'K-IO'Unds'{}(), Lbl'Hash'ECHILD'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{R} \exists{R} (Val:SortIOError{}, \equals{SortIOError{}, R} (Val:SortIOError{}, Lbl'Hash'ENOTSOCK'Unds'K-IO'Unds'{}())) [functional{}()] // functional
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOTSOCK'Unds'K-IO'Unds'{}(), Lbl'Hash'EDOM'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOTSOCK'Unds'K-IO'Unds'{}(), Lbl'Hash'ENOBUFS'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOTSOCK'Unds'K-IO'Unds'{}(), Lbl'Hash'ETIMEDOUT'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOTSOCK'Unds'K-IO'Unds'{}(), Lbl'Hash'ETOOMANYREFS'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOTSOCK'Unds'K-IO'Unds'{}(), Lbl'Hash'EDESTADDRREQ'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOTSOCK'Unds'K-IO'Unds'{}(), Lbl'Hash'ENOTTY'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOTSOCK'Unds'K-IO'Unds'{}(), Lbl'Hash'ECONNRESET'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOTSOCK'Unds'K-IO'Unds'{}(), Lbl'Hash'EMFILE'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOTSOCK'Unds'K-IO'Unds'{}(), Lbl'Hash'EIO'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOTSOCK'Unds'K-IO'Unds'{}(), Lbl'Hash'ENOEXEC'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOTSOCK'Unds'K-IO'Unds'{}(), Lbl'Hash'EPFNOSUPPORT'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOTSOCK'Unds'K-IO'Unds'{}(), Lbl'Hash'ESHUTDOWN'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOTSOCK'Unds'K-IO'Unds'{}(), Lbl'Hash'EINVAL'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOTSOCK'Unds'K-IO'Unds'{}(), Lbl'Hash'EMLINK'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOTSOCK'Unds'K-IO'Unds'{}(), Lbl'Hash'EISDIR'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOTSOCK'Unds'K-IO'Unds'{}(), Lbl'Hash'EFBIG'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOTSOCK'Unds'K-IO'Unds'{}(), Lbl'Hash'ENOTCONN'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOTSOCK'Unds'K-IO'Unds'{}(), Lbl'Hash'ENODEV'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOTSOCK'Unds'K-IO'Unds'{}(), Lbl'Hash'EEXIST'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOTSOCK'Unds'K-IO'Unds'{}(), Lbl'Hash'ELOOP'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOTSOCK'Unds'K-IO'Unds'{}(), Lbl'Hash'ENOTEMPTY'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOTSOCK'Unds'K-IO'Unds'{}(), Lbl'Hash'EHOSTUNREACH'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOTSOCK'Unds'K-IO'Unds'{}(), Lbl'Hash'noparse'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOTSOCK'Unds'K-IO'Unds'{}(), Lbl'Hash'EINTR'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOTSOCK'Unds'K-IO'Unds'{}(), Lbl'Hash'EMSGSIZE'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOTSOCK'Unds'K-IO'Unds'{}(), Lbl'Hash'ENOENT'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOTSOCK'Unds'K-IO'Unds'{}(), Lbl'Hash'ENOLCK'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOTSOCK'Unds'K-IO'Unds'{}(), Lbl'Hash'EFAULT'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOTSOCK'Unds'K-IO'Unds'{}(), Lbl'Hash'ERANGE'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOTSOCK'Unds'K-IO'Unds'{}(), Lbl'Hash'EBUSY'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOTSOCK'Unds'K-IO'Unds'{}(), Lbl'Hash'EINPROGRESS'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOTSOCK'Unds'K-IO'Unds'{}(), Lbl'Hash'ENOMEM'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOTSOCK'Unds'K-IO'Unds'{}(), Lbl'Hash'ENOTDIR'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOTSOCK'Unds'K-IO'Unds'{}(), Lbl'Hash'ENAMETOOLONG'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOTSOCK'Unds'K-IO'Unds'{}(), Lbl'Hash'EADDRINUSE'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOTSOCK'Unds'K-IO'Unds'{}(), Lbl'Hash'EROFS'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOTSOCK'Unds'K-IO'Unds'{}(), Lbl'Hash'EPROTONOSUPPORT'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOTSOCK'Unds'K-IO'Unds'{}(), Lbl'Hash'ESOCKTNOSUPPORT'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOTSOCK'Unds'K-IO'Unds'{}(), Lbl'Hash'ECHILD'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{R} \exists{R} (Val:SortString{}, \equals{SortString{}, R} (Val:SortString{}, LblreplaceAll'LParUndsCommUndsCommUndsRParUnds'STRING'UndsUnds'String'Unds'String'Unds'String{}(K0:SortString{}, K1:SortString{}, K2:SortString{}))) [functional{}()] // functional
  axiom{R} \exists{R} (Val:SortKItem{}, \equals{SortKItem{}, R} (Val:SortKItem{}, Lbl'Hash'freezer'UndsSlshUndsUnds'IMP-SYNTAX'UndsUnds'AExp'Unds'AExp1'Unds'{}(K0:SortK{}))) [functional{}()] // functional
  axiom{}\implies{SortKItem{}} (\and{SortKItem{}} (Lbl'Hash'freezer'UndsSlshUndsUnds'IMP-SYNTAX'UndsUnds'AExp'Unds'AExp1'Unds'{}(X0:SortK{}), Lbl'Hash'freezer'UndsSlshUndsUnds'IMP-SYNTAX'UndsUnds'AExp'Unds'AExp1'Unds'{}(Y0:SortK{})), Lbl'Hash'freezer'UndsSlshUndsUnds'IMP-SYNTAX'UndsUnds'AExp'Unds'AExp1'Unds'{}(\and{SortK{}} (X0:SortK{}, Y0:SortK{}))) [constructor{}()] // no confusion same constructor
  axiom{}\not{SortKItem{}} (\and{SortKItem{}} (Lbl'Hash'freezer'UndsSlshUndsUnds'IMP-SYNTAX'UndsUnds'AExp'Unds'AExp1'Unds'{}(X0:SortK{}), Lbl'Hash'freezer'UndsPlusUndsUnds'IMP-SYNTAX'UndsUnds'AExp'Unds'AExp0'Unds'{}(Y0:SortK{}))) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortKItem{}} (\and{SortKItem{}} (Lbl'Hash'freezer'UndsSlshUndsUnds'IMP-SYNTAX'UndsUnds'AExp'Unds'AExp1'Unds'{}(X0:SortK{}), Lbl'Hash'freezerif'LParUndsRParUnds'else'UndsUnds'IMP-SYNTAX'UndsUnds'BExp'Unds'Block'Unds'Block1'Unds'{}(Y0:SortK{}, Y1:SortK{}))) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortKItem{}} (\and{SortKItem{}} (Lbl'Hash'freezer'UndsSlshUndsUnds'IMP-SYNTAX'UndsUnds'AExp'Unds'AExp1'Unds'{}(X0:SortK{}), Lbl'Hash'systemResult'LParUndsCommUndsCommUndsRParUnds'K-IO'UndsUnds'Int'Unds'String'Unds'String{}(Y0:SortInt{}, Y1:SortString{}, Y2:SortString{}))) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortKItem{}} (\and{SortKItem{}} (Lbl'Hash'freezer'UndsSlshUndsUnds'IMP-SYNTAX'UndsUnds'AExp'Unds'AExp1'Unds'{}(X0:SortK{}), Lbl'Hash'freezer'Unds-LT-EqlsUndsUnds'IMP-SYNTAX'UndsUnds'AExp'Unds'AExp1'Unds'{}(Y0:SortK{}))) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortKItem{}} (\and{SortKItem{}} (Lbl'Hash'freezer'UndsSlshUndsUnds'IMP-SYNTAX'UndsUnds'AExp'Unds'AExp1'Unds'{}(X0:SortK{}), Lbl'Hash'freezer'Unds-LT-EqlsUndsUnds'IMP-SYNTAX'UndsUnds'AExp'Unds'AExp0'Unds'{}(Y0:SortK{}))) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortKItem{}} (\and{SortKItem{}} (Lbl'Hash'freezer'UndsSlshUndsUnds'IMP-SYNTAX'UndsUnds'AExp'Unds'AExp1'Unds'{}(X0:SortK{}), Lbl'Hash'freezer'BangUndsUnds'IMP-SYNTAX'UndsUnds'BExp0'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortKItem{}} (\and{SortKItem{}} (Lbl'Hash'freezer'UndsSlshUndsUnds'IMP-SYNTAX'UndsUnds'AExp'Unds'AExp1'Unds'{}(X0:SortK{}), Lbl'Hash'freezer'UndsEqlsUndsSClnUnds'IMP-SYNTAX'UndsUnds'Id'Unds'AExp0'Unds'{}(Y0:SortK{}))) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortKItem{}} (\and{SortKItem{}} (Lbl'Hash'freezer'UndsSlshUndsUnds'IMP-SYNTAX'UndsUnds'AExp'Unds'AExp1'Unds'{}(X0:SortK{}), Lbl'Hash'freezer'UndsSlshUndsUnds'IMP-SYNTAX'UndsUnds'AExp'Unds'AExp0'Unds'{}(Y0:SortK{}))) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortKItem{}} (\and{SortKItem{}} (Lbl'Hash'freezer'UndsSlshUndsUnds'IMP-SYNTAX'UndsUnds'AExp'Unds'AExp1'Unds'{}(X0:SortK{}), Lbl'Hash'freezer'UndsPlusUndsUnds'IMP-SYNTAX'UndsUnds'AExp'Unds'AExp1'Unds'{}(Y0:SortK{}))) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortKItem{}} (\and{SortKItem{}} (Lbl'Hash'freezer'UndsSlshUndsUnds'IMP-SYNTAX'UndsUnds'AExp'Unds'AExp1'Unds'{}(X0:SortK{}), Lbl'Hash'freezer'UndsAndAndUndsUnds'IMP-SYNTAX'UndsUnds'BExp'Unds'BExp1'Unds'{}(Y0:SortK{}))) [constructor{}()] // no confusion different constructors
  axiom{R} \exists{R} (Val:SortBool{}, \equals{SortBool{}, R} (Val:SortBool{}, Lbl'UndsEqlsSlshEqls'String'UndsUnds'STRING'UndsUnds'String'Unds'String{}(K0:SortString{}, K1:SortString{}))) [functional{}()] // functional
  axiom{R} \exists{R} (Val:SortInt{}, \equals{SortInt{}, R} (Val:SortInt{}, Lblsize'LParUndsRParUnds'SET'UndsUnds'Set{}(K0:SortSet{}))) [functional{}()] // functional
  axiom{R} \exists{R} (Val:SortIds{}, \equals{SortIds{}, R} (Val:SortIds{}, Lbl'UndsCommUndsUnds'IMP-SYNTAX'UndsUnds'Id'Unds'Ids{}(K0:SortId{}, K1:SortIds{}))) [functional{}()] // functional
  axiom{}\implies{SortIds{}} (\and{SortIds{}} (Lbl'UndsCommUndsUnds'IMP-SYNTAX'UndsUnds'Id'Unds'Ids{}(X0:SortId{}, X1:SortIds{}), Lbl'UndsCommUndsUnds'IMP-SYNTAX'UndsUnds'Id'Unds'Ids{}(Y0:SortId{}, Y1:SortIds{})), Lbl'UndsCommUndsUnds'IMP-SYNTAX'UndsUnds'Id'Unds'Ids{}(\and{SortId{}} (X0:SortId{}, Y0:SortId{}), \and{SortIds{}} (X1:SortIds{}, Y1:SortIds{}))) [constructor{}()] // no confusion same constructor
  axiom{R} \exists{R} (Val:SortAExp{}, \equals{SortAExp{}, R} (Val:SortAExp{}, Lbl-'UndsUnds'IMP-SYNTAX'UndsUnds'Int{}(K0:SortInt{}))) [functional{}()] // functional
  axiom{}\implies{SortAExp{}} (\and{SortAExp{}} (Lbl-'UndsUnds'IMP-SYNTAX'UndsUnds'Int{}(X0:SortInt{}), Lbl-'UndsUnds'IMP-SYNTAX'UndsUnds'Int{}(Y0:SortInt{})), Lbl-'UndsUnds'IMP-SYNTAX'UndsUnds'Int{}(\and{SortInt{}} (X0:SortInt{}, Y0:SortInt{}))) [constructor{}()] // no confusion same constructor
  axiom{}\not{SortAExp{}} (\and{SortAExp{}} (Lbl-'UndsUnds'IMP-SYNTAX'UndsUnds'Int{}(X0:SortInt{}), Lbl'UndsSlshUndsUnds'IMP-SYNTAX'UndsUnds'AExp'Unds'AExp{}(Y0:SortAExp{}, Y1:SortAExp{}))) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortAExp{}} (\and{SortAExp{}} (Lbl-'UndsUnds'IMP-SYNTAX'UndsUnds'Int{}(X0:SortInt{}), Lbl'UndsPlusUndsUnds'IMP-SYNTAX'UndsUnds'AExp'Unds'AExp{}(Y0:SortAExp{}, Y1:SortAExp{}))) [constructor{}()] // no confusion different constructors
  axiom{R} \exists{R} (Val:SortInt{}, \equals{SortInt{}, R} (Val:SortInt{}, LblabsInt'LParUndsRParUnds'INT'UndsUnds'Int{}(K0:SortInt{}))) [functional{}()] // functional
  axiom{R} \exists{R} (Val:SortStmt{}, \equals{SortStmt{}, R} (Val:SortStmt{}, Lblwhile'LParUndsRParUndsUnds'IMP-SYNTAX'UndsUnds'BExp'Unds'Block{}(K0:SortBExp{}, K1:SortBlock{}))) [functional{}()] // functional
  axiom{}\implies{SortStmt{}} (\and{SortStmt{}} (Lblwhile'LParUndsRParUndsUnds'IMP-SYNTAX'UndsUnds'BExp'Unds'Block{}(X0:SortBExp{}, X1:SortBlock{}), Lblwhile'LParUndsRParUndsUnds'IMP-SYNTAX'UndsUnds'BExp'Unds'Block{}(Y0:SortBExp{}, Y1:SortBlock{})), Lblwhile'LParUndsRParUndsUnds'IMP-SYNTAX'UndsUnds'BExp'Unds'Block{}(\and{SortBExp{}} (X0:SortBExp{}, Y0:SortBExp{}), \and{SortBlock{}} (X1:SortBlock{}, Y1:SortBlock{}))) [constructor{}()] // no confusion same constructor
  axiom{}\not{SortStmt{}} (\and{SortStmt{}} (Lblwhile'LParUndsRParUndsUnds'IMP-SYNTAX'UndsUnds'BExp'Unds'Block{}(X0:SortBExp{}, X1:SortBlock{}), Lbl'UndsUndsUnds'IMP-SYNTAX'UndsUnds'Stmt'Unds'Stmt{}(Y0:SortStmt{}, Y1:SortStmt{}))) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortStmt{}} (\and{SortStmt{}} (Lblwhile'LParUndsRParUndsUnds'IMP-SYNTAX'UndsUnds'BExp'Unds'Block{}(X0:SortBExp{}, X1:SortBlock{}), Lblif'LParUndsRParUnds'else'UndsUnds'IMP-SYNTAX'UndsUnds'BExp'Unds'Block'Unds'Block{}(Y0:SortBExp{}, Y1:SortBlock{}, Y2:SortBlock{}))) [constructor{}()] // no confusion different constructors
  axiom{R} \exists{R} (Val:SortBExp{}, \equals{SortBExp{}, R} (Val:SortBExp{}, Lbl'UndsAndAndUndsUnds'IMP-SYNTAX'UndsUnds'BExp'Unds'BExp{}(K0:SortBExp{}, K1:SortBExp{}))) [functional{}()] // functional
  axiom{}\implies{SortBExp{}} (\and{SortBExp{}} (Lbl'UndsAndAndUndsUnds'IMP-SYNTAX'UndsUnds'BExp'Unds'BExp{}(X0:SortBExp{}, X1:SortBExp{}), Lbl'UndsAndAndUndsUnds'IMP-SYNTAX'UndsUnds'BExp'Unds'BExp{}(Y0:SortBExp{}, Y1:SortBExp{})), Lbl'UndsAndAndUndsUnds'IMP-SYNTAX'UndsUnds'BExp'Unds'BExp{}(\and{SortBExp{}} (X0:SortBExp{}, Y0:SortBExp{}), \and{SortBExp{}} (X1:SortBExp{}, Y1:SortBExp{}))) [constructor{}()] // no confusion same constructor
  axiom{R} \exists{R} (Val:SortIOError{}, \equals{SortIOError{}, R} (Val:SortIOError{}, Lbl'Hash'EDOM'Unds'K-IO'Unds'{}())) [functional{}()] // functional
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EDOM'Unds'K-IO'Unds'{}(), Lbl'Hash'ENOBUFS'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EDOM'Unds'K-IO'Unds'{}(), Lbl'Hash'ETIMEDOUT'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EDOM'Unds'K-IO'Unds'{}(), Lbl'Hash'ETOOMANYREFS'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EDOM'Unds'K-IO'Unds'{}(), Lbl'Hash'EDESTADDRREQ'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EDOM'Unds'K-IO'Unds'{}(), Lbl'Hash'ENOTTY'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EDOM'Unds'K-IO'Unds'{}(), Lbl'Hash'ECONNRESET'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EDOM'Unds'K-IO'Unds'{}(), Lbl'Hash'EMFILE'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EDOM'Unds'K-IO'Unds'{}(), Lbl'Hash'EIO'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EDOM'Unds'K-IO'Unds'{}(), Lbl'Hash'ENOEXEC'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EDOM'Unds'K-IO'Unds'{}(), Lbl'Hash'EPFNOSUPPORT'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EDOM'Unds'K-IO'Unds'{}(), Lbl'Hash'ESHUTDOWN'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EDOM'Unds'K-IO'Unds'{}(), Lbl'Hash'EINVAL'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EDOM'Unds'K-IO'Unds'{}(), Lbl'Hash'EMLINK'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EDOM'Unds'K-IO'Unds'{}(), Lbl'Hash'EISDIR'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EDOM'Unds'K-IO'Unds'{}(), Lbl'Hash'EFBIG'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EDOM'Unds'K-IO'Unds'{}(), Lbl'Hash'ENOTCONN'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EDOM'Unds'K-IO'Unds'{}(), Lbl'Hash'ENODEV'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EDOM'Unds'K-IO'Unds'{}(), Lbl'Hash'EEXIST'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EDOM'Unds'K-IO'Unds'{}(), Lbl'Hash'ELOOP'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EDOM'Unds'K-IO'Unds'{}(), Lbl'Hash'ENOTEMPTY'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EDOM'Unds'K-IO'Unds'{}(), Lbl'Hash'EHOSTUNREACH'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EDOM'Unds'K-IO'Unds'{}(), Lbl'Hash'noparse'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EDOM'Unds'K-IO'Unds'{}(), Lbl'Hash'EINTR'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EDOM'Unds'K-IO'Unds'{}(), Lbl'Hash'EMSGSIZE'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EDOM'Unds'K-IO'Unds'{}(), Lbl'Hash'ENOENT'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EDOM'Unds'K-IO'Unds'{}(), Lbl'Hash'ENOLCK'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EDOM'Unds'K-IO'Unds'{}(), Lbl'Hash'EFAULT'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EDOM'Unds'K-IO'Unds'{}(), Lbl'Hash'ERANGE'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EDOM'Unds'K-IO'Unds'{}(), Lbl'Hash'EBUSY'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EDOM'Unds'K-IO'Unds'{}(), Lbl'Hash'EINPROGRESS'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EDOM'Unds'K-IO'Unds'{}(), Lbl'Hash'ENOMEM'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EDOM'Unds'K-IO'Unds'{}(), Lbl'Hash'ENOTDIR'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EDOM'Unds'K-IO'Unds'{}(), Lbl'Hash'ENAMETOOLONG'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EDOM'Unds'K-IO'Unds'{}(), Lbl'Hash'EADDRINUSE'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EDOM'Unds'K-IO'Unds'{}(), Lbl'Hash'EROFS'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EDOM'Unds'K-IO'Unds'{}(), Lbl'Hash'EPROTONOSUPPORT'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EDOM'Unds'K-IO'Unds'{}(), Lbl'Hash'ESOCKTNOSUPPORT'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EDOM'Unds'K-IO'Unds'{}(), Lbl'Hash'ECHILD'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{R} \exists{R} (Val:SortIOError{}, \equals{SortIOError{}, R} (Val:SortIOError{}, Lbl'Hash'ENOBUFS'Unds'K-IO'Unds'{}())) [functional{}()] // functional
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOBUFS'Unds'K-IO'Unds'{}(), Lbl'Hash'ETIMEDOUT'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOBUFS'Unds'K-IO'Unds'{}(), Lbl'Hash'ETOOMANYREFS'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOBUFS'Unds'K-IO'Unds'{}(), Lbl'Hash'EDESTADDRREQ'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOBUFS'Unds'K-IO'Unds'{}(), Lbl'Hash'ENOTTY'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOBUFS'Unds'K-IO'Unds'{}(), Lbl'Hash'ECONNRESET'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOBUFS'Unds'K-IO'Unds'{}(), Lbl'Hash'EMFILE'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOBUFS'Unds'K-IO'Unds'{}(), Lbl'Hash'EIO'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOBUFS'Unds'K-IO'Unds'{}(), Lbl'Hash'ENOEXEC'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOBUFS'Unds'K-IO'Unds'{}(), Lbl'Hash'EPFNOSUPPORT'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOBUFS'Unds'K-IO'Unds'{}(), Lbl'Hash'ESHUTDOWN'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOBUFS'Unds'K-IO'Unds'{}(), Lbl'Hash'EINVAL'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOBUFS'Unds'K-IO'Unds'{}(), Lbl'Hash'EMLINK'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOBUFS'Unds'K-IO'Unds'{}(), Lbl'Hash'EISDIR'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOBUFS'Unds'K-IO'Unds'{}(), Lbl'Hash'EFBIG'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOBUFS'Unds'K-IO'Unds'{}(), Lbl'Hash'ENOTCONN'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOBUFS'Unds'K-IO'Unds'{}(), Lbl'Hash'ENODEV'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOBUFS'Unds'K-IO'Unds'{}(), Lbl'Hash'EEXIST'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOBUFS'Unds'K-IO'Unds'{}(), Lbl'Hash'ELOOP'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOBUFS'Unds'K-IO'Unds'{}(), Lbl'Hash'ENOTEMPTY'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOBUFS'Unds'K-IO'Unds'{}(), Lbl'Hash'EHOSTUNREACH'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOBUFS'Unds'K-IO'Unds'{}(), Lbl'Hash'noparse'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOBUFS'Unds'K-IO'Unds'{}(), Lbl'Hash'EINTR'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOBUFS'Unds'K-IO'Unds'{}(), Lbl'Hash'EMSGSIZE'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOBUFS'Unds'K-IO'Unds'{}(), Lbl'Hash'ENOENT'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOBUFS'Unds'K-IO'Unds'{}(), Lbl'Hash'ENOLCK'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOBUFS'Unds'K-IO'Unds'{}(), Lbl'Hash'EFAULT'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOBUFS'Unds'K-IO'Unds'{}(), Lbl'Hash'ERANGE'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOBUFS'Unds'K-IO'Unds'{}(), Lbl'Hash'EBUSY'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOBUFS'Unds'K-IO'Unds'{}(), Lbl'Hash'EINPROGRESS'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOBUFS'Unds'K-IO'Unds'{}(), Lbl'Hash'ENOMEM'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOBUFS'Unds'K-IO'Unds'{}(), Lbl'Hash'ENOTDIR'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOBUFS'Unds'K-IO'Unds'{}(), Lbl'Hash'ENAMETOOLONG'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOBUFS'Unds'K-IO'Unds'{}(), Lbl'Hash'EADDRINUSE'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOBUFS'Unds'K-IO'Unds'{}(), Lbl'Hash'EROFS'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOBUFS'Unds'K-IO'Unds'{}(), Lbl'Hash'EPROTONOSUPPORT'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOBUFS'Unds'K-IO'Unds'{}(), Lbl'Hash'ESOCKTNOSUPPORT'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOBUFS'Unds'K-IO'Unds'{}(), Lbl'Hash'ECHILD'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{R} \exists{R} (Val:SortIOError{}, \equals{SortIOError{}, R} (Val:SortIOError{}, Lbl'Hash'ETIMEDOUT'Unds'K-IO'Unds'{}())) [functional{}()] // functional
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ETIMEDOUT'Unds'K-IO'Unds'{}(), Lbl'Hash'ETOOMANYREFS'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ETIMEDOUT'Unds'K-IO'Unds'{}(), Lbl'Hash'EDESTADDRREQ'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ETIMEDOUT'Unds'K-IO'Unds'{}(), Lbl'Hash'ENOTTY'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ETIMEDOUT'Unds'K-IO'Unds'{}(), Lbl'Hash'ECONNRESET'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ETIMEDOUT'Unds'K-IO'Unds'{}(), Lbl'Hash'EMFILE'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ETIMEDOUT'Unds'K-IO'Unds'{}(), Lbl'Hash'EIO'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ETIMEDOUT'Unds'K-IO'Unds'{}(), Lbl'Hash'ENOEXEC'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ETIMEDOUT'Unds'K-IO'Unds'{}(), Lbl'Hash'EPFNOSUPPORT'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ETIMEDOUT'Unds'K-IO'Unds'{}(), Lbl'Hash'ESHUTDOWN'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ETIMEDOUT'Unds'K-IO'Unds'{}(), Lbl'Hash'EINVAL'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ETIMEDOUT'Unds'K-IO'Unds'{}(), Lbl'Hash'EMLINK'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ETIMEDOUT'Unds'K-IO'Unds'{}(), Lbl'Hash'EISDIR'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ETIMEDOUT'Unds'K-IO'Unds'{}(), Lbl'Hash'EFBIG'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ETIMEDOUT'Unds'K-IO'Unds'{}(), Lbl'Hash'ENOTCONN'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ETIMEDOUT'Unds'K-IO'Unds'{}(), Lbl'Hash'ENODEV'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ETIMEDOUT'Unds'K-IO'Unds'{}(), Lbl'Hash'EEXIST'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ETIMEDOUT'Unds'K-IO'Unds'{}(), Lbl'Hash'ELOOP'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ETIMEDOUT'Unds'K-IO'Unds'{}(), Lbl'Hash'ENOTEMPTY'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ETIMEDOUT'Unds'K-IO'Unds'{}(), Lbl'Hash'EHOSTUNREACH'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ETIMEDOUT'Unds'K-IO'Unds'{}(), Lbl'Hash'noparse'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ETIMEDOUT'Unds'K-IO'Unds'{}(), Lbl'Hash'EINTR'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ETIMEDOUT'Unds'K-IO'Unds'{}(), Lbl'Hash'EMSGSIZE'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ETIMEDOUT'Unds'K-IO'Unds'{}(), Lbl'Hash'ENOENT'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ETIMEDOUT'Unds'K-IO'Unds'{}(), Lbl'Hash'ENOLCK'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ETIMEDOUT'Unds'K-IO'Unds'{}(), Lbl'Hash'EFAULT'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ETIMEDOUT'Unds'K-IO'Unds'{}(), Lbl'Hash'ERANGE'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ETIMEDOUT'Unds'K-IO'Unds'{}(), Lbl'Hash'EBUSY'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ETIMEDOUT'Unds'K-IO'Unds'{}(), Lbl'Hash'EINPROGRESS'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ETIMEDOUT'Unds'K-IO'Unds'{}(), Lbl'Hash'ENOMEM'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ETIMEDOUT'Unds'K-IO'Unds'{}(), Lbl'Hash'ENOTDIR'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ETIMEDOUT'Unds'K-IO'Unds'{}(), Lbl'Hash'ENAMETOOLONG'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ETIMEDOUT'Unds'K-IO'Unds'{}(), Lbl'Hash'EADDRINUSE'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ETIMEDOUT'Unds'K-IO'Unds'{}(), Lbl'Hash'EROFS'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ETIMEDOUT'Unds'K-IO'Unds'{}(), Lbl'Hash'EPROTONOSUPPORT'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ETIMEDOUT'Unds'K-IO'Unds'{}(), Lbl'Hash'ESOCKTNOSUPPORT'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ETIMEDOUT'Unds'K-IO'Unds'{}(), Lbl'Hash'ECHILD'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{R} \exists{R} (Val:SortList{}, \equals{SortList{}, R} (Val:SortList{}, Lbl'Stop'List{}())) [functional{}()] // functional
  axiom{R} \exists{R} (Val:SortIOError{}, \equals{SortIOError{}, R} (Val:SortIOError{}, Lbl'Hash'ETOOMANYREFS'Unds'K-IO'Unds'{}())) [functional{}()] // functional
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ETOOMANYREFS'Unds'K-IO'Unds'{}(), Lbl'Hash'EDESTADDRREQ'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ETOOMANYREFS'Unds'K-IO'Unds'{}(), Lbl'Hash'ENOTTY'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ETOOMANYREFS'Unds'K-IO'Unds'{}(), Lbl'Hash'ECONNRESET'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ETOOMANYREFS'Unds'K-IO'Unds'{}(), Lbl'Hash'EMFILE'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ETOOMANYREFS'Unds'K-IO'Unds'{}(), Lbl'Hash'EIO'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ETOOMANYREFS'Unds'K-IO'Unds'{}(), Lbl'Hash'ENOEXEC'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ETOOMANYREFS'Unds'K-IO'Unds'{}(), Lbl'Hash'EPFNOSUPPORT'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ETOOMANYREFS'Unds'K-IO'Unds'{}(), Lbl'Hash'ESHUTDOWN'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ETOOMANYREFS'Unds'K-IO'Unds'{}(), Lbl'Hash'EINVAL'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ETOOMANYREFS'Unds'K-IO'Unds'{}(), Lbl'Hash'EMLINK'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ETOOMANYREFS'Unds'K-IO'Unds'{}(), Lbl'Hash'EISDIR'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ETOOMANYREFS'Unds'K-IO'Unds'{}(), Lbl'Hash'EFBIG'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ETOOMANYREFS'Unds'K-IO'Unds'{}(), Lbl'Hash'ENOTCONN'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ETOOMANYREFS'Unds'K-IO'Unds'{}(), Lbl'Hash'ENODEV'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ETOOMANYREFS'Unds'K-IO'Unds'{}(), Lbl'Hash'EEXIST'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ETOOMANYREFS'Unds'K-IO'Unds'{}(), Lbl'Hash'ELOOP'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ETOOMANYREFS'Unds'K-IO'Unds'{}(), Lbl'Hash'ENOTEMPTY'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ETOOMANYREFS'Unds'K-IO'Unds'{}(), Lbl'Hash'EHOSTUNREACH'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ETOOMANYREFS'Unds'K-IO'Unds'{}(), Lbl'Hash'noparse'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ETOOMANYREFS'Unds'K-IO'Unds'{}(), Lbl'Hash'EINTR'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ETOOMANYREFS'Unds'K-IO'Unds'{}(), Lbl'Hash'EMSGSIZE'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ETOOMANYREFS'Unds'K-IO'Unds'{}(), Lbl'Hash'ENOENT'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ETOOMANYREFS'Unds'K-IO'Unds'{}(), Lbl'Hash'ENOLCK'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ETOOMANYREFS'Unds'K-IO'Unds'{}(), Lbl'Hash'EFAULT'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ETOOMANYREFS'Unds'K-IO'Unds'{}(), Lbl'Hash'ERANGE'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ETOOMANYREFS'Unds'K-IO'Unds'{}(), Lbl'Hash'EBUSY'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ETOOMANYREFS'Unds'K-IO'Unds'{}(), Lbl'Hash'EINPROGRESS'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ETOOMANYREFS'Unds'K-IO'Unds'{}(), Lbl'Hash'ENOMEM'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ETOOMANYREFS'Unds'K-IO'Unds'{}(), Lbl'Hash'ENOTDIR'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ETOOMANYREFS'Unds'K-IO'Unds'{}(), Lbl'Hash'ENAMETOOLONG'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ETOOMANYREFS'Unds'K-IO'Unds'{}(), Lbl'Hash'EADDRINUSE'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ETOOMANYREFS'Unds'K-IO'Unds'{}(), Lbl'Hash'EROFS'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ETOOMANYREFS'Unds'K-IO'Unds'{}(), Lbl'Hash'EPROTONOSUPPORT'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ETOOMANYREFS'Unds'K-IO'Unds'{}(), Lbl'Hash'ESOCKTNOSUPPORT'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ETOOMANYREFS'Unds'K-IO'Unds'{}(), Lbl'Hash'ECHILD'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{R} \exists{R} (Val:SortIOError{}, \equals{SortIOError{}, R} (Val:SortIOError{}, Lbl'Hash'EDESTADDRREQ'Unds'K-IO'Unds'{}())) [functional{}()] // functional
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EDESTADDRREQ'Unds'K-IO'Unds'{}(), Lbl'Hash'ENOTTY'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EDESTADDRREQ'Unds'K-IO'Unds'{}(), Lbl'Hash'ECONNRESET'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EDESTADDRREQ'Unds'K-IO'Unds'{}(), Lbl'Hash'EMFILE'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EDESTADDRREQ'Unds'K-IO'Unds'{}(), Lbl'Hash'EIO'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EDESTADDRREQ'Unds'K-IO'Unds'{}(), Lbl'Hash'ENOEXEC'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EDESTADDRREQ'Unds'K-IO'Unds'{}(), Lbl'Hash'EPFNOSUPPORT'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EDESTADDRREQ'Unds'K-IO'Unds'{}(), Lbl'Hash'ESHUTDOWN'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EDESTADDRREQ'Unds'K-IO'Unds'{}(), Lbl'Hash'EINVAL'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EDESTADDRREQ'Unds'K-IO'Unds'{}(), Lbl'Hash'EMLINK'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EDESTADDRREQ'Unds'K-IO'Unds'{}(), Lbl'Hash'EISDIR'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EDESTADDRREQ'Unds'K-IO'Unds'{}(), Lbl'Hash'EFBIG'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EDESTADDRREQ'Unds'K-IO'Unds'{}(), Lbl'Hash'ENOTCONN'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EDESTADDRREQ'Unds'K-IO'Unds'{}(), Lbl'Hash'ENODEV'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EDESTADDRREQ'Unds'K-IO'Unds'{}(), Lbl'Hash'EEXIST'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EDESTADDRREQ'Unds'K-IO'Unds'{}(), Lbl'Hash'ELOOP'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EDESTADDRREQ'Unds'K-IO'Unds'{}(), Lbl'Hash'ENOTEMPTY'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EDESTADDRREQ'Unds'K-IO'Unds'{}(), Lbl'Hash'EHOSTUNREACH'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EDESTADDRREQ'Unds'K-IO'Unds'{}(), Lbl'Hash'noparse'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EDESTADDRREQ'Unds'K-IO'Unds'{}(), Lbl'Hash'EINTR'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EDESTADDRREQ'Unds'K-IO'Unds'{}(), Lbl'Hash'EMSGSIZE'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EDESTADDRREQ'Unds'K-IO'Unds'{}(), Lbl'Hash'ENOENT'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EDESTADDRREQ'Unds'K-IO'Unds'{}(), Lbl'Hash'ENOLCK'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EDESTADDRREQ'Unds'K-IO'Unds'{}(), Lbl'Hash'EFAULT'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EDESTADDRREQ'Unds'K-IO'Unds'{}(), Lbl'Hash'ERANGE'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EDESTADDRREQ'Unds'K-IO'Unds'{}(), Lbl'Hash'EBUSY'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EDESTADDRREQ'Unds'K-IO'Unds'{}(), Lbl'Hash'EINPROGRESS'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EDESTADDRREQ'Unds'K-IO'Unds'{}(), Lbl'Hash'ENOMEM'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EDESTADDRREQ'Unds'K-IO'Unds'{}(), Lbl'Hash'ENOTDIR'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EDESTADDRREQ'Unds'K-IO'Unds'{}(), Lbl'Hash'ENAMETOOLONG'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EDESTADDRREQ'Unds'K-IO'Unds'{}(), Lbl'Hash'EADDRINUSE'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EDESTADDRREQ'Unds'K-IO'Unds'{}(), Lbl'Hash'EROFS'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EDESTADDRREQ'Unds'K-IO'Unds'{}(), Lbl'Hash'EPROTONOSUPPORT'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EDESTADDRREQ'Unds'K-IO'Unds'{}(), Lbl'Hash'ESOCKTNOSUPPORT'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EDESTADDRREQ'Unds'K-IO'Unds'{}(), Lbl'Hash'ECHILD'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{R} \exists{R} (Val:SortInt{}, \equals{SortInt{}, R} (Val:SortInt{}, LblfreshInt'LParUndsRParUnds'INT'UndsUnds'Int{}(K0:SortInt{}))) [functional{}()] // functional
  axiom{R} \exists{R} (Val:SortIOError{}, \equals{SortIOError{}, R} (Val:SortIOError{}, Lbl'Hash'ENOTTY'Unds'K-IO'Unds'{}())) [functional{}()] // functional
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOTTY'Unds'K-IO'Unds'{}(), Lbl'Hash'ECONNRESET'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOTTY'Unds'K-IO'Unds'{}(), Lbl'Hash'EMFILE'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOTTY'Unds'K-IO'Unds'{}(), Lbl'Hash'EIO'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOTTY'Unds'K-IO'Unds'{}(), Lbl'Hash'ENOEXEC'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOTTY'Unds'K-IO'Unds'{}(), Lbl'Hash'EPFNOSUPPORT'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOTTY'Unds'K-IO'Unds'{}(), Lbl'Hash'ESHUTDOWN'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOTTY'Unds'K-IO'Unds'{}(), Lbl'Hash'EINVAL'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOTTY'Unds'K-IO'Unds'{}(), Lbl'Hash'EMLINK'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOTTY'Unds'K-IO'Unds'{}(), Lbl'Hash'EISDIR'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOTTY'Unds'K-IO'Unds'{}(), Lbl'Hash'EFBIG'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOTTY'Unds'K-IO'Unds'{}(), Lbl'Hash'ENOTCONN'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOTTY'Unds'K-IO'Unds'{}(), Lbl'Hash'ENODEV'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOTTY'Unds'K-IO'Unds'{}(), Lbl'Hash'EEXIST'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOTTY'Unds'K-IO'Unds'{}(), Lbl'Hash'ELOOP'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOTTY'Unds'K-IO'Unds'{}(), Lbl'Hash'ENOTEMPTY'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOTTY'Unds'K-IO'Unds'{}(), Lbl'Hash'EHOSTUNREACH'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOTTY'Unds'K-IO'Unds'{}(), Lbl'Hash'noparse'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOTTY'Unds'K-IO'Unds'{}(), Lbl'Hash'EINTR'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOTTY'Unds'K-IO'Unds'{}(), Lbl'Hash'EMSGSIZE'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOTTY'Unds'K-IO'Unds'{}(), Lbl'Hash'ENOENT'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOTTY'Unds'K-IO'Unds'{}(), Lbl'Hash'ENOLCK'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOTTY'Unds'K-IO'Unds'{}(), Lbl'Hash'EFAULT'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOTTY'Unds'K-IO'Unds'{}(), Lbl'Hash'ERANGE'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOTTY'Unds'K-IO'Unds'{}(), Lbl'Hash'EBUSY'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOTTY'Unds'K-IO'Unds'{}(), Lbl'Hash'EINPROGRESS'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOTTY'Unds'K-IO'Unds'{}(), Lbl'Hash'ENOMEM'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOTTY'Unds'K-IO'Unds'{}(), Lbl'Hash'ENOTDIR'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOTTY'Unds'K-IO'Unds'{}(), Lbl'Hash'ENAMETOOLONG'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOTTY'Unds'K-IO'Unds'{}(), Lbl'Hash'EADDRINUSE'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOTTY'Unds'K-IO'Unds'{}(), Lbl'Hash'EROFS'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOTTY'Unds'K-IO'Unds'{}(), Lbl'Hash'EPROTONOSUPPORT'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOTTY'Unds'K-IO'Unds'{}(), Lbl'Hash'ESOCKTNOSUPPORT'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOTTY'Unds'K-IO'Unds'{}(), Lbl'Hash'ECHILD'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{R} \exists{R} (Val:SortStateCellOpt{}, \equals{SortStateCellOpt{}, R} (Val:SortStateCellOpt{}, LblnoStateCell{}())) [functional{}()] // functional
  axiom{R} \exists{R} (Val:SortKItem{}, \equals{SortKItem{}, R} (Val:SortKItem{}, Lbl'Hash'freezer'UndsPlusUndsUnds'IMP-SYNTAX'UndsUnds'AExp'Unds'AExp0'Unds'{}(K0:SortK{}))) [functional{}()] // functional
  axiom{}\implies{SortKItem{}} (\and{SortKItem{}} (Lbl'Hash'freezer'UndsPlusUndsUnds'IMP-SYNTAX'UndsUnds'AExp'Unds'AExp0'Unds'{}(X0:SortK{}), Lbl'Hash'freezer'UndsPlusUndsUnds'IMP-SYNTAX'UndsUnds'AExp'Unds'AExp0'Unds'{}(Y0:SortK{})), Lbl'Hash'freezer'UndsPlusUndsUnds'IMP-SYNTAX'UndsUnds'AExp'Unds'AExp0'Unds'{}(\and{SortK{}} (X0:SortK{}, Y0:SortK{}))) [constructor{}()] // no confusion same constructor
  axiom{}\not{SortKItem{}} (\and{SortKItem{}} (Lbl'Hash'freezer'UndsPlusUndsUnds'IMP-SYNTAX'UndsUnds'AExp'Unds'AExp0'Unds'{}(X0:SortK{}), Lbl'Hash'freezerif'LParUndsRParUnds'else'UndsUnds'IMP-SYNTAX'UndsUnds'BExp'Unds'Block'Unds'Block1'Unds'{}(Y0:SortK{}, Y1:SortK{}))) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortKItem{}} (\and{SortKItem{}} (Lbl'Hash'freezer'UndsPlusUndsUnds'IMP-SYNTAX'UndsUnds'AExp'Unds'AExp0'Unds'{}(X0:SortK{}), Lbl'Hash'systemResult'LParUndsCommUndsCommUndsRParUnds'K-IO'UndsUnds'Int'Unds'String'Unds'String{}(Y0:SortInt{}, Y1:SortString{}, Y2:SortString{}))) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortKItem{}} (\and{SortKItem{}} (Lbl'Hash'freezer'UndsPlusUndsUnds'IMP-SYNTAX'UndsUnds'AExp'Unds'AExp0'Unds'{}(X0:SortK{}), Lbl'Hash'freezer'Unds-LT-EqlsUndsUnds'IMP-SYNTAX'UndsUnds'AExp'Unds'AExp1'Unds'{}(Y0:SortK{}))) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortKItem{}} (\and{SortKItem{}} (Lbl'Hash'freezer'UndsPlusUndsUnds'IMP-SYNTAX'UndsUnds'AExp'Unds'AExp0'Unds'{}(X0:SortK{}), Lbl'Hash'freezer'Unds-LT-EqlsUndsUnds'IMP-SYNTAX'UndsUnds'AExp'Unds'AExp0'Unds'{}(Y0:SortK{}))) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortKItem{}} (\and{SortKItem{}} (Lbl'Hash'freezer'UndsPlusUndsUnds'IMP-SYNTAX'UndsUnds'AExp'Unds'AExp0'Unds'{}(X0:SortK{}), Lbl'Hash'freezer'BangUndsUnds'IMP-SYNTAX'UndsUnds'BExp0'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortKItem{}} (\and{SortKItem{}} (Lbl'Hash'freezer'UndsPlusUndsUnds'IMP-SYNTAX'UndsUnds'AExp'Unds'AExp0'Unds'{}(X0:SortK{}), Lbl'Hash'freezer'UndsEqlsUndsSClnUnds'IMP-SYNTAX'UndsUnds'Id'Unds'AExp0'Unds'{}(Y0:SortK{}))) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortKItem{}} (\and{SortKItem{}} (Lbl'Hash'freezer'UndsPlusUndsUnds'IMP-SYNTAX'UndsUnds'AExp'Unds'AExp0'Unds'{}(X0:SortK{}), Lbl'Hash'freezer'UndsSlshUndsUnds'IMP-SYNTAX'UndsUnds'AExp'Unds'AExp0'Unds'{}(Y0:SortK{}))) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortKItem{}} (\and{SortKItem{}} (Lbl'Hash'freezer'UndsPlusUndsUnds'IMP-SYNTAX'UndsUnds'AExp'Unds'AExp0'Unds'{}(X0:SortK{}), Lbl'Hash'freezer'UndsPlusUndsUnds'IMP-SYNTAX'UndsUnds'AExp'Unds'AExp1'Unds'{}(Y0:SortK{}))) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortKItem{}} (\and{SortKItem{}} (Lbl'Hash'freezer'UndsPlusUndsUnds'IMP-SYNTAX'UndsUnds'AExp'Unds'AExp0'Unds'{}(X0:SortK{}), Lbl'Hash'freezer'UndsAndAndUndsUnds'IMP-SYNTAX'UndsUnds'BExp'Unds'BExp1'Unds'{}(Y0:SortK{}))) [constructor{}()] // no confusion different constructors
  axiom{R} \exists{R} (Val:SortIOError{}, \equals{SortIOError{}, R} (Val:SortIOError{}, Lbl'Hash'ECONNRESET'Unds'K-IO'Unds'{}())) [functional{}()] // functional
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ECONNRESET'Unds'K-IO'Unds'{}(), Lbl'Hash'EMFILE'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ECONNRESET'Unds'K-IO'Unds'{}(), Lbl'Hash'EIO'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ECONNRESET'Unds'K-IO'Unds'{}(), Lbl'Hash'ENOEXEC'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ECONNRESET'Unds'K-IO'Unds'{}(), Lbl'Hash'EPFNOSUPPORT'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ECONNRESET'Unds'K-IO'Unds'{}(), Lbl'Hash'ESHUTDOWN'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ECONNRESET'Unds'K-IO'Unds'{}(), Lbl'Hash'EINVAL'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ECONNRESET'Unds'K-IO'Unds'{}(), Lbl'Hash'EMLINK'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ECONNRESET'Unds'K-IO'Unds'{}(), Lbl'Hash'EISDIR'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ECONNRESET'Unds'K-IO'Unds'{}(), Lbl'Hash'EFBIG'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ECONNRESET'Unds'K-IO'Unds'{}(), Lbl'Hash'ENOTCONN'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ECONNRESET'Unds'K-IO'Unds'{}(), Lbl'Hash'ENODEV'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ECONNRESET'Unds'K-IO'Unds'{}(), Lbl'Hash'EEXIST'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ECONNRESET'Unds'K-IO'Unds'{}(), Lbl'Hash'ELOOP'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ECONNRESET'Unds'K-IO'Unds'{}(), Lbl'Hash'ENOTEMPTY'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ECONNRESET'Unds'K-IO'Unds'{}(), Lbl'Hash'EHOSTUNREACH'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ECONNRESET'Unds'K-IO'Unds'{}(), Lbl'Hash'noparse'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ECONNRESET'Unds'K-IO'Unds'{}(), Lbl'Hash'EINTR'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ECONNRESET'Unds'K-IO'Unds'{}(), Lbl'Hash'EMSGSIZE'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ECONNRESET'Unds'K-IO'Unds'{}(), Lbl'Hash'ENOENT'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ECONNRESET'Unds'K-IO'Unds'{}(), Lbl'Hash'ENOLCK'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ECONNRESET'Unds'K-IO'Unds'{}(), Lbl'Hash'EFAULT'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ECONNRESET'Unds'K-IO'Unds'{}(), Lbl'Hash'ERANGE'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ECONNRESET'Unds'K-IO'Unds'{}(), Lbl'Hash'EBUSY'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ECONNRESET'Unds'K-IO'Unds'{}(), Lbl'Hash'EINPROGRESS'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ECONNRESET'Unds'K-IO'Unds'{}(), Lbl'Hash'ENOMEM'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ECONNRESET'Unds'K-IO'Unds'{}(), Lbl'Hash'ENOTDIR'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ECONNRESET'Unds'K-IO'Unds'{}(), Lbl'Hash'ENAMETOOLONG'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ECONNRESET'Unds'K-IO'Unds'{}(), Lbl'Hash'EADDRINUSE'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ECONNRESET'Unds'K-IO'Unds'{}(), Lbl'Hash'EROFS'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ECONNRESET'Unds'K-IO'Unds'{}(), Lbl'Hash'EPROTONOSUPPORT'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ECONNRESET'Unds'K-IO'Unds'{}(), Lbl'Hash'ESOCKTNOSUPPORT'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ECONNRESET'Unds'K-IO'Unds'{}(), Lbl'Hash'ECHILD'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{R} \exists{R} (Val:SortInt{}, \equals{SortInt{}, R} (Val:SortInt{}, Lbl'Tild'Int'UndsUnds'INT'UndsUnds'Int{}(K0:SortInt{}))) [functional{}()] // functional
  axiom{R, SortS0} \exists{R} (Val:SortS0, \equals{SortS0, R} (Val:SortS0, Lbl'Hash'if'UndsHash'then'UndsHash'else'UndsHash'fi'Unds'K-EQUAL'UndsUnds'Bool'Unds'K'Unds'K{SortS0}(K0:SortBool{}, K1:SortS0, K2:SortS0))) [functional{}()] // functional
  axiom{R} \exists{R} (Val:SortIOError{}, \equals{SortIOError{}, R} (Val:SortIOError{}, Lbl'Hash'EMFILE'Unds'K-IO'Unds'{}())) [functional{}()] // functional
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EMFILE'Unds'K-IO'Unds'{}(), Lbl'Hash'EIO'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EMFILE'Unds'K-IO'Unds'{}(), Lbl'Hash'ENOEXEC'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EMFILE'Unds'K-IO'Unds'{}(), Lbl'Hash'EPFNOSUPPORT'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EMFILE'Unds'K-IO'Unds'{}(), Lbl'Hash'ESHUTDOWN'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EMFILE'Unds'K-IO'Unds'{}(), Lbl'Hash'EINVAL'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EMFILE'Unds'K-IO'Unds'{}(), Lbl'Hash'EMLINK'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EMFILE'Unds'K-IO'Unds'{}(), Lbl'Hash'EISDIR'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EMFILE'Unds'K-IO'Unds'{}(), Lbl'Hash'EFBIG'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EMFILE'Unds'K-IO'Unds'{}(), Lbl'Hash'ENOTCONN'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EMFILE'Unds'K-IO'Unds'{}(), Lbl'Hash'ENODEV'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EMFILE'Unds'K-IO'Unds'{}(), Lbl'Hash'EEXIST'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EMFILE'Unds'K-IO'Unds'{}(), Lbl'Hash'ELOOP'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EMFILE'Unds'K-IO'Unds'{}(), Lbl'Hash'ENOTEMPTY'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EMFILE'Unds'K-IO'Unds'{}(), Lbl'Hash'EHOSTUNREACH'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EMFILE'Unds'K-IO'Unds'{}(), Lbl'Hash'noparse'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EMFILE'Unds'K-IO'Unds'{}(), Lbl'Hash'EINTR'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EMFILE'Unds'K-IO'Unds'{}(), Lbl'Hash'EMSGSIZE'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EMFILE'Unds'K-IO'Unds'{}(), Lbl'Hash'ENOENT'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EMFILE'Unds'K-IO'Unds'{}(), Lbl'Hash'ENOLCK'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EMFILE'Unds'K-IO'Unds'{}(), Lbl'Hash'EFAULT'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EMFILE'Unds'K-IO'Unds'{}(), Lbl'Hash'ERANGE'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EMFILE'Unds'K-IO'Unds'{}(), Lbl'Hash'EBUSY'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EMFILE'Unds'K-IO'Unds'{}(), Lbl'Hash'EINPROGRESS'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EMFILE'Unds'K-IO'Unds'{}(), Lbl'Hash'ENOMEM'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EMFILE'Unds'K-IO'Unds'{}(), Lbl'Hash'ENOTDIR'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EMFILE'Unds'K-IO'Unds'{}(), Lbl'Hash'ENAMETOOLONG'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EMFILE'Unds'K-IO'Unds'{}(), Lbl'Hash'EADDRINUSE'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EMFILE'Unds'K-IO'Unds'{}(), Lbl'Hash'EROFS'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EMFILE'Unds'K-IO'Unds'{}(), Lbl'Hash'EPROTONOSUPPORT'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EMFILE'Unds'K-IO'Unds'{}(), Lbl'Hash'ESOCKTNOSUPPORT'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EMFILE'Unds'K-IO'Unds'{}(), Lbl'Hash'ECHILD'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{R} \exists{R} (Val:SortBool{}, \equals{SortBool{}, R} (Val:SortBool{}, Lbl'Unds-GT-'String'UndsUnds'STRING'UndsUnds'String'Unds'String{}(K0:SortString{}, K1:SortString{}))) [functional{}()] // functional
  axiom{R} \exists{R} (Val:SortIOError{}, \equals{SortIOError{}, R} (Val:SortIOError{}, Lbl'Hash'EIO'Unds'K-IO'Unds'{}())) [functional{}()] // functional
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EIO'Unds'K-IO'Unds'{}(), Lbl'Hash'ENOEXEC'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EIO'Unds'K-IO'Unds'{}(), Lbl'Hash'EPFNOSUPPORT'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EIO'Unds'K-IO'Unds'{}(), Lbl'Hash'ESHUTDOWN'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EIO'Unds'K-IO'Unds'{}(), Lbl'Hash'EINVAL'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EIO'Unds'K-IO'Unds'{}(), Lbl'Hash'EMLINK'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EIO'Unds'K-IO'Unds'{}(), Lbl'Hash'EISDIR'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EIO'Unds'K-IO'Unds'{}(), Lbl'Hash'EFBIG'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EIO'Unds'K-IO'Unds'{}(), Lbl'Hash'ENOTCONN'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EIO'Unds'K-IO'Unds'{}(), Lbl'Hash'ENODEV'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EIO'Unds'K-IO'Unds'{}(), Lbl'Hash'EEXIST'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EIO'Unds'K-IO'Unds'{}(), Lbl'Hash'ELOOP'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EIO'Unds'K-IO'Unds'{}(), Lbl'Hash'ENOTEMPTY'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EIO'Unds'K-IO'Unds'{}(), Lbl'Hash'EHOSTUNREACH'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EIO'Unds'K-IO'Unds'{}(), Lbl'Hash'noparse'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EIO'Unds'K-IO'Unds'{}(), Lbl'Hash'EINTR'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EIO'Unds'K-IO'Unds'{}(), Lbl'Hash'EMSGSIZE'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EIO'Unds'K-IO'Unds'{}(), Lbl'Hash'ENOENT'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EIO'Unds'K-IO'Unds'{}(), Lbl'Hash'ENOLCK'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EIO'Unds'K-IO'Unds'{}(), Lbl'Hash'EFAULT'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EIO'Unds'K-IO'Unds'{}(), Lbl'Hash'ERANGE'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EIO'Unds'K-IO'Unds'{}(), Lbl'Hash'EBUSY'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EIO'Unds'K-IO'Unds'{}(), Lbl'Hash'EINPROGRESS'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EIO'Unds'K-IO'Unds'{}(), Lbl'Hash'ENOMEM'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EIO'Unds'K-IO'Unds'{}(), Lbl'Hash'ENOTDIR'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EIO'Unds'K-IO'Unds'{}(), Lbl'Hash'ENAMETOOLONG'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EIO'Unds'K-IO'Unds'{}(), Lbl'Hash'EADDRINUSE'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EIO'Unds'K-IO'Unds'{}(), Lbl'Hash'EROFS'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EIO'Unds'K-IO'Unds'{}(), Lbl'Hash'EPROTONOSUPPORT'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EIO'Unds'K-IO'Unds'{}(), Lbl'Hash'ESOCKTNOSUPPORT'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EIO'Unds'K-IO'Unds'{}(), Lbl'Hash'ECHILD'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{R} \exists{R} (Val:SortMap{}, \equals{SortMap{}, R} (Val:SortMap{}, Lbl'UndsLSqBUnds-LT-'-'UndsRSqBUnds'MAP'UndsUnds'Map'Unds'K'Unds'K{}(K0:SortMap{}, K1:SortK{}, K2:SortK{}))) [functional{}()] // functional
  axiom{R} \exists{R} (Val:SortString{}, \equals{SortString{}, R} (Val:SortString{}, LblFloat2String'LParUndsRParUnds'STRING'UndsUnds'Float{}(K0:SortFloat{}))) [functional{}()] // functional
  axiom{R} \exists{R} (Val:SortIOError{}, \equals{SortIOError{}, R} (Val:SortIOError{}, Lbl'Hash'ENOEXEC'Unds'K-IO'Unds'{}())) [functional{}()] // functional
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOEXEC'Unds'K-IO'Unds'{}(), Lbl'Hash'EPFNOSUPPORT'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOEXEC'Unds'K-IO'Unds'{}(), Lbl'Hash'ESHUTDOWN'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOEXEC'Unds'K-IO'Unds'{}(), Lbl'Hash'EINVAL'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOEXEC'Unds'K-IO'Unds'{}(), Lbl'Hash'EMLINK'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOEXEC'Unds'K-IO'Unds'{}(), Lbl'Hash'EISDIR'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOEXEC'Unds'K-IO'Unds'{}(), Lbl'Hash'EFBIG'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOEXEC'Unds'K-IO'Unds'{}(), Lbl'Hash'ENOTCONN'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOEXEC'Unds'K-IO'Unds'{}(), Lbl'Hash'ENODEV'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOEXEC'Unds'K-IO'Unds'{}(), Lbl'Hash'EEXIST'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOEXEC'Unds'K-IO'Unds'{}(), Lbl'Hash'ELOOP'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOEXEC'Unds'K-IO'Unds'{}(), Lbl'Hash'ENOTEMPTY'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOEXEC'Unds'K-IO'Unds'{}(), Lbl'Hash'EHOSTUNREACH'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOEXEC'Unds'K-IO'Unds'{}(), Lbl'Hash'noparse'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOEXEC'Unds'K-IO'Unds'{}(), Lbl'Hash'EINTR'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOEXEC'Unds'K-IO'Unds'{}(), Lbl'Hash'EMSGSIZE'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOEXEC'Unds'K-IO'Unds'{}(), Lbl'Hash'ENOENT'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOEXEC'Unds'K-IO'Unds'{}(), Lbl'Hash'ENOLCK'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOEXEC'Unds'K-IO'Unds'{}(), Lbl'Hash'EFAULT'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOEXEC'Unds'K-IO'Unds'{}(), Lbl'Hash'ERANGE'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOEXEC'Unds'K-IO'Unds'{}(), Lbl'Hash'EBUSY'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOEXEC'Unds'K-IO'Unds'{}(), Lbl'Hash'EINPROGRESS'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOEXEC'Unds'K-IO'Unds'{}(), Lbl'Hash'ENOMEM'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOEXEC'Unds'K-IO'Unds'{}(), Lbl'Hash'ENOTDIR'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOEXEC'Unds'K-IO'Unds'{}(), Lbl'Hash'ENAMETOOLONG'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOEXEC'Unds'K-IO'Unds'{}(), Lbl'Hash'EADDRINUSE'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOEXEC'Unds'K-IO'Unds'{}(), Lbl'Hash'EROFS'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOEXEC'Unds'K-IO'Unds'{}(), Lbl'Hash'EPROTONOSUPPORT'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOEXEC'Unds'K-IO'Unds'{}(), Lbl'Hash'ESOCKTNOSUPPORT'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOEXEC'Unds'K-IO'Unds'{}(), Lbl'Hash'ECHILD'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{R} \exists{R} (Val:SortBool{}, \equals{SortBool{}, R} (Val:SortBool{}, Lbl'UndsEqlsSlshEqls'Bool'UndsUnds'BOOL'UndsUnds'Bool'Unds'Bool{}(K0:SortBool{}, K1:SortBool{}))) [functional{}()] // functional
  axiom{R} \exists{R} (Val:SortIOError{}, \equals{SortIOError{}, R} (Val:SortIOError{}, Lbl'Hash'EPFNOSUPPORT'Unds'K-IO'Unds'{}())) [functional{}()] // functional
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EPFNOSUPPORT'Unds'K-IO'Unds'{}(), Lbl'Hash'ESHUTDOWN'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EPFNOSUPPORT'Unds'K-IO'Unds'{}(), Lbl'Hash'EINVAL'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EPFNOSUPPORT'Unds'K-IO'Unds'{}(), Lbl'Hash'EMLINK'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EPFNOSUPPORT'Unds'K-IO'Unds'{}(), Lbl'Hash'EISDIR'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EPFNOSUPPORT'Unds'K-IO'Unds'{}(), Lbl'Hash'EFBIG'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EPFNOSUPPORT'Unds'K-IO'Unds'{}(), Lbl'Hash'ENOTCONN'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EPFNOSUPPORT'Unds'K-IO'Unds'{}(), Lbl'Hash'ENODEV'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EPFNOSUPPORT'Unds'K-IO'Unds'{}(), Lbl'Hash'EEXIST'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EPFNOSUPPORT'Unds'K-IO'Unds'{}(), Lbl'Hash'ELOOP'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EPFNOSUPPORT'Unds'K-IO'Unds'{}(), Lbl'Hash'ENOTEMPTY'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EPFNOSUPPORT'Unds'K-IO'Unds'{}(), Lbl'Hash'EHOSTUNREACH'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EPFNOSUPPORT'Unds'K-IO'Unds'{}(), Lbl'Hash'noparse'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EPFNOSUPPORT'Unds'K-IO'Unds'{}(), Lbl'Hash'EINTR'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EPFNOSUPPORT'Unds'K-IO'Unds'{}(), Lbl'Hash'EMSGSIZE'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EPFNOSUPPORT'Unds'K-IO'Unds'{}(), Lbl'Hash'ENOENT'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EPFNOSUPPORT'Unds'K-IO'Unds'{}(), Lbl'Hash'ENOLCK'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EPFNOSUPPORT'Unds'K-IO'Unds'{}(), Lbl'Hash'EFAULT'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EPFNOSUPPORT'Unds'K-IO'Unds'{}(), Lbl'Hash'ERANGE'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EPFNOSUPPORT'Unds'K-IO'Unds'{}(), Lbl'Hash'EBUSY'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EPFNOSUPPORT'Unds'K-IO'Unds'{}(), Lbl'Hash'EINPROGRESS'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EPFNOSUPPORT'Unds'K-IO'Unds'{}(), Lbl'Hash'ENOMEM'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EPFNOSUPPORT'Unds'K-IO'Unds'{}(), Lbl'Hash'ENOTDIR'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EPFNOSUPPORT'Unds'K-IO'Unds'{}(), Lbl'Hash'ENAMETOOLONG'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EPFNOSUPPORT'Unds'K-IO'Unds'{}(), Lbl'Hash'EADDRINUSE'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EPFNOSUPPORT'Unds'K-IO'Unds'{}(), Lbl'Hash'EROFS'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EPFNOSUPPORT'Unds'K-IO'Unds'{}(), Lbl'Hash'EPROTONOSUPPORT'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EPFNOSUPPORT'Unds'K-IO'Unds'{}(), Lbl'Hash'ESOCKTNOSUPPORT'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EPFNOSUPPORT'Unds'K-IO'Unds'{}(), Lbl'Hash'ECHILD'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{R} \exists{R} (Val:SortIOError{}, \equals{SortIOError{}, R} (Val:SortIOError{}, Lbl'Hash'ESHUTDOWN'Unds'K-IO'Unds'{}())) [functional{}()] // functional
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ESHUTDOWN'Unds'K-IO'Unds'{}(), Lbl'Hash'EINVAL'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ESHUTDOWN'Unds'K-IO'Unds'{}(), Lbl'Hash'EMLINK'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ESHUTDOWN'Unds'K-IO'Unds'{}(), Lbl'Hash'EISDIR'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ESHUTDOWN'Unds'K-IO'Unds'{}(), Lbl'Hash'EFBIG'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ESHUTDOWN'Unds'K-IO'Unds'{}(), Lbl'Hash'ENOTCONN'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ESHUTDOWN'Unds'K-IO'Unds'{}(), Lbl'Hash'ENODEV'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ESHUTDOWN'Unds'K-IO'Unds'{}(), Lbl'Hash'EEXIST'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ESHUTDOWN'Unds'K-IO'Unds'{}(), Lbl'Hash'ELOOP'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ESHUTDOWN'Unds'K-IO'Unds'{}(), Lbl'Hash'ENOTEMPTY'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ESHUTDOWN'Unds'K-IO'Unds'{}(), Lbl'Hash'EHOSTUNREACH'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ESHUTDOWN'Unds'K-IO'Unds'{}(), Lbl'Hash'noparse'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ESHUTDOWN'Unds'K-IO'Unds'{}(), Lbl'Hash'EINTR'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ESHUTDOWN'Unds'K-IO'Unds'{}(), Lbl'Hash'EMSGSIZE'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ESHUTDOWN'Unds'K-IO'Unds'{}(), Lbl'Hash'ENOENT'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ESHUTDOWN'Unds'K-IO'Unds'{}(), Lbl'Hash'ENOLCK'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ESHUTDOWN'Unds'K-IO'Unds'{}(), Lbl'Hash'EFAULT'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ESHUTDOWN'Unds'K-IO'Unds'{}(), Lbl'Hash'ERANGE'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ESHUTDOWN'Unds'K-IO'Unds'{}(), Lbl'Hash'EBUSY'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ESHUTDOWN'Unds'K-IO'Unds'{}(), Lbl'Hash'EINPROGRESS'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ESHUTDOWN'Unds'K-IO'Unds'{}(), Lbl'Hash'ENOMEM'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ESHUTDOWN'Unds'K-IO'Unds'{}(), Lbl'Hash'ENOTDIR'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ESHUTDOWN'Unds'K-IO'Unds'{}(), Lbl'Hash'ENAMETOOLONG'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ESHUTDOWN'Unds'K-IO'Unds'{}(), Lbl'Hash'EADDRINUSE'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ESHUTDOWN'Unds'K-IO'Unds'{}(), Lbl'Hash'EROFS'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ESHUTDOWN'Unds'K-IO'Unds'{}(), Lbl'Hash'EPROTONOSUPPORT'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ESHUTDOWN'Unds'K-IO'Unds'{}(), Lbl'Hash'ESOCKTNOSUPPORT'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ESHUTDOWN'Unds'K-IO'Unds'{}(), Lbl'Hash'ECHILD'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{R} \exists{R} (Val:SortInt{}, \equals{SortInt{}, R} (Val:SortInt{}, LbllengthString'LParUndsRParUnds'STRING'UndsUnds'String{}(K0:SortString{}))) [functional{}()] // functional
  axiom{R} \exists{R} (Val:SortString{}, \equals{SortString{}, R} (Val:SortString{}, LblId2String'LParUndsRParUnds'ID-SYNTAX'UndsUnds'Id{}(K0:SortId{}))) [functional{}()] // functional
  axiom{R} \exists{R} (Val:SortBool{}, \equals{SortBool{}, R} (Val:SortBool{}, Lbl'Unds'xorBool'UndsUnds'BOOL'UndsUnds'Bool'Unds'Bool{}(K0:SortBool{}, K1:SortBool{}))) [functional{}()] // functional
  axiom{R} \exists{R} (Val:SortIOError{}, \equals{SortIOError{}, R} (Val:SortIOError{}, Lbl'Hash'EINVAL'Unds'K-IO'Unds'{}())) [functional{}()] // functional
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EINVAL'Unds'K-IO'Unds'{}(), Lbl'Hash'EMLINK'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EINVAL'Unds'K-IO'Unds'{}(), Lbl'Hash'EISDIR'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EINVAL'Unds'K-IO'Unds'{}(), Lbl'Hash'EFBIG'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EINVAL'Unds'K-IO'Unds'{}(), Lbl'Hash'ENOTCONN'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EINVAL'Unds'K-IO'Unds'{}(), Lbl'Hash'ENODEV'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EINVAL'Unds'K-IO'Unds'{}(), Lbl'Hash'EEXIST'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EINVAL'Unds'K-IO'Unds'{}(), Lbl'Hash'ELOOP'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EINVAL'Unds'K-IO'Unds'{}(), Lbl'Hash'ENOTEMPTY'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EINVAL'Unds'K-IO'Unds'{}(), Lbl'Hash'EHOSTUNREACH'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EINVAL'Unds'K-IO'Unds'{}(), Lbl'Hash'noparse'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EINVAL'Unds'K-IO'Unds'{}(), Lbl'Hash'EINTR'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EINVAL'Unds'K-IO'Unds'{}(), Lbl'Hash'EMSGSIZE'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EINVAL'Unds'K-IO'Unds'{}(), Lbl'Hash'ENOENT'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EINVAL'Unds'K-IO'Unds'{}(), Lbl'Hash'ENOLCK'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EINVAL'Unds'K-IO'Unds'{}(), Lbl'Hash'EFAULT'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EINVAL'Unds'K-IO'Unds'{}(), Lbl'Hash'ERANGE'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EINVAL'Unds'K-IO'Unds'{}(), Lbl'Hash'EBUSY'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EINVAL'Unds'K-IO'Unds'{}(), Lbl'Hash'EINPROGRESS'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EINVAL'Unds'K-IO'Unds'{}(), Lbl'Hash'ENOMEM'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EINVAL'Unds'K-IO'Unds'{}(), Lbl'Hash'ENOTDIR'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EINVAL'Unds'K-IO'Unds'{}(), Lbl'Hash'ENAMETOOLONG'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EINVAL'Unds'K-IO'Unds'{}(), Lbl'Hash'EADDRINUSE'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EINVAL'Unds'K-IO'Unds'{}(), Lbl'Hash'EROFS'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EINVAL'Unds'K-IO'Unds'{}(), Lbl'Hash'EPROTONOSUPPORT'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EINVAL'Unds'K-IO'Unds'{}(), Lbl'Hash'ESOCKTNOSUPPORT'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EINVAL'Unds'K-IO'Unds'{}(), Lbl'Hash'ECHILD'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{R} \exists{R} (Val:SortMap{}, \equals{SortMap{}, R} (Val:SortMap{}, Lbl'Unds'-Map'UndsUnds'MAP'UndsUnds'Map'Unds'Map{}(K0:SortMap{}, K1:SortMap{}))) [functional{}()] // functional
  axiom{R} \exists{R} (Val:SortIOError{}, \equals{SortIOError{}, R} (Val:SortIOError{}, Lbl'Hash'EMLINK'Unds'K-IO'Unds'{}())) [functional{}()] // functional
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EMLINK'Unds'K-IO'Unds'{}(), Lbl'Hash'EISDIR'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EMLINK'Unds'K-IO'Unds'{}(), Lbl'Hash'EFBIG'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EMLINK'Unds'K-IO'Unds'{}(), Lbl'Hash'ENOTCONN'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EMLINK'Unds'K-IO'Unds'{}(), Lbl'Hash'ENODEV'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EMLINK'Unds'K-IO'Unds'{}(), Lbl'Hash'EEXIST'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EMLINK'Unds'K-IO'Unds'{}(), Lbl'Hash'ELOOP'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EMLINK'Unds'K-IO'Unds'{}(), Lbl'Hash'ENOTEMPTY'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EMLINK'Unds'K-IO'Unds'{}(), Lbl'Hash'EHOSTUNREACH'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EMLINK'Unds'K-IO'Unds'{}(), Lbl'Hash'noparse'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EMLINK'Unds'K-IO'Unds'{}(), Lbl'Hash'EINTR'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EMLINK'Unds'K-IO'Unds'{}(), Lbl'Hash'EMSGSIZE'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EMLINK'Unds'K-IO'Unds'{}(), Lbl'Hash'ENOENT'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EMLINK'Unds'K-IO'Unds'{}(), Lbl'Hash'ENOLCK'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EMLINK'Unds'K-IO'Unds'{}(), Lbl'Hash'EFAULT'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EMLINK'Unds'K-IO'Unds'{}(), Lbl'Hash'ERANGE'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EMLINK'Unds'K-IO'Unds'{}(), Lbl'Hash'EBUSY'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EMLINK'Unds'K-IO'Unds'{}(), Lbl'Hash'EINPROGRESS'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EMLINK'Unds'K-IO'Unds'{}(), Lbl'Hash'ENOMEM'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EMLINK'Unds'K-IO'Unds'{}(), Lbl'Hash'ENOTDIR'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EMLINK'Unds'K-IO'Unds'{}(), Lbl'Hash'ENAMETOOLONG'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EMLINK'Unds'K-IO'Unds'{}(), Lbl'Hash'EADDRINUSE'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EMLINK'Unds'K-IO'Unds'{}(), Lbl'Hash'EROFS'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EMLINK'Unds'K-IO'Unds'{}(), Lbl'Hash'EPROTONOSUPPORT'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EMLINK'Unds'K-IO'Unds'{}(), Lbl'Hash'ESOCKTNOSUPPORT'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EMLINK'Unds'K-IO'Unds'{}(), Lbl'Hash'ECHILD'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{R} \exists{R} (Val:SortInt{}, \equals{SortInt{}, R} (Val:SortInt{}, Lbl'UndsPipe'Int'UndsUnds'INT'UndsUnds'Int'Unds'Int{}(K0:SortInt{}, K1:SortInt{}))) [functional{}()] // functional
  axiom{R} \exists{R} (Val:SortInt{}, \equals{SortInt{}, R} (Val:SortInt{}, Lbl'Hash'stderr'Unds'K-IO'Unds'{}())) [functional{}()] // functional
  axiom{R} \exists{R} (Val:SortMap{}, \equals{SortMap{}, R} (Val:SortMap{}, LblupdateMap'LParUndsCommUndsRParUnds'MAP'UndsUnds'Map'Unds'Map{}(K0:SortMap{}, K1:SortMap{}))) [functional{}()] // functional
  axiom{R} \exists{R} (Val:SortBool{}, \equals{SortBool{}, R} (Val:SortBool{}, Lbl'Unds'orElseBool'UndsUnds'BOOL'UndsUnds'Bool'Unds'Bool{}(K0:SortBool{}, K1:SortBool{}))) [functional{}()] // functional
  axiom{R} \exists{R} (Val:SortIOError{}, \equals{SortIOError{}, R} (Val:SortIOError{}, Lbl'Hash'EISDIR'Unds'K-IO'Unds'{}())) [functional{}()] // functional
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EISDIR'Unds'K-IO'Unds'{}(), Lbl'Hash'EFBIG'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EISDIR'Unds'K-IO'Unds'{}(), Lbl'Hash'ENOTCONN'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EISDIR'Unds'K-IO'Unds'{}(), Lbl'Hash'ENODEV'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EISDIR'Unds'K-IO'Unds'{}(), Lbl'Hash'EEXIST'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EISDIR'Unds'K-IO'Unds'{}(), Lbl'Hash'ELOOP'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EISDIR'Unds'K-IO'Unds'{}(), Lbl'Hash'ENOTEMPTY'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EISDIR'Unds'K-IO'Unds'{}(), Lbl'Hash'EHOSTUNREACH'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EISDIR'Unds'K-IO'Unds'{}(), Lbl'Hash'noparse'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EISDIR'Unds'K-IO'Unds'{}(), Lbl'Hash'EINTR'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EISDIR'Unds'K-IO'Unds'{}(), Lbl'Hash'EMSGSIZE'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EISDIR'Unds'K-IO'Unds'{}(), Lbl'Hash'ENOENT'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EISDIR'Unds'K-IO'Unds'{}(), Lbl'Hash'ENOLCK'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EISDIR'Unds'K-IO'Unds'{}(), Lbl'Hash'EFAULT'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EISDIR'Unds'K-IO'Unds'{}(), Lbl'Hash'ERANGE'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EISDIR'Unds'K-IO'Unds'{}(), Lbl'Hash'EBUSY'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EISDIR'Unds'K-IO'Unds'{}(), Lbl'Hash'EINPROGRESS'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EISDIR'Unds'K-IO'Unds'{}(), Lbl'Hash'ENOMEM'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EISDIR'Unds'K-IO'Unds'{}(), Lbl'Hash'ENOTDIR'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EISDIR'Unds'K-IO'Unds'{}(), Lbl'Hash'ENAMETOOLONG'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EISDIR'Unds'K-IO'Unds'{}(), Lbl'Hash'EADDRINUSE'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EISDIR'Unds'K-IO'Unds'{}(), Lbl'Hash'EROFS'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EISDIR'Unds'K-IO'Unds'{}(), Lbl'Hash'EPROTONOSUPPORT'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EISDIR'Unds'K-IO'Unds'{}(), Lbl'Hash'ESOCKTNOSUPPORT'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EISDIR'Unds'K-IO'Unds'{}(), Lbl'Hash'ECHILD'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{R} \exists{R} (Val:SortKItem{}, \equals{SortKItem{}, R} (Val:SortKItem{}, Lbl'Hash'freezerif'LParUndsRParUnds'else'UndsUnds'IMP-SYNTAX'UndsUnds'BExp'Unds'Block'Unds'Block1'Unds'{}(K0:SortK{}, K1:SortK{}))) [functional{}()] // functional
  axiom{}\implies{SortKItem{}} (\and{SortKItem{}} (Lbl'Hash'freezerif'LParUndsRParUnds'else'UndsUnds'IMP-SYNTAX'UndsUnds'BExp'Unds'Block'Unds'Block1'Unds'{}(X0:SortK{}, X1:SortK{}), Lbl'Hash'freezerif'LParUndsRParUnds'else'UndsUnds'IMP-SYNTAX'UndsUnds'BExp'Unds'Block'Unds'Block1'Unds'{}(Y0:SortK{}, Y1:SortK{})), Lbl'Hash'freezerif'LParUndsRParUnds'else'UndsUnds'IMP-SYNTAX'UndsUnds'BExp'Unds'Block'Unds'Block1'Unds'{}(\and{SortK{}} (X0:SortK{}, Y0:SortK{}), \and{SortK{}} (X1:SortK{}, Y1:SortK{}))) [constructor{}()] // no confusion same constructor
  axiom{}\not{SortKItem{}} (\and{SortKItem{}} (Lbl'Hash'freezerif'LParUndsRParUnds'else'UndsUnds'IMP-SYNTAX'UndsUnds'BExp'Unds'Block'Unds'Block1'Unds'{}(X0:SortK{}, X1:SortK{}), Lbl'Hash'systemResult'LParUndsCommUndsCommUndsRParUnds'K-IO'UndsUnds'Int'Unds'String'Unds'String{}(Y0:SortInt{}, Y1:SortString{}, Y2:SortString{}))) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortKItem{}} (\and{SortKItem{}} (Lbl'Hash'freezerif'LParUndsRParUnds'else'UndsUnds'IMP-SYNTAX'UndsUnds'BExp'Unds'Block'Unds'Block1'Unds'{}(X0:SortK{}, X1:SortK{}), Lbl'Hash'freezer'Unds-LT-EqlsUndsUnds'IMP-SYNTAX'UndsUnds'AExp'Unds'AExp1'Unds'{}(Y0:SortK{}))) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortKItem{}} (\and{SortKItem{}} (Lbl'Hash'freezerif'LParUndsRParUnds'else'UndsUnds'IMP-SYNTAX'UndsUnds'BExp'Unds'Block'Unds'Block1'Unds'{}(X0:SortK{}, X1:SortK{}), Lbl'Hash'freezer'Unds-LT-EqlsUndsUnds'IMP-SYNTAX'UndsUnds'AExp'Unds'AExp0'Unds'{}(Y0:SortK{}))) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortKItem{}} (\and{SortKItem{}} (Lbl'Hash'freezerif'LParUndsRParUnds'else'UndsUnds'IMP-SYNTAX'UndsUnds'BExp'Unds'Block'Unds'Block1'Unds'{}(X0:SortK{}, X1:SortK{}), Lbl'Hash'freezer'BangUndsUnds'IMP-SYNTAX'UndsUnds'BExp0'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortKItem{}} (\and{SortKItem{}} (Lbl'Hash'freezerif'LParUndsRParUnds'else'UndsUnds'IMP-SYNTAX'UndsUnds'BExp'Unds'Block'Unds'Block1'Unds'{}(X0:SortK{}, X1:SortK{}), Lbl'Hash'freezer'UndsEqlsUndsSClnUnds'IMP-SYNTAX'UndsUnds'Id'Unds'AExp0'Unds'{}(Y0:SortK{}))) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortKItem{}} (\and{SortKItem{}} (Lbl'Hash'freezerif'LParUndsRParUnds'else'UndsUnds'IMP-SYNTAX'UndsUnds'BExp'Unds'Block'Unds'Block1'Unds'{}(X0:SortK{}, X1:SortK{}), Lbl'Hash'freezer'UndsSlshUndsUnds'IMP-SYNTAX'UndsUnds'AExp'Unds'AExp0'Unds'{}(Y0:SortK{}))) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortKItem{}} (\and{SortKItem{}} (Lbl'Hash'freezerif'LParUndsRParUnds'else'UndsUnds'IMP-SYNTAX'UndsUnds'BExp'Unds'Block'Unds'Block1'Unds'{}(X0:SortK{}, X1:SortK{}), Lbl'Hash'freezer'UndsPlusUndsUnds'IMP-SYNTAX'UndsUnds'AExp'Unds'AExp1'Unds'{}(Y0:SortK{}))) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortKItem{}} (\and{SortKItem{}} (Lbl'Hash'freezerif'LParUndsRParUnds'else'UndsUnds'IMP-SYNTAX'UndsUnds'BExp'Unds'Block'Unds'Block1'Unds'{}(X0:SortK{}, X1:SortK{}), Lbl'Hash'freezer'UndsAndAndUndsUnds'IMP-SYNTAX'UndsUnds'BExp'Unds'BExp1'Unds'{}(Y0:SortK{}))) [constructor{}()] // no confusion different constructors
  axiom{R} \exists{R} (Val:SortKItem{}, \equals{SortKItem{}, R} (Val:SortKItem{}, Lbl'Hash'systemResult'LParUndsCommUndsCommUndsRParUnds'K-IO'UndsUnds'Int'Unds'String'Unds'String{}(K0:SortInt{}, K1:SortString{}, K2:SortString{}))) [functional{}()] // functional
  axiom{}\implies{SortKItem{}} (\and{SortKItem{}} (Lbl'Hash'systemResult'LParUndsCommUndsCommUndsRParUnds'K-IO'UndsUnds'Int'Unds'String'Unds'String{}(X0:SortInt{}, X1:SortString{}, X2:SortString{}), Lbl'Hash'systemResult'LParUndsCommUndsCommUndsRParUnds'K-IO'UndsUnds'Int'Unds'String'Unds'String{}(Y0:SortInt{}, Y1:SortString{}, Y2:SortString{})), Lbl'Hash'systemResult'LParUndsCommUndsCommUndsRParUnds'K-IO'UndsUnds'Int'Unds'String'Unds'String{}(\and{SortInt{}} (X0:SortInt{}, Y0:SortInt{}), \and{SortString{}} (X1:SortString{}, Y1:SortString{}), \and{SortString{}} (X2:SortString{}, Y2:SortString{}))) [constructor{}()] // no confusion same constructor
  axiom{}\not{SortKItem{}} (\and{SortKItem{}} (Lbl'Hash'systemResult'LParUndsCommUndsCommUndsRParUnds'K-IO'UndsUnds'Int'Unds'String'Unds'String{}(X0:SortInt{}, X1:SortString{}, X2:SortString{}), Lbl'Hash'freezer'Unds-LT-EqlsUndsUnds'IMP-SYNTAX'UndsUnds'AExp'Unds'AExp1'Unds'{}(Y0:SortK{}))) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortKItem{}} (\and{SortKItem{}} (Lbl'Hash'systemResult'LParUndsCommUndsCommUndsRParUnds'K-IO'UndsUnds'Int'Unds'String'Unds'String{}(X0:SortInt{}, X1:SortString{}, X2:SortString{}), Lbl'Hash'freezer'Unds-LT-EqlsUndsUnds'IMP-SYNTAX'UndsUnds'AExp'Unds'AExp0'Unds'{}(Y0:SortK{}))) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortKItem{}} (\and{SortKItem{}} (Lbl'Hash'systemResult'LParUndsCommUndsCommUndsRParUnds'K-IO'UndsUnds'Int'Unds'String'Unds'String{}(X0:SortInt{}, X1:SortString{}, X2:SortString{}), Lbl'Hash'freezer'BangUndsUnds'IMP-SYNTAX'UndsUnds'BExp0'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortKItem{}} (\and{SortKItem{}} (Lbl'Hash'systemResult'LParUndsCommUndsCommUndsRParUnds'K-IO'UndsUnds'Int'Unds'String'Unds'String{}(X0:SortInt{}, X1:SortString{}, X2:SortString{}), Lbl'Hash'freezer'UndsEqlsUndsSClnUnds'IMP-SYNTAX'UndsUnds'Id'Unds'AExp0'Unds'{}(Y0:SortK{}))) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortKItem{}} (\and{SortKItem{}} (Lbl'Hash'systemResult'LParUndsCommUndsCommUndsRParUnds'K-IO'UndsUnds'Int'Unds'String'Unds'String{}(X0:SortInt{}, X1:SortString{}, X2:SortString{}), Lbl'Hash'freezer'UndsSlshUndsUnds'IMP-SYNTAX'UndsUnds'AExp'Unds'AExp0'Unds'{}(Y0:SortK{}))) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortKItem{}} (\and{SortKItem{}} (Lbl'Hash'systemResult'LParUndsCommUndsCommUndsRParUnds'K-IO'UndsUnds'Int'Unds'String'Unds'String{}(X0:SortInt{}, X1:SortString{}, X2:SortString{}), Lbl'Hash'freezer'UndsPlusUndsUnds'IMP-SYNTAX'UndsUnds'AExp'Unds'AExp1'Unds'{}(Y0:SortK{}))) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortKItem{}} (\and{SortKItem{}} (Lbl'Hash'systemResult'LParUndsCommUndsCommUndsRParUnds'K-IO'UndsUnds'Int'Unds'String'Unds'String{}(X0:SortInt{}, X1:SortString{}, X2:SortString{}), Lbl'Hash'freezer'UndsAndAndUndsUnds'IMP-SYNTAX'UndsUnds'BExp'Unds'BExp1'Unds'{}(Y0:SortK{}))) [constructor{}()] // no confusion different constructors
  axiom{R} \exists{R} (Val:SortAExp{}, \equals{SortAExp{}, R} (Val:SortAExp{}, Lbl'UndsSlshUndsUnds'IMP-SYNTAX'UndsUnds'AExp'Unds'AExp{}(K0:SortAExp{}, K1:SortAExp{}))) [functional{}()] // functional
  axiom{}\implies{SortAExp{}} (\and{SortAExp{}} (Lbl'UndsSlshUndsUnds'IMP-SYNTAX'UndsUnds'AExp'Unds'AExp{}(X0:SortAExp{}, X1:SortAExp{}), Lbl'UndsSlshUndsUnds'IMP-SYNTAX'UndsUnds'AExp'Unds'AExp{}(Y0:SortAExp{}, Y1:SortAExp{})), Lbl'UndsSlshUndsUnds'IMP-SYNTAX'UndsUnds'AExp'Unds'AExp{}(\and{SortAExp{}} (X0:SortAExp{}, Y0:SortAExp{}), \and{SortAExp{}} (X1:SortAExp{}, Y1:SortAExp{}))) [constructor{}()] // no confusion same constructor
  axiom{}\not{SortAExp{}} (\and{SortAExp{}} (Lbl'UndsSlshUndsUnds'IMP-SYNTAX'UndsUnds'AExp'Unds'AExp{}(X0:SortAExp{}, X1:SortAExp{}), Lbl'UndsPlusUndsUnds'IMP-SYNTAX'UndsUnds'AExp'Unds'AExp{}(Y0:SortAExp{}, Y1:SortAExp{}))) [constructor{}()] // no confusion different constructors
  axiom{R} \exists{R} (Val:SortIOError{}, \equals{SortIOError{}, R} (Val:SortIOError{}, Lbl'Hash'EFBIG'Unds'K-IO'Unds'{}())) [functional{}()] // functional
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EFBIG'Unds'K-IO'Unds'{}(), Lbl'Hash'ENOTCONN'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EFBIG'Unds'K-IO'Unds'{}(), Lbl'Hash'ENODEV'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EFBIG'Unds'K-IO'Unds'{}(), Lbl'Hash'EEXIST'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EFBIG'Unds'K-IO'Unds'{}(), Lbl'Hash'ELOOP'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EFBIG'Unds'K-IO'Unds'{}(), Lbl'Hash'ENOTEMPTY'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EFBIG'Unds'K-IO'Unds'{}(), Lbl'Hash'EHOSTUNREACH'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EFBIG'Unds'K-IO'Unds'{}(), Lbl'Hash'noparse'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EFBIG'Unds'K-IO'Unds'{}(), Lbl'Hash'EINTR'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EFBIG'Unds'K-IO'Unds'{}(), Lbl'Hash'EMSGSIZE'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EFBIG'Unds'K-IO'Unds'{}(), Lbl'Hash'ENOENT'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EFBIG'Unds'K-IO'Unds'{}(), Lbl'Hash'ENOLCK'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EFBIG'Unds'K-IO'Unds'{}(), Lbl'Hash'EFAULT'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EFBIG'Unds'K-IO'Unds'{}(), Lbl'Hash'ERANGE'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EFBIG'Unds'K-IO'Unds'{}(), Lbl'Hash'EBUSY'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EFBIG'Unds'K-IO'Unds'{}(), Lbl'Hash'EINPROGRESS'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EFBIG'Unds'K-IO'Unds'{}(), Lbl'Hash'ENOMEM'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EFBIG'Unds'K-IO'Unds'{}(), Lbl'Hash'ENOTDIR'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EFBIG'Unds'K-IO'Unds'{}(), Lbl'Hash'ENAMETOOLONG'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EFBIG'Unds'K-IO'Unds'{}(), Lbl'Hash'EADDRINUSE'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EFBIG'Unds'K-IO'Unds'{}(), Lbl'Hash'EROFS'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EFBIG'Unds'K-IO'Unds'{}(), Lbl'Hash'EPROTONOSUPPORT'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EFBIG'Unds'K-IO'Unds'{}(), Lbl'Hash'ESOCKTNOSUPPORT'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EFBIG'Unds'K-IO'Unds'{}(), Lbl'Hash'ECHILD'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{R} \exists{R} (Val:SortIOError{}, \equals{SortIOError{}, R} (Val:SortIOError{}, Lbl'Hash'ENOTCONN'Unds'K-IO'Unds'{}())) [functional{}()] // functional
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOTCONN'Unds'K-IO'Unds'{}(), Lbl'Hash'ENODEV'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOTCONN'Unds'K-IO'Unds'{}(), Lbl'Hash'EEXIST'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOTCONN'Unds'K-IO'Unds'{}(), Lbl'Hash'ELOOP'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOTCONN'Unds'K-IO'Unds'{}(), Lbl'Hash'ENOTEMPTY'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOTCONN'Unds'K-IO'Unds'{}(), Lbl'Hash'EHOSTUNREACH'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOTCONN'Unds'K-IO'Unds'{}(), Lbl'Hash'noparse'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOTCONN'Unds'K-IO'Unds'{}(), Lbl'Hash'EINTR'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOTCONN'Unds'K-IO'Unds'{}(), Lbl'Hash'EMSGSIZE'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOTCONN'Unds'K-IO'Unds'{}(), Lbl'Hash'ENOENT'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOTCONN'Unds'K-IO'Unds'{}(), Lbl'Hash'ENOLCK'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOTCONN'Unds'K-IO'Unds'{}(), Lbl'Hash'EFAULT'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOTCONN'Unds'K-IO'Unds'{}(), Lbl'Hash'ERANGE'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOTCONN'Unds'K-IO'Unds'{}(), Lbl'Hash'EBUSY'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOTCONN'Unds'K-IO'Unds'{}(), Lbl'Hash'EINPROGRESS'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOTCONN'Unds'K-IO'Unds'{}(), Lbl'Hash'ENOMEM'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOTCONN'Unds'K-IO'Unds'{}(), Lbl'Hash'ENOTDIR'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOTCONN'Unds'K-IO'Unds'{}(), Lbl'Hash'ENAMETOOLONG'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOTCONN'Unds'K-IO'Unds'{}(), Lbl'Hash'EADDRINUSE'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOTCONN'Unds'K-IO'Unds'{}(), Lbl'Hash'EROFS'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOTCONN'Unds'K-IO'Unds'{}(), Lbl'Hash'EPROTONOSUPPORT'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOTCONN'Unds'K-IO'Unds'{}(), Lbl'Hash'ESOCKTNOSUPPORT'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOTCONN'Unds'K-IO'Unds'{}(), Lbl'Hash'ECHILD'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{R} \exists{R} (Val:SortIOError{}, \equals{SortIOError{}, R} (Val:SortIOError{}, Lbl'Hash'ENODEV'Unds'K-IO'Unds'{}())) [functional{}()] // functional
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENODEV'Unds'K-IO'Unds'{}(), Lbl'Hash'EEXIST'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENODEV'Unds'K-IO'Unds'{}(), Lbl'Hash'ELOOP'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENODEV'Unds'K-IO'Unds'{}(), Lbl'Hash'ENOTEMPTY'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENODEV'Unds'K-IO'Unds'{}(), Lbl'Hash'EHOSTUNREACH'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENODEV'Unds'K-IO'Unds'{}(), Lbl'Hash'noparse'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENODEV'Unds'K-IO'Unds'{}(), Lbl'Hash'EINTR'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENODEV'Unds'K-IO'Unds'{}(), Lbl'Hash'EMSGSIZE'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENODEV'Unds'K-IO'Unds'{}(), Lbl'Hash'ENOENT'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENODEV'Unds'K-IO'Unds'{}(), Lbl'Hash'ENOLCK'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENODEV'Unds'K-IO'Unds'{}(), Lbl'Hash'EFAULT'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENODEV'Unds'K-IO'Unds'{}(), Lbl'Hash'ERANGE'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENODEV'Unds'K-IO'Unds'{}(), Lbl'Hash'EBUSY'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENODEV'Unds'K-IO'Unds'{}(), Lbl'Hash'EINPROGRESS'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENODEV'Unds'K-IO'Unds'{}(), Lbl'Hash'ENOMEM'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENODEV'Unds'K-IO'Unds'{}(), Lbl'Hash'ENOTDIR'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENODEV'Unds'K-IO'Unds'{}(), Lbl'Hash'ENAMETOOLONG'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENODEV'Unds'K-IO'Unds'{}(), Lbl'Hash'EADDRINUSE'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENODEV'Unds'K-IO'Unds'{}(), Lbl'Hash'EROFS'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENODEV'Unds'K-IO'Unds'{}(), Lbl'Hash'EPROTONOSUPPORT'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENODEV'Unds'K-IO'Unds'{}(), Lbl'Hash'ESOCKTNOSUPPORT'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENODEV'Unds'K-IO'Unds'{}(), Lbl'Hash'ECHILD'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{R} \exists{R} (Val:SortKItem{}, \equals{SortKItem{}, R} (Val:SortKItem{}, Lbl'Hash'freezer'Unds-LT-EqlsUndsUnds'IMP-SYNTAX'UndsUnds'AExp'Unds'AExp1'Unds'{}(K0:SortK{}))) [functional{}()] // functional
  axiom{}\implies{SortKItem{}} (\and{SortKItem{}} (Lbl'Hash'freezer'Unds-LT-EqlsUndsUnds'IMP-SYNTAX'UndsUnds'AExp'Unds'AExp1'Unds'{}(X0:SortK{}), Lbl'Hash'freezer'Unds-LT-EqlsUndsUnds'IMP-SYNTAX'UndsUnds'AExp'Unds'AExp1'Unds'{}(Y0:SortK{})), Lbl'Hash'freezer'Unds-LT-EqlsUndsUnds'IMP-SYNTAX'UndsUnds'AExp'Unds'AExp1'Unds'{}(\and{SortK{}} (X0:SortK{}, Y0:SortK{}))) [constructor{}()] // no confusion same constructor
  axiom{}\not{SortKItem{}} (\and{SortKItem{}} (Lbl'Hash'freezer'Unds-LT-EqlsUndsUnds'IMP-SYNTAX'UndsUnds'AExp'Unds'AExp1'Unds'{}(X0:SortK{}), Lbl'Hash'freezer'Unds-LT-EqlsUndsUnds'IMP-SYNTAX'UndsUnds'AExp'Unds'AExp0'Unds'{}(Y0:SortK{}))) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortKItem{}} (\and{SortKItem{}} (Lbl'Hash'freezer'Unds-LT-EqlsUndsUnds'IMP-SYNTAX'UndsUnds'AExp'Unds'AExp1'Unds'{}(X0:SortK{}), Lbl'Hash'freezer'BangUndsUnds'IMP-SYNTAX'UndsUnds'BExp0'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortKItem{}} (\and{SortKItem{}} (Lbl'Hash'freezer'Unds-LT-EqlsUndsUnds'IMP-SYNTAX'UndsUnds'AExp'Unds'AExp1'Unds'{}(X0:SortK{}), Lbl'Hash'freezer'UndsEqlsUndsSClnUnds'IMP-SYNTAX'UndsUnds'Id'Unds'AExp0'Unds'{}(Y0:SortK{}))) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortKItem{}} (\and{SortKItem{}} (Lbl'Hash'freezer'Unds-LT-EqlsUndsUnds'IMP-SYNTAX'UndsUnds'AExp'Unds'AExp1'Unds'{}(X0:SortK{}), Lbl'Hash'freezer'UndsSlshUndsUnds'IMP-SYNTAX'UndsUnds'AExp'Unds'AExp0'Unds'{}(Y0:SortK{}))) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortKItem{}} (\and{SortKItem{}} (Lbl'Hash'freezer'Unds-LT-EqlsUndsUnds'IMP-SYNTAX'UndsUnds'AExp'Unds'AExp1'Unds'{}(X0:SortK{}), Lbl'Hash'freezer'UndsPlusUndsUnds'IMP-SYNTAX'UndsUnds'AExp'Unds'AExp1'Unds'{}(Y0:SortK{}))) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortKItem{}} (\and{SortKItem{}} (Lbl'Hash'freezer'Unds-LT-EqlsUndsUnds'IMP-SYNTAX'UndsUnds'AExp'Unds'AExp1'Unds'{}(X0:SortK{}), Lbl'Hash'freezer'UndsAndAndUndsUnds'IMP-SYNTAX'UndsUnds'BExp'Unds'BExp1'Unds'{}(Y0:SortK{}))) [constructor{}()] // no confusion different constructors
  axiom{R} \exists{R} (Val:SortIOError{}, \equals{SortIOError{}, R} (Val:SortIOError{}, Lbl'Hash'EEXIST'Unds'K-IO'Unds'{}())) [functional{}()] // functional
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EEXIST'Unds'K-IO'Unds'{}(), Lbl'Hash'ELOOP'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EEXIST'Unds'K-IO'Unds'{}(), Lbl'Hash'ENOTEMPTY'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EEXIST'Unds'K-IO'Unds'{}(), Lbl'Hash'EHOSTUNREACH'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EEXIST'Unds'K-IO'Unds'{}(), Lbl'Hash'noparse'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EEXIST'Unds'K-IO'Unds'{}(), Lbl'Hash'EINTR'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EEXIST'Unds'K-IO'Unds'{}(), Lbl'Hash'EMSGSIZE'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EEXIST'Unds'K-IO'Unds'{}(), Lbl'Hash'ENOENT'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EEXIST'Unds'K-IO'Unds'{}(), Lbl'Hash'ENOLCK'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EEXIST'Unds'K-IO'Unds'{}(), Lbl'Hash'EFAULT'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EEXIST'Unds'K-IO'Unds'{}(), Lbl'Hash'ERANGE'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EEXIST'Unds'K-IO'Unds'{}(), Lbl'Hash'EBUSY'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EEXIST'Unds'K-IO'Unds'{}(), Lbl'Hash'EINPROGRESS'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EEXIST'Unds'K-IO'Unds'{}(), Lbl'Hash'ENOMEM'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EEXIST'Unds'K-IO'Unds'{}(), Lbl'Hash'ENOTDIR'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EEXIST'Unds'K-IO'Unds'{}(), Lbl'Hash'ENAMETOOLONG'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EEXIST'Unds'K-IO'Unds'{}(), Lbl'Hash'EADDRINUSE'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EEXIST'Unds'K-IO'Unds'{}(), Lbl'Hash'EROFS'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EEXIST'Unds'K-IO'Unds'{}(), Lbl'Hash'EPROTONOSUPPORT'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EEXIST'Unds'K-IO'Unds'{}(), Lbl'Hash'ESOCKTNOSUPPORT'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EEXIST'Unds'K-IO'Unds'{}(), Lbl'Hash'ECHILD'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{R} \exists{R} (Val:SortStream{}, \equals{SortStream{}, R} (Val:SortStream{}, Lbl'Hash'buffer'LParUndsRParUnds'K-IO'UndsUnds'K{}(K0:SortK{}))) [functional{}()] // functional
  axiom{}\implies{SortStream{}} (\and{SortStream{}} (Lbl'Hash'buffer'LParUndsRParUnds'K-IO'UndsUnds'K{}(X0:SortK{}), Lbl'Hash'buffer'LParUndsRParUnds'K-IO'UndsUnds'K{}(Y0:SortK{})), Lbl'Hash'buffer'LParUndsRParUnds'K-IO'UndsUnds'K{}(\and{SortK{}} (X0:SortK{}, Y0:SortK{}))) [constructor{}()] // no confusion same constructor
  axiom{R} \exists{R} (Val:SortIOError{}, \equals{SortIOError{}, R} (Val:SortIOError{}, Lbl'Hash'ELOOP'Unds'K-IO'Unds'{}())) [functional{}()] // functional
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ELOOP'Unds'K-IO'Unds'{}(), Lbl'Hash'ENOTEMPTY'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ELOOP'Unds'K-IO'Unds'{}(), Lbl'Hash'EHOSTUNREACH'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ELOOP'Unds'K-IO'Unds'{}(), Lbl'Hash'noparse'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ELOOP'Unds'K-IO'Unds'{}(), Lbl'Hash'EINTR'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ELOOP'Unds'K-IO'Unds'{}(), Lbl'Hash'EMSGSIZE'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ELOOP'Unds'K-IO'Unds'{}(), Lbl'Hash'ENOENT'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ELOOP'Unds'K-IO'Unds'{}(), Lbl'Hash'ENOLCK'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ELOOP'Unds'K-IO'Unds'{}(), Lbl'Hash'EFAULT'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ELOOP'Unds'K-IO'Unds'{}(), Lbl'Hash'ERANGE'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ELOOP'Unds'K-IO'Unds'{}(), Lbl'Hash'EBUSY'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ELOOP'Unds'K-IO'Unds'{}(), Lbl'Hash'EINPROGRESS'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ELOOP'Unds'K-IO'Unds'{}(), Lbl'Hash'ENOMEM'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ELOOP'Unds'K-IO'Unds'{}(), Lbl'Hash'ENOTDIR'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ELOOP'Unds'K-IO'Unds'{}(), Lbl'Hash'ENAMETOOLONG'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ELOOP'Unds'K-IO'Unds'{}(), Lbl'Hash'EADDRINUSE'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ELOOP'Unds'K-IO'Unds'{}(), Lbl'Hash'EROFS'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ELOOP'Unds'K-IO'Unds'{}(), Lbl'Hash'EPROTONOSUPPORT'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ELOOP'Unds'K-IO'Unds'{}(), Lbl'Hash'ESOCKTNOSUPPORT'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ELOOP'Unds'K-IO'Unds'{}(), Lbl'Hash'ECHILD'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{R} \exists{R} (Val:SortBool{}, \equals{SortBool{}, R} (Val:SortBool{}, LblnotBool'Unds'{}(K0:SortBool{}))) [functional{}()] // functional
  axiom{R} \exists{R} (Val:SortSet{}, \equals{SortSet{}, R} (Val:SortSet{}, Lblkeys'LParUndsRParUnds'MAP'UndsUnds'Map{}(K0:SortMap{}))) [functional{}()] // functional
  axiom{R} \exists{R} (Val:SortAExp{}, \equals{SortAExp{}, R} (Val:SortAExp{}, Lbl'UndsPlusUndsUnds'IMP-SYNTAX'UndsUnds'AExp'Unds'AExp{}(K0:SortAExp{}, K1:SortAExp{}))) [functional{}()] // functional
  axiom{}\implies{SortAExp{}} (\and{SortAExp{}} (Lbl'UndsPlusUndsUnds'IMP-SYNTAX'UndsUnds'AExp'Unds'AExp{}(X0:SortAExp{}, X1:SortAExp{}), Lbl'UndsPlusUndsUnds'IMP-SYNTAX'UndsUnds'AExp'Unds'AExp{}(Y0:SortAExp{}, Y1:SortAExp{})), Lbl'UndsPlusUndsUnds'IMP-SYNTAX'UndsUnds'AExp'Unds'AExp{}(\and{SortAExp{}} (X0:SortAExp{}, Y0:SortAExp{}), \and{SortAExp{}} (X1:SortAExp{}, Y1:SortAExp{}))) [constructor{}()] // no confusion same constructor
  axiom{R} \exists{R} (Val:SortStmt{}, \equals{SortStmt{}, R} (Val:SortStmt{}, Lbl'UndsUndsUnds'IMP-SYNTAX'UndsUnds'Stmt'Unds'Stmt{}(K0:SortStmt{}, K1:SortStmt{}))) [functional{}()] // functional
  axiom{}\implies{SortStmt{}} (\and{SortStmt{}} (Lbl'UndsUndsUnds'IMP-SYNTAX'UndsUnds'Stmt'Unds'Stmt{}(X0:SortStmt{}, X1:SortStmt{}), Lbl'UndsUndsUnds'IMP-SYNTAX'UndsUnds'Stmt'Unds'Stmt{}(Y0:SortStmt{}, Y1:SortStmt{})), Lbl'UndsUndsUnds'IMP-SYNTAX'UndsUnds'Stmt'Unds'Stmt{}(\and{SortStmt{}} (X0:SortStmt{}, Y0:SortStmt{}), \and{SortStmt{}} (X1:SortStmt{}, Y1:SortStmt{}))) [constructor{}()] // no confusion same constructor
  axiom{}\not{SortStmt{}} (\and{SortStmt{}} (Lbl'UndsUndsUnds'IMP-SYNTAX'UndsUnds'Stmt'Unds'Stmt{}(X0:SortStmt{}, X1:SortStmt{}), Lblif'LParUndsRParUnds'else'UndsUnds'IMP-SYNTAX'UndsUnds'BExp'Unds'Block'Unds'Block{}(Y0:SortBExp{}, Y1:SortBlock{}, Y2:SortBlock{}))) [constructor{}()] // no confusion different constructors
  axiom{R} \exists{R} (Val:SortIOError{}, \equals{SortIOError{}, R} (Val:SortIOError{}, Lbl'Hash'ENOTEMPTY'Unds'K-IO'Unds'{}())) [functional{}()] // functional
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOTEMPTY'Unds'K-IO'Unds'{}(), Lbl'Hash'EHOSTUNREACH'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOTEMPTY'Unds'K-IO'Unds'{}(), Lbl'Hash'noparse'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOTEMPTY'Unds'K-IO'Unds'{}(), Lbl'Hash'EINTR'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOTEMPTY'Unds'K-IO'Unds'{}(), Lbl'Hash'EMSGSIZE'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOTEMPTY'Unds'K-IO'Unds'{}(), Lbl'Hash'ENOENT'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOTEMPTY'Unds'K-IO'Unds'{}(), Lbl'Hash'ENOLCK'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOTEMPTY'Unds'K-IO'Unds'{}(), Lbl'Hash'EFAULT'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOTEMPTY'Unds'K-IO'Unds'{}(), Lbl'Hash'ERANGE'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOTEMPTY'Unds'K-IO'Unds'{}(), Lbl'Hash'EBUSY'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOTEMPTY'Unds'K-IO'Unds'{}(), Lbl'Hash'EINPROGRESS'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOTEMPTY'Unds'K-IO'Unds'{}(), Lbl'Hash'ENOMEM'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOTEMPTY'Unds'K-IO'Unds'{}(), Lbl'Hash'ENOTDIR'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOTEMPTY'Unds'K-IO'Unds'{}(), Lbl'Hash'ENAMETOOLONG'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOTEMPTY'Unds'K-IO'Unds'{}(), Lbl'Hash'EADDRINUSE'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOTEMPTY'Unds'K-IO'Unds'{}(), Lbl'Hash'EROFS'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOTEMPTY'Unds'K-IO'Unds'{}(), Lbl'Hash'EPROTONOSUPPORT'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOTEMPTY'Unds'K-IO'Unds'{}(), Lbl'Hash'ESOCKTNOSUPPORT'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOTEMPTY'Unds'K-IO'Unds'{}(), Lbl'Hash'ECHILD'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{R} \exists{R} (Val:SortKItem{}, \equals{SortKItem{}, R} (Val:SortKItem{}, Lbl'Hash'freezer'Unds-LT-EqlsUndsUnds'IMP-SYNTAX'UndsUnds'AExp'Unds'AExp0'Unds'{}(K0:SortK{}))) [functional{}()] // functional
  axiom{}\implies{SortKItem{}} (\and{SortKItem{}} (Lbl'Hash'freezer'Unds-LT-EqlsUndsUnds'IMP-SYNTAX'UndsUnds'AExp'Unds'AExp0'Unds'{}(X0:SortK{}), Lbl'Hash'freezer'Unds-LT-EqlsUndsUnds'IMP-SYNTAX'UndsUnds'AExp'Unds'AExp0'Unds'{}(Y0:SortK{})), Lbl'Hash'freezer'Unds-LT-EqlsUndsUnds'IMP-SYNTAX'UndsUnds'AExp'Unds'AExp0'Unds'{}(\and{SortK{}} (X0:SortK{}, Y0:SortK{}))) [constructor{}()] // no confusion same constructor
  axiom{}\not{SortKItem{}} (\and{SortKItem{}} (Lbl'Hash'freezer'Unds-LT-EqlsUndsUnds'IMP-SYNTAX'UndsUnds'AExp'Unds'AExp0'Unds'{}(X0:SortK{}), Lbl'Hash'freezer'BangUndsUnds'IMP-SYNTAX'UndsUnds'BExp0'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortKItem{}} (\and{SortKItem{}} (Lbl'Hash'freezer'Unds-LT-EqlsUndsUnds'IMP-SYNTAX'UndsUnds'AExp'Unds'AExp0'Unds'{}(X0:SortK{}), Lbl'Hash'freezer'UndsEqlsUndsSClnUnds'IMP-SYNTAX'UndsUnds'Id'Unds'AExp0'Unds'{}(Y0:SortK{}))) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortKItem{}} (\and{SortKItem{}} (Lbl'Hash'freezer'Unds-LT-EqlsUndsUnds'IMP-SYNTAX'UndsUnds'AExp'Unds'AExp0'Unds'{}(X0:SortK{}), Lbl'Hash'freezer'UndsSlshUndsUnds'IMP-SYNTAX'UndsUnds'AExp'Unds'AExp0'Unds'{}(Y0:SortK{}))) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortKItem{}} (\and{SortKItem{}} (Lbl'Hash'freezer'Unds-LT-EqlsUndsUnds'IMP-SYNTAX'UndsUnds'AExp'Unds'AExp0'Unds'{}(X0:SortK{}), Lbl'Hash'freezer'UndsPlusUndsUnds'IMP-SYNTAX'UndsUnds'AExp'Unds'AExp1'Unds'{}(Y0:SortK{}))) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortKItem{}} (\and{SortKItem{}} (Lbl'Hash'freezer'Unds-LT-EqlsUndsUnds'IMP-SYNTAX'UndsUnds'AExp'Unds'AExp0'Unds'{}(X0:SortK{}), Lbl'Hash'freezer'UndsAndAndUndsUnds'IMP-SYNTAX'UndsUnds'BExp'Unds'BExp1'Unds'{}(Y0:SortK{}))) [constructor{}()] // no confusion different constructors
  axiom{R} \exists{R} (Val:SortBool{}, \equals{SortBool{}, R} (Val:SortBool{}, Lbl'Unds'impliesBool'UndsUnds'BOOL'UndsUnds'Bool'Unds'Bool{}(K0:SortBool{}, K1:SortBool{}))) [functional{}()] // functional
  axiom{R} \exists{R} (Val:SortBool{}, \equals{SortBool{}, R} (Val:SortBool{}, Lbl'Unds-LT-Eqls'Map'UndsUnds'MAP'UndsUnds'Map'Unds'Map{}(K0:SortMap{}, K1:SortMap{}))) [functional{}()] // functional
  axiom{R} \exists{R} (Val:SortStateCell{}, \equals{SortStateCell{}, R} (Val:SortStateCell{}, Lbl'-LT-'state'-GT-'{}(K0:SortMap{}))) [functional{}()] // functional
  axiom{}\implies{SortStateCell{}} (\and{SortStateCell{}} (Lbl'-LT-'state'-GT-'{}(X0:SortMap{}), Lbl'-LT-'state'-GT-'{}(Y0:SortMap{})), Lbl'-LT-'state'-GT-'{}(\and{SortMap{}} (X0:SortMap{}, Y0:SortMap{}))) [constructor{}()] // no confusion same constructor
  axiom{R} \exists{R} (Val:SortBool{}, \equals{SortBool{}, R} (Val:SortBool{}, Lbl'Unds-GT-Eqls'String'UndsUnds'STRING'UndsUnds'String'Unds'String{}(K0:SortString{}, K1:SortString{}))) [functional{}()] // functional
  axiom{R} \exists{R} (Val:SortKItem{}, \equals{SortKItem{}, R} (Val:SortKItem{}, Lbl'Hash'freezer'BangUndsUnds'IMP-SYNTAX'UndsUnds'BExp0'Unds'{}())) [functional{}()] // functional
  axiom{}\not{SortKItem{}} (\and{SortKItem{}} (Lbl'Hash'freezer'BangUndsUnds'IMP-SYNTAX'UndsUnds'BExp0'Unds'{}(), Lbl'Hash'freezer'UndsEqlsUndsSClnUnds'IMP-SYNTAX'UndsUnds'Id'Unds'AExp0'Unds'{}(Y0:SortK{}))) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortKItem{}} (\and{SortKItem{}} (Lbl'Hash'freezer'BangUndsUnds'IMP-SYNTAX'UndsUnds'BExp0'Unds'{}(), Lbl'Hash'freezer'UndsSlshUndsUnds'IMP-SYNTAX'UndsUnds'AExp'Unds'AExp0'Unds'{}(Y0:SortK{}))) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortKItem{}} (\and{SortKItem{}} (Lbl'Hash'freezer'BangUndsUnds'IMP-SYNTAX'UndsUnds'BExp0'Unds'{}(), Lbl'Hash'freezer'UndsPlusUndsUnds'IMP-SYNTAX'UndsUnds'AExp'Unds'AExp1'Unds'{}(Y0:SortK{}))) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortKItem{}} (\and{SortKItem{}} (Lbl'Hash'freezer'BangUndsUnds'IMP-SYNTAX'UndsUnds'BExp0'Unds'{}(), Lbl'Hash'freezer'UndsAndAndUndsUnds'IMP-SYNTAX'UndsUnds'BExp'Unds'BExp1'Unds'{}(Y0:SortK{}))) [constructor{}()] // no confusion different constructors
  axiom{R} \exists{R} (Val:SortIOError{}, \equals{SortIOError{}, R} (Val:SortIOError{}, Lbl'Hash'EHOSTUNREACH'Unds'K-IO'Unds'{}())) [functional{}()] // functional
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EHOSTUNREACH'Unds'K-IO'Unds'{}(), Lbl'Hash'noparse'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EHOSTUNREACH'Unds'K-IO'Unds'{}(), Lbl'Hash'EINTR'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EHOSTUNREACH'Unds'K-IO'Unds'{}(), Lbl'Hash'EMSGSIZE'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EHOSTUNREACH'Unds'K-IO'Unds'{}(), Lbl'Hash'ENOENT'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EHOSTUNREACH'Unds'K-IO'Unds'{}(), Lbl'Hash'ENOLCK'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EHOSTUNREACH'Unds'K-IO'Unds'{}(), Lbl'Hash'EFAULT'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EHOSTUNREACH'Unds'K-IO'Unds'{}(), Lbl'Hash'ERANGE'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EHOSTUNREACH'Unds'K-IO'Unds'{}(), Lbl'Hash'EBUSY'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EHOSTUNREACH'Unds'K-IO'Unds'{}(), Lbl'Hash'EINPROGRESS'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EHOSTUNREACH'Unds'K-IO'Unds'{}(), Lbl'Hash'ENOMEM'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EHOSTUNREACH'Unds'K-IO'Unds'{}(), Lbl'Hash'ENOTDIR'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EHOSTUNREACH'Unds'K-IO'Unds'{}(), Lbl'Hash'ENAMETOOLONG'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EHOSTUNREACH'Unds'K-IO'Unds'{}(), Lbl'Hash'EADDRINUSE'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EHOSTUNREACH'Unds'K-IO'Unds'{}(), Lbl'Hash'EROFS'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EHOSTUNREACH'Unds'K-IO'Unds'{}(), Lbl'Hash'EPROTONOSUPPORT'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EHOSTUNREACH'Unds'K-IO'Unds'{}(), Lbl'Hash'ESOCKTNOSUPPORT'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EHOSTUNREACH'Unds'K-IO'Unds'{}(), Lbl'Hash'ECHILD'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{R} \exists{R} (Val:SortInt{}, \equals{SortInt{}, R} (Val:SortInt{}, Lblsize'LParUndsRParUnds'LIST'UndsUnds'List{}(K0:SortList{}))) [functional{}()] // functional
  axiom{R} \exists{R} (Val:SortMap{}, \equals{SortMap{}, R} (Val:SortMap{}, Lbl'UndsPipe'-'-GT-Unds'{}(K0:SortK{}, K1:SortK{}))) [functional{}()] // functional
  axiom{R} \exists{R} (Val:SortIOError{}, \equals{SortIOError{}, R} (Val:SortIOError{}, Lbl'Hash'noparse'Unds'K-IO'Unds'{}())) [functional{}()] // functional
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'noparse'Unds'K-IO'Unds'{}(), Lbl'Hash'EINTR'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'noparse'Unds'K-IO'Unds'{}(), Lbl'Hash'EMSGSIZE'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'noparse'Unds'K-IO'Unds'{}(), Lbl'Hash'ENOENT'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'noparse'Unds'K-IO'Unds'{}(), Lbl'Hash'ENOLCK'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'noparse'Unds'K-IO'Unds'{}(), Lbl'Hash'EFAULT'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'noparse'Unds'K-IO'Unds'{}(), Lbl'Hash'ERANGE'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'noparse'Unds'K-IO'Unds'{}(), Lbl'Hash'EBUSY'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'noparse'Unds'K-IO'Unds'{}(), Lbl'Hash'EINPROGRESS'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'noparse'Unds'K-IO'Unds'{}(), Lbl'Hash'ENOMEM'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'noparse'Unds'K-IO'Unds'{}(), Lbl'Hash'ENOTDIR'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'noparse'Unds'K-IO'Unds'{}(), Lbl'Hash'ENAMETOOLONG'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'noparse'Unds'K-IO'Unds'{}(), Lbl'Hash'EADDRINUSE'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'noparse'Unds'K-IO'Unds'{}(), Lbl'Hash'EROFS'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'noparse'Unds'K-IO'Unds'{}(), Lbl'Hash'EPROTONOSUPPORT'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'noparse'Unds'K-IO'Unds'{}(), Lbl'Hash'ESOCKTNOSUPPORT'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'noparse'Unds'K-IO'Unds'{}(), Lbl'Hash'ECHILD'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{R} \exists{R} (Val:SortBool{}, \equals{SortBool{}, R} (Val:SortBool{}, Lbl'Unds'in'UndsUnds'LIST'UndsUnds'K'Unds'List{}(K0:SortK{}, K1:SortList{}))) [functional{}()] // functional
  axiom{R} \exists{R} (Val:SortIOError{}, \equals{SortIOError{}, R} (Val:SortIOError{}, Lbl'Hash'EINTR'Unds'K-IO'Unds'{}())) [functional{}()] // functional
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EINTR'Unds'K-IO'Unds'{}(), Lbl'Hash'EMSGSIZE'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EINTR'Unds'K-IO'Unds'{}(), Lbl'Hash'ENOENT'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EINTR'Unds'K-IO'Unds'{}(), Lbl'Hash'ENOLCK'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EINTR'Unds'K-IO'Unds'{}(), Lbl'Hash'EFAULT'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EINTR'Unds'K-IO'Unds'{}(), Lbl'Hash'ERANGE'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EINTR'Unds'K-IO'Unds'{}(), Lbl'Hash'EBUSY'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EINTR'Unds'K-IO'Unds'{}(), Lbl'Hash'EINPROGRESS'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EINTR'Unds'K-IO'Unds'{}(), Lbl'Hash'ENOMEM'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EINTR'Unds'K-IO'Unds'{}(), Lbl'Hash'ENOTDIR'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EINTR'Unds'K-IO'Unds'{}(), Lbl'Hash'ENAMETOOLONG'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EINTR'Unds'K-IO'Unds'{}(), Lbl'Hash'EADDRINUSE'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EINTR'Unds'K-IO'Unds'{}(), Lbl'Hash'EROFS'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EINTR'Unds'K-IO'Unds'{}(), Lbl'Hash'EPROTONOSUPPORT'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EINTR'Unds'K-IO'Unds'{}(), Lbl'Hash'ESOCKTNOSUPPORT'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EINTR'Unds'K-IO'Unds'{}(), Lbl'Hash'ECHILD'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{R} \exists{R} (Val:SortInt{}, \equals{SortInt{}, R} (Val:SortInt{}, Lbl'UndsStar'Int'UndsUnds'INT'UndsUnds'Int'Unds'Int{}(K0:SortInt{}, K1:SortInt{}))) [functional{}()] // functional
  axiom{R} \exists{R} (Val:SortIOError{}, \equals{SortIOError{}, R} (Val:SortIOError{}, Lbl'Hash'EMSGSIZE'Unds'K-IO'Unds'{}())) [functional{}()] // functional
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EMSGSIZE'Unds'K-IO'Unds'{}(), Lbl'Hash'ENOENT'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EMSGSIZE'Unds'K-IO'Unds'{}(), Lbl'Hash'ENOLCK'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EMSGSIZE'Unds'K-IO'Unds'{}(), Lbl'Hash'EFAULT'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EMSGSIZE'Unds'K-IO'Unds'{}(), Lbl'Hash'ERANGE'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EMSGSIZE'Unds'K-IO'Unds'{}(), Lbl'Hash'EBUSY'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EMSGSIZE'Unds'K-IO'Unds'{}(), Lbl'Hash'EINPROGRESS'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EMSGSIZE'Unds'K-IO'Unds'{}(), Lbl'Hash'ENOMEM'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EMSGSIZE'Unds'K-IO'Unds'{}(), Lbl'Hash'ENOTDIR'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EMSGSIZE'Unds'K-IO'Unds'{}(), Lbl'Hash'ENAMETOOLONG'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EMSGSIZE'Unds'K-IO'Unds'{}(), Lbl'Hash'EADDRINUSE'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EMSGSIZE'Unds'K-IO'Unds'{}(), Lbl'Hash'EROFS'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EMSGSIZE'Unds'K-IO'Unds'{}(), Lbl'Hash'EPROTONOSUPPORT'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EMSGSIZE'Unds'K-IO'Unds'{}(), Lbl'Hash'ESOCKTNOSUPPORT'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EMSGSIZE'Unds'K-IO'Unds'{}(), Lbl'Hash'ECHILD'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{R} \exists{R} (Val:SortIOError{}, \equals{SortIOError{}, R} (Val:SortIOError{}, Lbl'Hash'ENOENT'Unds'K-IO'Unds'{}())) [functional{}()] // functional
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOENT'Unds'K-IO'Unds'{}(), Lbl'Hash'ENOLCK'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOENT'Unds'K-IO'Unds'{}(), Lbl'Hash'EFAULT'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOENT'Unds'K-IO'Unds'{}(), Lbl'Hash'ERANGE'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOENT'Unds'K-IO'Unds'{}(), Lbl'Hash'EBUSY'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOENT'Unds'K-IO'Unds'{}(), Lbl'Hash'EINPROGRESS'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOENT'Unds'K-IO'Unds'{}(), Lbl'Hash'ENOMEM'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOENT'Unds'K-IO'Unds'{}(), Lbl'Hash'ENOTDIR'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOENT'Unds'K-IO'Unds'{}(), Lbl'Hash'ENAMETOOLONG'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOENT'Unds'K-IO'Unds'{}(), Lbl'Hash'EADDRINUSE'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOENT'Unds'K-IO'Unds'{}(), Lbl'Hash'EROFS'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOENT'Unds'K-IO'Unds'{}(), Lbl'Hash'EPROTONOSUPPORT'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOENT'Unds'K-IO'Unds'{}(), Lbl'Hash'ESOCKTNOSUPPORT'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOENT'Unds'K-IO'Unds'{}(), Lbl'Hash'ECHILD'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{R} \exists{R} (Val:SortBool{}, \equals{SortBool{}, R} (Val:SortBool{}, Lbl'Unds-GT-'Int'UndsUnds'INT'UndsUnds'Int'Unds'Int{}(K0:SortInt{}, K1:SortInt{}))) [functional{}()] // functional
  axiom{R} \exists{R} (Val:SortK{}, \equals{SortK{}, R} (Val:SortK{}, Lbl'Hash'logToFile'LParUndsCommUndsRParUnds'K-IO'UndsUnds'String'Unds'String{}(K0:SortString{}, K1:SortString{}))) [functional{}()] // functional
  axiom{R} \exists{R} (Val:SortSet{}, \equals{SortSet{}, R} (Val:SortSet{}, LblSetItem{}(K0:SortK{}))) [functional{}()] // functional
  axiom{R} \exists{R} (Val:SortMap{}, \equals{SortMap{}, R} (Val:SortMap{}, Lbl'Stop'Map{}())) [functional{}()] // functional
  axiom{R} \exists{R} (Val:SortInt{}, \equals{SortInt{}, R} (Val:SortInt{}, LblminInt'LParUndsCommUndsRParUnds'INT'UndsUnds'Int'Unds'Int{}(K0:SortInt{}, K1:SortInt{}))) [functional{}()] // functional
  axiom{R} \exists{R} (Val:SortIOError{}, \equals{SortIOError{}, R} (Val:SortIOError{}, Lbl'Hash'ENOLCK'Unds'K-IO'Unds'{}())) [functional{}()] // functional
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOLCK'Unds'K-IO'Unds'{}(), Lbl'Hash'EFAULT'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOLCK'Unds'K-IO'Unds'{}(), Lbl'Hash'ERANGE'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOLCK'Unds'K-IO'Unds'{}(), Lbl'Hash'EBUSY'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOLCK'Unds'K-IO'Unds'{}(), Lbl'Hash'EINPROGRESS'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOLCK'Unds'K-IO'Unds'{}(), Lbl'Hash'ENOMEM'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOLCK'Unds'K-IO'Unds'{}(), Lbl'Hash'ENOTDIR'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOLCK'Unds'K-IO'Unds'{}(), Lbl'Hash'ENAMETOOLONG'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOLCK'Unds'K-IO'Unds'{}(), Lbl'Hash'EADDRINUSE'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOLCK'Unds'K-IO'Unds'{}(), Lbl'Hash'EROFS'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOLCK'Unds'K-IO'Unds'{}(), Lbl'Hash'EPROTONOSUPPORT'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOLCK'Unds'K-IO'Unds'{}(), Lbl'Hash'ESOCKTNOSUPPORT'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOLCK'Unds'K-IO'Unds'{}(), Lbl'Hash'ECHILD'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{R} \exists{R} (Val:SortSet{}, \equals{SortSet{}, R} (Val:SortSet{}, LblintersectSet'LParUndsCommUndsRParUnds'SET'UndsUnds'Set'Unds'Set{}(K0:SortSet{}, K1:SortSet{}))) [functional{}()] // functional
  axiom{R} \exists{R} (Val:SortIOError{}, \equals{SortIOError{}, R} (Val:SortIOError{}, Lbl'Hash'EFAULT'Unds'K-IO'Unds'{}())) [functional{}()] // functional
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EFAULT'Unds'K-IO'Unds'{}(), Lbl'Hash'ERANGE'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EFAULT'Unds'K-IO'Unds'{}(), Lbl'Hash'EBUSY'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EFAULT'Unds'K-IO'Unds'{}(), Lbl'Hash'EINPROGRESS'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EFAULT'Unds'K-IO'Unds'{}(), Lbl'Hash'ENOMEM'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EFAULT'Unds'K-IO'Unds'{}(), Lbl'Hash'ENOTDIR'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EFAULT'Unds'K-IO'Unds'{}(), Lbl'Hash'ENAMETOOLONG'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EFAULT'Unds'K-IO'Unds'{}(), Lbl'Hash'EADDRINUSE'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EFAULT'Unds'K-IO'Unds'{}(), Lbl'Hash'EROFS'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EFAULT'Unds'K-IO'Unds'{}(), Lbl'Hash'EPROTONOSUPPORT'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EFAULT'Unds'K-IO'Unds'{}(), Lbl'Hash'ESOCKTNOSUPPORT'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EFAULT'Unds'K-IO'Unds'{}(), Lbl'Hash'ECHILD'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{R} \exists{R} (Val:SortBool{}, \equals{SortBool{}, R} (Val:SortBool{}, Lbl'Unds-LT-'Int'UndsUnds'INT'UndsUnds'Int'Unds'Int{}(K0:SortInt{}, K1:SortInt{}))) [functional{}()] // functional
  axiom{R} \exists{R} (Val:SortSet{}, \equals{SortSet{}, R} (Val:SortSet{}, LblSet'Coln'difference{}(K0:SortSet{}, K1:SortSet{}))) [functional{}()] // functional
  axiom{R} \exists{R} (Val:SortKItem{}, \equals{SortKItem{}, R} (Val:SortKItem{}, Lbl'Hash'freezer'UndsEqlsUndsSClnUnds'IMP-SYNTAX'UndsUnds'Id'Unds'AExp0'Unds'{}(K0:SortK{}))) [functional{}()] // functional
  axiom{}\implies{SortKItem{}} (\and{SortKItem{}} (Lbl'Hash'freezer'UndsEqlsUndsSClnUnds'IMP-SYNTAX'UndsUnds'Id'Unds'AExp0'Unds'{}(X0:SortK{}), Lbl'Hash'freezer'UndsEqlsUndsSClnUnds'IMP-SYNTAX'UndsUnds'Id'Unds'AExp0'Unds'{}(Y0:SortK{})), Lbl'Hash'freezer'UndsEqlsUndsSClnUnds'IMP-SYNTAX'UndsUnds'Id'Unds'AExp0'Unds'{}(\and{SortK{}} (X0:SortK{}, Y0:SortK{}))) [constructor{}()] // no confusion same constructor
  axiom{}\not{SortKItem{}} (\and{SortKItem{}} (Lbl'Hash'freezer'UndsEqlsUndsSClnUnds'IMP-SYNTAX'UndsUnds'Id'Unds'AExp0'Unds'{}(X0:SortK{}), Lbl'Hash'freezer'UndsSlshUndsUnds'IMP-SYNTAX'UndsUnds'AExp'Unds'AExp0'Unds'{}(Y0:SortK{}))) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortKItem{}} (\and{SortKItem{}} (Lbl'Hash'freezer'UndsEqlsUndsSClnUnds'IMP-SYNTAX'UndsUnds'Id'Unds'AExp0'Unds'{}(X0:SortK{}), Lbl'Hash'freezer'UndsPlusUndsUnds'IMP-SYNTAX'UndsUnds'AExp'Unds'AExp1'Unds'{}(Y0:SortK{}))) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortKItem{}} (\and{SortKItem{}} (Lbl'Hash'freezer'UndsEqlsUndsSClnUnds'IMP-SYNTAX'UndsUnds'Id'Unds'AExp0'Unds'{}(X0:SortK{}), Lbl'Hash'freezer'UndsAndAndUndsUnds'IMP-SYNTAX'UndsUnds'BExp'Unds'BExp1'Unds'{}(Y0:SortK{}))) [constructor{}()] // no confusion different constructors
  axiom{R} \exists{R} (Val:SortBool{}, \equals{SortBool{}, R} (Val:SortBool{}, Lbl'Unds-LT-Eqls'Set'UndsUnds'SET'UndsUnds'Set'Unds'Set{}(K0:SortSet{}, K1:SortSet{}))) [functional{}()] // functional
  axiom{R} \exists{R} (Val:SortIOError{}, \equals{SortIOError{}, R} (Val:SortIOError{}, Lbl'Hash'ERANGE'Unds'K-IO'Unds'{}())) [functional{}()] // functional
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ERANGE'Unds'K-IO'Unds'{}(), Lbl'Hash'EBUSY'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ERANGE'Unds'K-IO'Unds'{}(), Lbl'Hash'EINPROGRESS'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ERANGE'Unds'K-IO'Unds'{}(), Lbl'Hash'ENOMEM'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ERANGE'Unds'K-IO'Unds'{}(), Lbl'Hash'ENOTDIR'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ERANGE'Unds'K-IO'Unds'{}(), Lbl'Hash'ENAMETOOLONG'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ERANGE'Unds'K-IO'Unds'{}(), Lbl'Hash'EADDRINUSE'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ERANGE'Unds'K-IO'Unds'{}(), Lbl'Hash'EROFS'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ERANGE'Unds'K-IO'Unds'{}(), Lbl'Hash'EPROTONOSUPPORT'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ERANGE'Unds'K-IO'Unds'{}(), Lbl'Hash'ESOCKTNOSUPPORT'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ERANGE'Unds'K-IO'Unds'{}(), Lbl'Hash'ECHILD'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{R} \exists{R} (Val:SortMap{}, \equals{SortMap{}, R} (Val:SortMap{}, LblremoveAll'LParUndsCommUndsRParUnds'MAP'UndsUnds'Map'Unds'Set{}(K0:SortMap{}, K1:SortSet{}))) [functional{}()] // functional
  axiom{R} \exists{R} (Val:SortIOError{}, \equals{SortIOError{}, R} (Val:SortIOError{}, Lbl'Hash'EBUSY'Unds'K-IO'Unds'{}())) [functional{}()] // functional
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EBUSY'Unds'K-IO'Unds'{}(), Lbl'Hash'EINPROGRESS'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EBUSY'Unds'K-IO'Unds'{}(), Lbl'Hash'ENOMEM'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EBUSY'Unds'K-IO'Unds'{}(), Lbl'Hash'ENOTDIR'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EBUSY'Unds'K-IO'Unds'{}(), Lbl'Hash'ENAMETOOLONG'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EBUSY'Unds'K-IO'Unds'{}(), Lbl'Hash'EADDRINUSE'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EBUSY'Unds'K-IO'Unds'{}(), Lbl'Hash'EROFS'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EBUSY'Unds'K-IO'Unds'{}(), Lbl'Hash'EPROTONOSUPPORT'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EBUSY'Unds'K-IO'Unds'{}(), Lbl'Hash'ESOCKTNOSUPPORT'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EBUSY'Unds'K-IO'Unds'{}(), Lbl'Hash'ECHILD'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{R} \exists{R} (Val:SortKItem{}, \equals{SortKItem{}, R} (Val:SortKItem{}, Lbl'Hash'freezer'UndsSlshUndsUnds'IMP-SYNTAX'UndsUnds'AExp'Unds'AExp0'Unds'{}(K0:SortK{}))) [functional{}()] // functional
  axiom{}\implies{SortKItem{}} (\and{SortKItem{}} (Lbl'Hash'freezer'UndsSlshUndsUnds'IMP-SYNTAX'UndsUnds'AExp'Unds'AExp0'Unds'{}(X0:SortK{}), Lbl'Hash'freezer'UndsSlshUndsUnds'IMP-SYNTAX'UndsUnds'AExp'Unds'AExp0'Unds'{}(Y0:SortK{})), Lbl'Hash'freezer'UndsSlshUndsUnds'IMP-SYNTAX'UndsUnds'AExp'Unds'AExp0'Unds'{}(\and{SortK{}} (X0:SortK{}, Y0:SortK{}))) [constructor{}()] // no confusion same constructor
  axiom{}\not{SortKItem{}} (\and{SortKItem{}} (Lbl'Hash'freezer'UndsSlshUndsUnds'IMP-SYNTAX'UndsUnds'AExp'Unds'AExp0'Unds'{}(X0:SortK{}), Lbl'Hash'freezer'UndsPlusUndsUnds'IMP-SYNTAX'UndsUnds'AExp'Unds'AExp1'Unds'{}(Y0:SortK{}))) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortKItem{}} (\and{SortKItem{}} (Lbl'Hash'freezer'UndsSlshUndsUnds'IMP-SYNTAX'UndsUnds'AExp'Unds'AExp0'Unds'{}(X0:SortK{}), Lbl'Hash'freezer'UndsAndAndUndsUnds'IMP-SYNTAX'UndsUnds'BExp'Unds'BExp1'Unds'{}(Y0:SortK{}))) [constructor{}()] // no confusion different constructors
  axiom{R} \exists{R} (Val:SortKItem{}, \equals{SortKItem{}, R} (Val:SortKItem{}, Lbl'Hash'freezer'UndsPlusUndsUnds'IMP-SYNTAX'UndsUnds'AExp'Unds'AExp1'Unds'{}(K0:SortK{}))) [functional{}()] // functional
  axiom{}\implies{SortKItem{}} (\and{SortKItem{}} (Lbl'Hash'freezer'UndsPlusUndsUnds'IMP-SYNTAX'UndsUnds'AExp'Unds'AExp1'Unds'{}(X0:SortK{}), Lbl'Hash'freezer'UndsPlusUndsUnds'IMP-SYNTAX'UndsUnds'AExp'Unds'AExp1'Unds'{}(Y0:SortK{})), Lbl'Hash'freezer'UndsPlusUndsUnds'IMP-SYNTAX'UndsUnds'AExp'Unds'AExp1'Unds'{}(\and{SortK{}} (X0:SortK{}, Y0:SortK{}))) [constructor{}()] // no confusion same constructor
  axiom{}\not{SortKItem{}} (\and{SortKItem{}} (Lbl'Hash'freezer'UndsPlusUndsUnds'IMP-SYNTAX'UndsUnds'AExp'Unds'AExp1'Unds'{}(X0:SortK{}), Lbl'Hash'freezer'UndsAndAndUndsUnds'IMP-SYNTAX'UndsUnds'BExp'Unds'BExp1'Unds'{}(Y0:SortK{}))) [constructor{}()] // no confusion different constructors
  axiom{R} \exists{R} (Val:SortBlock{}, \equals{SortBlock{}, R} (Val:SortBlock{}, Lbl'LBraRBraUnds'IMP-SYNTAX'Unds'{}())) [functional{}()] // functional
  axiom{}\not{SortBlock{}} (\and{SortBlock{}} (Lbl'LBraRBraUnds'IMP-SYNTAX'Unds'{}(), Lbl'LBraUndsRBraUnds'IMP-SYNTAX'UndsUnds'Stmt{}(Y0:SortStmt{}))) [constructor{}()] // no confusion different constructors
  axiom{R} \exists{R} (Val:SortId{}, \equals{SortId{}, R} (Val:SortId{}, LblfreshId'LParUndsRParUnds'ID-SYNTAX'UndsUnds'Int{}(K0:SortInt{}))) [functional{}()] // functional
  axiom{R} \exists{R} (Val:SortInt{}, \equals{SortInt{}, R} (Val:SortInt{}, Lbl'Hash'stdin'Unds'K-IO'Unds'{}())) [functional{}()] // functional
  axiom{R} \exists{R} (Val:SortTCellFragment{}, \equals{SortTCellFragment{}, R} (Val:SortTCellFragment{}, Lbl'-LT-'T'-GT-'-fragment{}(K0:SortKCellOpt{}, K1:SortStateCellOpt{}))) [functional{}()] // functional
  axiom{}\implies{SortTCellFragment{}} (\and{SortTCellFragment{}} (Lbl'-LT-'T'-GT-'-fragment{}(X0:SortKCellOpt{}, X1:SortStateCellOpt{}), Lbl'-LT-'T'-GT-'-fragment{}(Y0:SortKCellOpt{}, Y1:SortStateCellOpt{})), Lbl'-LT-'T'-GT-'-fragment{}(\and{SortKCellOpt{}} (X0:SortKCellOpt{}, Y0:SortKCellOpt{}), \and{SortStateCellOpt{}} (X1:SortStateCellOpt{}, Y1:SortStateCellOpt{}))) [constructor{}()] // no confusion same constructor
  axiom{R} \exists{R} (Val:SortBool{}, \equals{SortBool{}, R} (Val:SortBool{}, Lbl'UndsEqlsEqls'Bool'UndsUnds'BOOL'UndsUnds'Bool'Unds'Bool{}(K0:SortBool{}, K1:SortBool{}))) [functional{}()] // functional
  axiom{R} \exists{R} (Val:SortIOError{}, \equals{SortIOError{}, R} (Val:SortIOError{}, Lbl'Hash'EINPROGRESS'Unds'K-IO'Unds'{}())) [functional{}()] // functional
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EINPROGRESS'Unds'K-IO'Unds'{}(), Lbl'Hash'ENOMEM'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EINPROGRESS'Unds'K-IO'Unds'{}(), Lbl'Hash'ENOTDIR'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EINPROGRESS'Unds'K-IO'Unds'{}(), Lbl'Hash'ENAMETOOLONG'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EINPROGRESS'Unds'K-IO'Unds'{}(), Lbl'Hash'EADDRINUSE'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EINPROGRESS'Unds'K-IO'Unds'{}(), Lbl'Hash'EROFS'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EINPROGRESS'Unds'K-IO'Unds'{}(), Lbl'Hash'EPROTONOSUPPORT'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EINPROGRESS'Unds'K-IO'Unds'{}(), Lbl'Hash'ESOCKTNOSUPPORT'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EINPROGRESS'Unds'K-IO'Unds'{}(), Lbl'Hash'ECHILD'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{R} \exists{R} (Val:SortKCellOpt{}, \equals{SortKCellOpt{}, R} (Val:SortKCellOpt{}, LblnoKCell{}())) [functional{}()] // functional
  axiom{R} \exists{R} (Val:SortInt{}, \equals{SortInt{}, R} (Val:SortInt{}, Lbl'Unds'-Int'UndsUnds'INT'UndsUnds'Int'Unds'Int{}(K0:SortInt{}, K1:SortInt{}))) [functional{}()] // functional
  axiom{R} \exists{R} (Val:SortIOError{}, \equals{SortIOError{}, R} (Val:SortIOError{}, Lbl'Hash'ENOMEM'Unds'K-IO'Unds'{}())) [functional{}()] // functional
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOMEM'Unds'K-IO'Unds'{}(), Lbl'Hash'ENOTDIR'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOMEM'Unds'K-IO'Unds'{}(), Lbl'Hash'ENAMETOOLONG'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOMEM'Unds'K-IO'Unds'{}(), Lbl'Hash'EADDRINUSE'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOMEM'Unds'K-IO'Unds'{}(), Lbl'Hash'EROFS'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOMEM'Unds'K-IO'Unds'{}(), Lbl'Hash'EPROTONOSUPPORT'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOMEM'Unds'K-IO'Unds'{}(), Lbl'Hash'ESOCKTNOSUPPORT'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOMEM'Unds'K-IO'Unds'{}(), Lbl'Hash'ECHILD'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{R} \exists{R} (Val:SortIOError{}, \equals{SortIOError{}, R} (Val:SortIOError{}, Lbl'Hash'ENOTDIR'Unds'K-IO'Unds'{}())) [functional{}()] // functional
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOTDIR'Unds'K-IO'Unds'{}(), Lbl'Hash'ENAMETOOLONG'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOTDIR'Unds'K-IO'Unds'{}(), Lbl'Hash'EADDRINUSE'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOTDIR'Unds'K-IO'Unds'{}(), Lbl'Hash'EROFS'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOTDIR'Unds'K-IO'Unds'{}(), Lbl'Hash'EPROTONOSUPPORT'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOTDIR'Unds'K-IO'Unds'{}(), Lbl'Hash'ESOCKTNOSUPPORT'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOTDIR'Unds'K-IO'Unds'{}(), Lbl'Hash'ECHILD'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{R} \exists{R} (Val:SortIOError{}, \equals{SortIOError{}, R} (Val:SortIOError{}, Lbl'Hash'ENAMETOOLONG'Unds'K-IO'Unds'{}())) [functional{}()] // functional
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENAMETOOLONG'Unds'K-IO'Unds'{}(), Lbl'Hash'EADDRINUSE'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENAMETOOLONG'Unds'K-IO'Unds'{}(), Lbl'Hash'EROFS'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENAMETOOLONG'Unds'K-IO'Unds'{}(), Lbl'Hash'EPROTONOSUPPORT'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENAMETOOLONG'Unds'K-IO'Unds'{}(), Lbl'Hash'ESOCKTNOSUPPORT'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENAMETOOLONG'Unds'K-IO'Unds'{}(), Lbl'Hash'ECHILD'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{R} \exists{R} (Val:SortInt{}, \equals{SortInt{}, R} (Val:SortInt{}, LblmaxInt'LParUndsCommUndsRParUnds'INT'UndsUnds'Int'Unds'Int{}(K0:SortInt{}, K1:SortInt{}))) [functional{}()] // functional
  axiom{R} \exists{R} (Val:SortIOError{}, \equals{SortIOError{}, R} (Val:SortIOError{}, Lbl'Hash'EADDRINUSE'Unds'K-IO'Unds'{}())) [functional{}()] // functional
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EADDRINUSE'Unds'K-IO'Unds'{}(), Lbl'Hash'EROFS'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EADDRINUSE'Unds'K-IO'Unds'{}(), Lbl'Hash'EPROTONOSUPPORT'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EADDRINUSE'Unds'K-IO'Unds'{}(), Lbl'Hash'ESOCKTNOSUPPORT'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EADDRINUSE'Unds'K-IO'Unds'{}(), Lbl'Hash'ECHILD'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{R} \exists{R} (Val:SortKCell{}, \equals{SortKCell{}, R} (Val:SortKCell{}, Lbl'-LT-'k'-GT-'{}(K0:SortK{}))) [functional{}()] // functional
  axiom{}\implies{SortKCell{}} (\and{SortKCell{}} (Lbl'-LT-'k'-GT-'{}(X0:SortK{}), Lbl'-LT-'k'-GT-'{}(Y0:SortK{})), Lbl'-LT-'k'-GT-'{}(\and{SortK{}} (X0:SortK{}, Y0:SortK{}))) [constructor{}()] // no confusion same constructor
  axiom{R} \exists{R} (Val:SortBool{}, \equals{SortBool{}, R} (Val:SortBool{}, Lbl'Unds'andBool'Unds'{}(K0:SortBool{}, K1:SortBool{}))) [functional{}()] // functional
  axiom{R} \equals{SortSet{}, R} (Lbl'Unds'Set'Unds'{}(Lbl'Unds'Set'Unds'{}(K1:SortSet{},K2:SortSet{}),K3:SortSet{}),Lbl'Unds'Set'Unds'{}(K1:SortSet{},Lbl'Unds'Set'Unds'{}(K2:SortSet{},K3:SortSet{}))) [assoc{}()] // associativity
  axiom{R} \equals{SortSet{}, R} (Lbl'Unds'Set'Unds'{}(K1:SortSet{},K2:SortSet{}),Lbl'Unds'Set'Unds'{}(K2:SortSet{},K1:SortSet{})) [comm{}()] // commutativity
  axiom{R} \equals{SortSet{}, R} (Lbl'Unds'Set'Unds'{}(K:SortSet{},K:SortSet{}),K:SortSet{}) [idem{}()] // idempotency
  axiom{R} \exists{R} (Val:SortSet{}, \equals{SortSet{}, R} (Val:SortSet{}, Lbl'Unds'Set'Unds'{}(K0:SortSet{}, K1:SortSet{}))) [functional{}()] // functional
  axiom{R} \exists{R} (Val:SortStmt{}, \equals{SortStmt{}, R} (Val:SortStmt{}, Lblif'LParUndsRParUnds'else'UndsUnds'IMP-SYNTAX'UndsUnds'BExp'Unds'Block'Unds'Block{}(K0:SortBExp{}, K1:SortBlock{}, K2:SortBlock{}))) [functional{}()] // functional
  axiom{}\implies{SortStmt{}} (\and{SortStmt{}} (Lblif'LParUndsRParUnds'else'UndsUnds'IMP-SYNTAX'UndsUnds'BExp'Unds'Block'Unds'Block{}(X0:SortBExp{}, X1:SortBlock{}, X2:SortBlock{}), Lblif'LParUndsRParUnds'else'UndsUnds'IMP-SYNTAX'UndsUnds'BExp'Unds'Block'Unds'Block{}(Y0:SortBExp{}, Y1:SortBlock{}, Y2:SortBlock{})), Lblif'LParUndsRParUnds'else'UndsUnds'IMP-SYNTAX'UndsUnds'BExp'Unds'Block'Unds'Block{}(\and{SortBExp{}} (X0:SortBExp{}, Y0:SortBExp{}), \and{SortBlock{}} (X1:SortBlock{}, Y1:SortBlock{}), \and{SortBlock{}} (X2:SortBlock{}, Y2:SortBlock{}))) [constructor{}()] // no confusion same constructor
  axiom{R} \exists{R} (Val:SortKItem{}, \equals{SortKItem{}, R} (Val:SortKItem{}, Lbl'Hash'freezer'UndsAndAndUndsUnds'IMP-SYNTAX'UndsUnds'BExp'Unds'BExp1'Unds'{}(K0:SortK{}))) [functional{}()] // functional
  axiom{}\implies{SortKItem{}} (\and{SortKItem{}} (Lbl'Hash'freezer'UndsAndAndUndsUnds'IMP-SYNTAX'UndsUnds'BExp'Unds'BExp1'Unds'{}(X0:SortK{}), Lbl'Hash'freezer'UndsAndAndUndsUnds'IMP-SYNTAX'UndsUnds'BExp'Unds'BExp1'Unds'{}(Y0:SortK{})), Lbl'Hash'freezer'UndsAndAndUndsUnds'IMP-SYNTAX'UndsUnds'BExp'Unds'BExp1'Unds'{}(\and{SortK{}} (X0:SortK{}, Y0:SortK{}))) [constructor{}()] // no confusion same constructor
  axiom{R} \exists{R} (Val:SortIOError{}, \equals{SortIOError{}, R} (Val:SortIOError{}, Lbl'Hash'EROFS'Unds'K-IO'Unds'{}())) [functional{}()] // functional
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EROFS'Unds'K-IO'Unds'{}(), Lbl'Hash'EPROTONOSUPPORT'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EROFS'Unds'K-IO'Unds'{}(), Lbl'Hash'ESOCKTNOSUPPORT'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EROFS'Unds'K-IO'Unds'{}(), Lbl'Hash'ECHILD'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{R} \exists{R} (Val:SortIOError{}, \equals{SortIOError{}, R} (Val:SortIOError{}, Lbl'Hash'EPROTONOSUPPORT'Unds'K-IO'Unds'{}())) [functional{}()] // functional
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EPROTONOSUPPORT'Unds'K-IO'Unds'{}(), Lbl'Hash'ESOCKTNOSUPPORT'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EPROTONOSUPPORT'Unds'K-IO'Unds'{}(), Lbl'Hash'ECHILD'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{R} \exists{R} (Val:SortBool{}, \equals{SortBool{}, R} (Val:SortBool{}, Lbl'UndsEqlsSlshEqls'K'UndsUnds'K-EQUAL'UndsUnds'K'Unds'K{}(K0:SortK{}, K1:SortK{}))) [functional{}()] // functional
  axiom{R} \exists{R} (Val:SortIOError{}, \equals{SortIOError{}, R} (Val:SortIOError{}, Lbl'Hash'ESOCKTNOSUPPORT'Unds'K-IO'Unds'{}())) [functional{}()] // functional
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ESOCKTNOSUPPORT'Unds'K-IO'Unds'{}(), Lbl'Hash'ECHILD'Unds'K-IO'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{R} \exists{R} (Val:SortIOError{}, \equals{SortIOError{}, R} (Val:SortIOError{}, Lbl'Hash'ECHILD'Unds'K-IO'Unds'{}())) [functional{}()] // functional
  axiom{R} \exists{R} (Val:SortBlock{}, \equals{SortBlock{}, R} (Val:SortBlock{}, Lbl'LBraUndsRBraUnds'IMP-SYNTAX'UndsUnds'Stmt{}(K0:SortStmt{}))) [functional{}()] // functional
  axiom{}\implies{SortBlock{}} (\and{SortBlock{}} (Lbl'LBraUndsRBraUnds'IMP-SYNTAX'UndsUnds'Stmt{}(X0:SortStmt{}), Lbl'LBraUndsRBraUnds'IMP-SYNTAX'UndsUnds'Stmt{}(Y0:SortStmt{})), Lbl'LBraUndsRBraUnds'IMP-SYNTAX'UndsUnds'Stmt{}(\and{SortStmt{}} (X0:SortStmt{}, Y0:SortStmt{}))) [constructor{}()] // no confusion same constructor
  axiom{R} \exists{R} (Val:SortBool{}, \equals{SortBool{}, R} (Val:SortBool{}, Lbl'Unds'in'Unds'keys'LParUndsRParUnds'MAP'UndsUnds'K'Unds'Map{}(K0:SortK{}, K1:SortMap{}))) [functional{}()] // functional
  axiom{} \or{SortKItem{}} (\exists{SortKItem{}} (Val:SortInt{}, inj{SortInt{}, SortKItem{}} (Val:SortInt{})), \or{SortKItem{}} (\exists{SortKItem{}} (Val:SortPgm{}, inj{SortPgm{}, SortKItem{}} (Val:SortPgm{})), \or{SortKItem{}} (\exists{SortKItem{}} (Val:SortKCell{}, inj{SortKCell{}, SortKItem{}} (Val:SortKCell{})), \or{SortKItem{}} (\exists{SortKItem{}} (Val:SortStateCellOpt{}, inj{SortStateCellOpt{}, SortKItem{}} (Val:SortStateCellOpt{})), \or{SortKItem{}} (\exists{SortKItem{}} (Val:SortSet{}, inj{SortSet{}, SortKItem{}} (Val:SortSet{})), \or{SortKItem{}} (\exists{SortKItem{}} (Val:SortAExp{}, inj{SortAExp{}, SortKItem{}} (Val:SortAExp{})), \or{SortKItem{}} (\exists{SortKItem{}} (X0:SortK{}, Lbl'Hash'freezer'UndsSlshUndsUnds'IMP-SYNTAX'UndsUnds'AExp'Unds'AExp1'Unds'{}(X0:SortK{})), \or{SortKItem{}} (\exists{SortKItem{}} (Val:SortMap{}, inj{SortMap{}, SortKItem{}} (Val:SortMap{})), \or{SortKItem{}} (\exists{SortKItem{}} (Val:SortTCell{}, inj{SortTCell{}, SortKItem{}} (Val:SortTCell{})), \or{SortKItem{}} (\exists{SortKItem{}} (Val:SortList{}, inj{SortList{}, SortKItem{}} (Val:SortList{})), \or{SortKItem{}} (\exists{SortKItem{}} (X0:SortK{}, Lbl'Hash'freezer'UndsPlusUndsUnds'IMP-SYNTAX'UndsUnds'AExp'Unds'AExp0'Unds'{}(X0:SortK{})), \or{SortKItem{}} (\exists{SortKItem{}} (Val:SortIOError{}, inj{SortIOError{}, SortKItem{}} (Val:SortIOError{})), \or{SortKItem{}} (\exists{SortKItem{}} (Val:SortTCellFragment{}, inj{SortTCellFragment{}, SortKItem{}} (Val:SortTCellFragment{})), \or{SortKItem{}} (\exists{SortKItem{}} (Val:SortStateCell{}, inj{SortStateCell{}, SortKItem{}} (Val:SortStateCell{})), \or{SortKItem{}} (\exists{SortKItem{}} (X0:SortK{}, \exists{SortKItem{}} (X1:SortK{}, Lbl'Hash'freezerif'LParUndsRParUnds'else'UndsUnds'IMP-SYNTAX'UndsUnds'BExp'Unds'Block'Unds'Block1'Unds'{}(X0:SortK{}, X1:SortK{}))), \or{SortKItem{}} (\exists{SortKItem{}} (X0:SortInt{}, \exists{SortKItem{}} (X1:SortString{}, \exists{SortKItem{}} (X2:SortString{}, Lbl'Hash'systemResult'LParUndsCommUndsCommUndsRParUnds'K-IO'UndsUnds'Int'Unds'String'Unds'String{}(X0:SortInt{}, X1:SortString{}, X2:SortString{})))), \or{SortKItem{}} (\exists{SortKItem{}} (X0:SortK{}, Lbl'Hash'freezer'Unds-LT-EqlsUndsUnds'IMP-SYNTAX'UndsUnds'AExp'Unds'AExp1'Unds'{}(X0:SortK{})), \or{SortKItem{}} (\exists{SortKItem{}} (X0:SortK{}, Lbl'Hash'freezer'Unds-LT-EqlsUndsUnds'IMP-SYNTAX'UndsUnds'AExp'Unds'AExp0'Unds'{}(X0:SortK{})), \or{SortKItem{}} (\exists{SortKItem{}} (Val:SortCell{}, inj{SortCell{}, SortKItem{}} (Val:SortCell{})), \or{SortKItem{}} (\exists{SortKItem{}} (Val:SortBool{}, inj{SortBool{}, SortKItem{}} (Val:SortBool{})), \or{SortKItem{}} (\exists{SortKItem{}} (Val:SortFloat{}, inj{SortFloat{}, SortKItem{}} (Val:SortFloat{})), \or{SortKItem{}} (Lbl'Hash'freezer'BangUndsUnds'IMP-SYNTAX'UndsUnds'BExp0'Unds'{}(), \or{SortKItem{}} (\exists{SortKItem{}} (Val:SortIds{}, inj{SortIds{}, SortKItem{}} (Val:SortIds{})), \or{SortKItem{}} (\exists{SortKItem{}} (Val:SortId{}, inj{SortId{}, SortKItem{}} (Val:SortId{})), \or{SortKItem{}} (\exists{SortKItem{}} (X0:SortK{}, Lbl'Hash'freezer'UndsEqlsUndsSClnUnds'IMP-SYNTAX'UndsUnds'Id'Unds'AExp0'Unds'{}(X0:SortK{})), \or{SortKItem{}} (\exists{SortKItem{}} (X0:SortK{}, Lbl'Hash'freezer'UndsSlshUndsUnds'IMP-SYNTAX'UndsUnds'AExp'Unds'AExp0'Unds'{}(X0:SortK{})), \or{SortKItem{}} (\exists{SortKItem{}} (X0:SortK{}, Lbl'Hash'freezer'UndsPlusUndsUnds'IMP-SYNTAX'UndsUnds'AExp'Unds'AExp1'Unds'{}(X0:SortK{})), \or{SortKItem{}} (\exists{SortKItem{}} (Val:SortStmt{}, inj{SortStmt{}, SortKItem{}} (Val:SortStmt{})), \or{SortKItem{}} (\exists{SortKItem{}} (Val:SortBExp{}, inj{SortBExp{}, SortKItem{}} (Val:SortBExp{})), \or{SortKItem{}} (\exists{SortKItem{}} (Val:SortKCellOpt{}, inj{SortKCellOpt{}, SortKItem{}} (Val:SortKCellOpt{})), \or{SortKItem{}} (\exists{SortKItem{}} (X0:SortK{}, Lbl'Hash'freezer'UndsAndAndUndsUnds'IMP-SYNTAX'UndsUnds'BExp'Unds'BExp1'Unds'{}(X0:SortK{})), \or{SortKItem{}} (\exists{SortKItem{}} (Val:SortString{}, inj{SortString{}, SortKItem{}} (Val:SortString{})), \or{SortKItem{}} (\exists{SortKItem{}} (Val:SortKResult{}, inj{SortKResult{}, SortKItem{}} (Val:SortKResult{})), \or{SortKItem{}} (\exists{SortKItem{}} (Val:SortStream{}, inj{SortStream{}, SortKItem{}} (Val:SortStream{})), \or{SortKItem{}} (\exists{SortKItem{}} (Val:SortBlock{}, inj{SortBlock{}, SortKItem{}} (Val:SortBlock{})), \bottom{SortKItem{}}()))))))))))))))))))))))))))))))))))) [constructor{}()] // no junk
  axiom{} \or{SortList{}} (\exists{SortList{}} (X0:SortList{}, \exists{SortList{}} (X1:SortList{}, Lbl'Unds'List'Unds'{}(X0:SortList{}, X1:SortList{}))), \or{SortList{}} (Lbl'Stop'List{}(), \bottom{SortList{}}())) [constructor{}()] // no junk
  axiom{} \or{SortTCellFragment{}} (\exists{SortTCellFragment{}} (X0:SortKCellOpt{}, \exists{SortTCellFragment{}} (X1:SortStateCellOpt{}, Lbl'-LT-'T'-GT-'-fragment{}(X0:SortKCellOpt{}, X1:SortStateCellOpt{}))), \bottom{SortTCellFragment{}}()) [constructor{}()] // no junk
  axiom{} \or{SortString{}} (\top{SortString{}}(), \bottom{SortString{}}()) [constructor{}()] // no junk (TODO: fix bug with \dv)
  axiom{} \or{SortStateCell{}} (\exists{SortStateCell{}} (X0:SortMap{}, Lbl'-LT-'state'-GT-'{}(X0:SortMap{})), \bottom{SortStateCell{}}()) [constructor{}()] // no junk
  axiom{} \or{SortKConfigVar{}} (\top{SortKConfigVar{}}(), \bottom{SortKConfigVar{}}()) [constructor{}()] // no junk (TODO: fix bug with \dv)
  axiom{} \or{SortTCell{}} (\exists{SortTCell{}} (X0:SortKCell{}, \exists{SortTCell{}} (X1:SortStateCell{}, Lbl'-LT-'T'-GT-'{}(X0:SortKCell{}, X1:SortStateCell{}))), \bottom{SortTCell{}}()) [constructor{}()] // no junk
  axiom{} \or{SortIds{}} (Lbl'Stop'List'LBraQuotUndsCommUndsUnds'IMP-SYNTAX'UndsUnds'Id'Unds'Ids'QuotRBraUnds'Ids{}(), \or{SortIds{}} (\exists{SortIds{}} (X0:SortId{}, \exists{SortIds{}} (X1:SortIds{}, Lbl'UndsCommUndsUnds'IMP-SYNTAX'UndsUnds'Id'Unds'Ids{}(X0:SortId{}, X1:SortIds{}))), \bottom{SortIds{}}())) [constructor{}()] // no junk
  axiom{} \or{SortBExp{}} (\exists{SortBExp{}} (X0:SortBExp{}, Lbl'BangUndsUnds'IMP-SYNTAX'UndsUnds'BExp{}(X0:SortBExp{})), \or{SortBExp{}} (\exists{SortBExp{}} (X0:SortAExp{}, \exists{SortBExp{}} (X1:SortAExp{}, Lbl'Unds-LT-EqlsUndsUnds'IMP-SYNTAX'UndsUnds'AExp'Unds'AExp{}(X0:SortAExp{}, X1:SortAExp{}))), \or{SortBExp{}} (\exists{SortBExp{}} (X0:SortBExp{}, \exists{SortBExp{}} (X1:SortBExp{}, Lbl'UndsAndAndUndsUnds'IMP-SYNTAX'UndsUnds'BExp'Unds'BExp{}(X0:SortBExp{}, X1:SortBExp{}))), \or{SortBExp{}} (\exists{SortBExp{}} (Val:SortBool{}, inj{SortBool{}, SortBExp{}} (Val:SortBool{})), \bottom{SortBExp{}}())))) [constructor{}()] // no junk
  axiom{} \or{SortStateCellOpt{}} (LblnoStateCell{}(), \or{SortStateCellOpt{}} (\exists{SortStateCellOpt{}} (Val:SortStateCell{}, inj{SortStateCell{}, SortStateCellOpt{}} (Val:SortStateCell{})), \bottom{SortStateCellOpt{}}())) [constructor{}()] // no junk
  axiom{} \or{SortId{}} (\top{SortId{}}(), \bottom{SortId{}}()) [constructor{}()] // no junk (TODO: fix bug with \dv)
  axiom{} \or{SortStream{}} (\exists{SortStream{}} (X0:SortK{}, Lbl'Hash'buffer'LParUndsRParUnds'K-IO'UndsUnds'K{}(X0:SortK{})), \bottom{SortStream{}}()) [constructor{}()] // no junk
  axiom{} \or{SortCell{}} (\exists{SortCell{}} (Val:SortKCell{}, inj{SortKCell{}, SortCell{}} (Val:SortKCell{})), \or{SortCell{}} (\exists{SortCell{}} (Val:SortTCell{}, inj{SortTCell{}, SortCell{}} (Val:SortTCell{})), \or{SortCell{}} (\exists{SortCell{}} (Val:SortStateCell{}, inj{SortStateCell{}, SortCell{}} (Val:SortStateCell{})), \bottom{SortCell{}}()))) [constructor{}()] // no junk
  axiom{} \or{SortBool{}} (\top{SortBool{}}(), \bottom{SortBool{}}()) [constructor{}()] // no junk (TODO: fix bug with \dv)
  axiom{} \or{SortKCell{}} (\exists{SortKCell{}} (X0:SortK{}, Lbl'-LT-'k'-GT-'{}(X0:SortK{})), \bottom{SortKCell{}}()) [constructor{}()] // no junk
  axiom{} \or{SortK{}} (\exists{SortK{}} (Val:SortKItem{}, inj{SortKItem{}, SortK{}} (Val:SortKItem{})), \bottom{SortK{}}()) [constructor{}()] // no junk
  axiom{} \or{SortKResult{}} (\exists{SortKResult{}} (Val:SortInt{}, inj{SortInt{}, SortKResult{}} (Val:SortInt{})), \or{SortKResult{}} (\exists{SortKResult{}} (Val:SortBool{}, inj{SortBool{}, SortKResult{}} (Val:SortBool{})), \bottom{SortKResult{}}())) [constructor{}()] // no junk
  axiom{} \or{SortMap{}} (\exists{SortMap{}} (X0:SortMap{}, \exists{SortMap{}} (X1:SortMap{}, Lbl'Unds'Map'Unds'{}(X0:SortMap{}, X1:SortMap{}))), \or{SortMap{}} (Lbl'Stop'Map{}(), \bottom{SortMap{}}())) [constructor{}()] // no junk
  axiom{} \or{SortKCellOpt{}} (\exists{SortKCellOpt{}} (Val:SortKCell{}, inj{SortKCell{}, SortKCellOpt{}} (Val:SortKCell{})), \or{SortKCellOpt{}} (LblnoKCell{}(), \bottom{SortKCellOpt{}}())) [constructor{}()] // no junk
  axiom{} \or{SortStmt{}} (\exists{SortStmt{}} (X0:SortId{}, \exists{SortStmt{}} (X1:SortAExp{}, Lbl'UndsEqlsUndsSClnUnds'IMP-SYNTAX'UndsUnds'Id'Unds'AExp{}(X0:SortId{}, X1:SortAExp{}))), \or{SortStmt{}} (\exists{SortStmt{}} (Val:SortBlock{}, inj{SortBlock{}, SortStmt{}} (Val:SortBlock{})), \or{SortStmt{}} (\exists{SortStmt{}} (X0:SortBExp{}, \exists{SortStmt{}} (X1:SortBlock{}, Lblwhile'LParUndsRParUndsUnds'IMP-SYNTAX'UndsUnds'BExp'Unds'Block{}(X0:SortBExp{}, X1:SortBlock{}))), \or{SortStmt{}} (\exists{SortStmt{}} (X0:SortStmt{}, \exists{SortStmt{}} (X1:SortStmt{}, Lbl'UndsUndsUnds'IMP-SYNTAX'UndsUnds'Stmt'Unds'Stmt{}(X0:SortStmt{}, X1:SortStmt{}))), \or{SortStmt{}} (\exists{SortStmt{}} (X0:SortBExp{}, \exists{SortStmt{}} (X1:SortBlock{}, \exists{SortStmt{}} (X2:SortBlock{}, Lblif'LParUndsRParUnds'else'UndsUnds'IMP-SYNTAX'UndsUnds'BExp'Unds'Block'Unds'Block{}(X0:SortBExp{}, X1:SortBlock{}, X2:SortBlock{})))), \bottom{SortStmt{}}()))))) [constructor{}()] // no junk
  axiom{} \or{SortInt{}} (\top{SortInt{}}(), \bottom{SortInt{}}()) [constructor{}()] // no junk (TODO: fix bug with \dv)
  axiom{} \or{SortFloat{}} (\top{SortFloat{}}(), \bottom{SortFloat{}}()) [constructor{}()] // no junk (TODO: fix bug with \dv)
  axiom{} \or{SortPgm{}} (\exists{SortPgm{}} (X0:SortIds{}, \exists{SortPgm{}} (X1:SortStmt{}, Lblint'UndsSClnUndsUnds'IMP-SYNTAX'UndsUnds'Ids'Unds'Stmt{}(X0:SortIds{}, X1:SortStmt{}))), \bottom{SortPgm{}}()) [constructor{}()] // no junk
  axiom{} \or{SortBlock{}} (Lbl'LBraRBraUnds'IMP-SYNTAX'Unds'{}(), \or{SortBlock{}} (\exists{SortBlock{}} (X0:SortStmt{}, Lbl'LBraUndsRBraUnds'IMP-SYNTAX'UndsUnds'Stmt{}(X0:SortStmt{})), \bottom{SortBlock{}}())) [constructor{}()] // no junk
  axiom{} \or{SortSet{}} (Lbl'Stop'Set{}(), \or{SortSet{}} (\exists{SortSet{}} (X0:SortSet{}, \exists{SortSet{}} (X1:SortSet{}, Lbl'Unds'Set'Unds'{}(X0:SortSet{}, X1:SortSet{}))), \bottom{SortSet{}}())) [constructor{}()] // no junk
  axiom{} \or{SortIOError{}} (\exists{SortIOError{}} (X0:SortInt{}, Lbl'Hash'unknownIOError'LParUndsRParUnds'K-IO'UndsUnds'Int{}(X0:SortInt{})), \or{SortIOError{}} (Lbl'Hash'EBADF'Unds'K-IO'Unds'{}(), \or{SortIOError{}} (Lbl'Hash'ESPIPE'Unds'K-IO'Unds'{}(), \or{SortIOError{}} (Lbl'Hash'EOVERFLOW'Unds'K-IO'Unds'{}(), \or{SortIOError{}} (Lbl'Hash'ENFILE'Unds'K-IO'Unds'{}(), \or{SortIOError{}} (Lbl'Hash'ENETUNREACH'Unds'K-IO'Unds'{}(), \or{SortIOError{}} (Lbl'Hash'EOF'Unds'K-IO'Unds'{}(), \or{SortIOError{}} (Lbl'Hash'EXDEV'Unds'K-IO'Unds'{}(), \or{SortIOError{}} (Lbl'Hash'EADDRNOTAVAIL'Unds'K-IO'Unds'{}(), \or{SortIOError{}} (Lbl'Hash'EACCES'Unds'K-IO'Unds'{}(), \or{SortIOError{}} (Lbl'Hash'ENOPROTOOPT'Unds'K-IO'Unds'{}(), \or{SortIOError{}} (Lbl'Hash'EAGAIN'Unds'K-IO'Unds'{}(), \or{SortIOError{}} (Lbl'Hash'ENETDOWN'Unds'K-IO'Unds'{}(), \or{SortIOError{}} (Lbl'Hash'EISCONN'Unds'K-IO'Unds'{}(), \or{SortIOError{}} (Lbl'Hash'EPIPE'Unds'K-IO'Unds'{}(), \or{SortIOError{}} (Lbl'Hash'ECONNABORTED'Unds'K-IO'Unds'{}(), \or{SortIOError{}} (Lbl'Hash'ESRCH'Unds'K-IO'Unds'{}(), \or{SortIOError{}} (Lbl'Hash'EOPNOTSUPP'Unds'K-IO'Unds'{}(), \or{SortIOError{}} (Lbl'Hash'ENOSPC'Unds'K-IO'Unds'{}(), \or{SortIOError{}} (Lbl'Hash'EDEADLK'Unds'K-IO'Unds'{}(), \or{SortIOError{}} (Lbl'Hash'ECONNREFUSED'Unds'K-IO'Unds'{}(), \or{SortIOError{}} (Lbl'Hash'EPROTOTYPE'Unds'K-IO'Unds'{}(), \or{SortIOError{}} (Lbl'Hash'EAFNOSUPPORT'Unds'K-IO'Unds'{}(), \or{SortIOError{}} (Lbl'Hash'ENXIO'Unds'K-IO'Unds'{}(), \or{SortIOError{}} (Lbl'Hash'EWOULDBLOCK'Unds'K-IO'Unds'{}(), \or{SortIOError{}} (Lbl'Hash'E2BIG'Unds'K-IO'Unds'{}(), \or{SortIOError{}} (Lbl'Hash'ENETRESET'Unds'K-IO'Unds'{}(), \or{SortIOError{}} (Lbl'Hash'EPERM'Unds'K-IO'Unds'{}(), \or{SortIOError{}} (Lbl'Hash'ENOSYS'Unds'K-IO'Unds'{}(), \or{SortIOError{}} (Lbl'Hash'EALREADY'Unds'K-IO'Unds'{}(), \or{SortIOError{}} (Lbl'Hash'EHOSTDOWN'Unds'K-IO'Unds'{}(), \or{SortIOError{}} (Lbl'Hash'ENOTSOCK'Unds'K-IO'Unds'{}(), \or{SortIOError{}} (Lbl'Hash'EDOM'Unds'K-IO'Unds'{}(), \or{SortIOError{}} (Lbl'Hash'ENOBUFS'Unds'K-IO'Unds'{}(), \or{SortIOError{}} (Lbl'Hash'ETIMEDOUT'Unds'K-IO'Unds'{}(), \or{SortIOError{}} (Lbl'Hash'ETOOMANYREFS'Unds'K-IO'Unds'{}(), \or{SortIOError{}} (Lbl'Hash'EDESTADDRREQ'Unds'K-IO'Unds'{}(), \or{SortIOError{}} (Lbl'Hash'ENOTTY'Unds'K-IO'Unds'{}(), \or{SortIOError{}} (Lbl'Hash'ECONNRESET'Unds'K-IO'Unds'{}(), \or{SortIOError{}} (Lbl'Hash'EMFILE'Unds'K-IO'Unds'{}(), \or{SortIOError{}} (Lbl'Hash'EIO'Unds'K-IO'Unds'{}(), \or{SortIOError{}} (Lbl'Hash'ENOEXEC'Unds'K-IO'Unds'{}(), \or{SortIOError{}} (Lbl'Hash'EPFNOSUPPORT'Unds'K-IO'Unds'{}(), \or{SortIOError{}} (Lbl'Hash'ESHUTDOWN'Unds'K-IO'Unds'{}(), \or{SortIOError{}} (Lbl'Hash'EINVAL'Unds'K-IO'Unds'{}(), \or{SortIOError{}} (Lbl'Hash'EMLINK'Unds'K-IO'Unds'{}(), \or{SortIOError{}} (Lbl'Hash'EISDIR'Unds'K-IO'Unds'{}(), \or{SortIOError{}} (Lbl'Hash'EFBIG'Unds'K-IO'Unds'{}(), \or{SortIOError{}} (Lbl'Hash'ENOTCONN'Unds'K-IO'Unds'{}(), \or{SortIOError{}} (Lbl'Hash'ENODEV'Unds'K-IO'Unds'{}(), \or{SortIOError{}} (Lbl'Hash'EEXIST'Unds'K-IO'Unds'{}(), \or{SortIOError{}} (Lbl'Hash'ELOOP'Unds'K-IO'Unds'{}(), \or{SortIOError{}} (Lbl'Hash'ENOTEMPTY'Unds'K-IO'Unds'{}(), \or{SortIOError{}} (Lbl'Hash'EHOSTUNREACH'Unds'K-IO'Unds'{}(), \or{SortIOError{}} (Lbl'Hash'noparse'Unds'K-IO'Unds'{}(), \or{SortIOError{}} (Lbl'Hash'EINTR'Unds'K-IO'Unds'{}(), \or{SortIOError{}} (Lbl'Hash'EMSGSIZE'Unds'K-IO'Unds'{}(), \or{SortIOError{}} (Lbl'Hash'ENOENT'Unds'K-IO'Unds'{}(), \or{SortIOError{}} (Lbl'Hash'ENOLCK'Unds'K-IO'Unds'{}(), \or{SortIOError{}} (Lbl'Hash'EFAULT'Unds'K-IO'Unds'{}(), \or{SortIOError{}} (Lbl'Hash'ERANGE'Unds'K-IO'Unds'{}(), \or{SortIOError{}} (Lbl'Hash'EBUSY'Unds'K-IO'Unds'{}(), \or{SortIOError{}} (Lbl'Hash'EINPROGRESS'Unds'K-IO'Unds'{}(), \or{SortIOError{}} (Lbl'Hash'ENOMEM'Unds'K-IO'Unds'{}(), \or{SortIOError{}} (Lbl'Hash'ENOTDIR'Unds'K-IO'Unds'{}(), \or{SortIOError{}} (Lbl'Hash'ENAMETOOLONG'Unds'K-IO'Unds'{}(), \or{SortIOError{}} (Lbl'Hash'EADDRINUSE'Unds'K-IO'Unds'{}(), \or{SortIOError{}} (Lbl'Hash'EROFS'Unds'K-IO'Unds'{}(), \or{SortIOError{}} (Lbl'Hash'EPROTONOSUPPORT'Unds'K-IO'Unds'{}(), \or{SortIOError{}} (Lbl'Hash'ESOCKTNOSUPPORT'Unds'K-IO'Unds'{}(), \or{SortIOError{}} (Lbl'Hash'ECHILD'Unds'K-IO'Unds'{}(), \bottom{SortIOError{}}()))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))) [constructor{}()] // no junk
  axiom{} \or{SortAExp{}} (\exists{SortAExp{}} (Val:SortId{}, inj{SortId{}, SortAExp{}} (Val:SortId{})), \or{SortAExp{}} (\exists{SortAExp{}} (Val:SortInt{}, inj{SortInt{}, SortAExp{}} (Val:SortInt{})), \or{SortAExp{}} (\exists{SortAExp{}} (X0:SortInt{}, Lbl-'UndsUnds'IMP-SYNTAX'UndsUnds'Int{}(X0:SortInt{})), \or{SortAExp{}} (\exists{SortAExp{}} (X0:SortAExp{}, \exists{SortAExp{}} (X1:SortAExp{}, Lbl'UndsSlshUndsUnds'IMP-SYNTAX'UndsUnds'AExp'Unds'AExp{}(X0:SortAExp{}, X1:SortAExp{}))), \or{SortAExp{}} (\exists{SortAExp{}} (X0:SortAExp{}, \exists{SortAExp{}} (X1:SortAExp{}, Lbl'UndsPlusUndsUnds'IMP-SYNTAX'UndsUnds'AExp'Unds'AExp{}(X0:SortAExp{}, X1:SortAExp{}))), \bottom{SortAExp{}}()))))) [constructor{}()] // no junk

// rules
// rule `<T>`(`<k>`(inj{BExp,KItem}(`_<=__IMP-SYNTAX__AExp_AExp`(inj{Int,AExp}(I1),inj{Int,AExp}(I2)))~>DotVar1),DotVar0)=>`<T>`(`<k>`(inj{Bool,KItem}(`_<=Int__INT__Int_Int`(I1,I2))~>DotVar1),DotVar0) requires #token("true","Bool") ensures #token("true","Bool") [contentStartColumn(8) contentStartLine(44) org.kframework.attributes.Location(Location(44,8,44,31)) org.kframework.attributes.Source(Source(/Users/manasvi/Projects/k-in-k/imp/./imp.k)) org.kframework.definition.Production(syntax RuleContent ::= K)]
  axiom{} \and{SortTCell{}} (
    \top{SortTCell{}}(), \and{SortTCell{}} (
    \top{SortTCell{}}(), \rewrites{SortTCell{}}(Lbl'-LT-'T'-GT-'{}(Lbl'-LT-'k'-GT-'{}(kseq{}(inj{SortBExp{}, SortKItem{}}(Lbl'Unds-LT-EqlsUndsUnds'IMP-SYNTAX'UndsUnds'AExp'Unds'AExp{}(inj{SortInt{}, SortAExp{}}(VarI1:SortInt{}),inj{SortInt{}, SortAExp{}}(VarI2:SortInt{}))),VarDotVar1:SortK{})),VarDotVar0:SortStateCell{}),Lbl'-LT-'T'-GT-'{}(Lbl'-LT-'k'-GT-'{}(kseq{}(inj{SortBool{}, SortKItem{}}(Lbl'Unds-LT-Eqls'Int'UndsUnds'INT'UndsUnds'Int'Unds'Int{}(VarI1:SortInt{},VarI2:SortInt{})),VarDotVar1:SortK{})),VarDotVar0:SortStateCell{}))))
  [org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(44,8,44,31)"), contentStartColumn{}("8"), org'Stop'kframework'Stop'definition'Stop'Production{}("syntax RuleContent ::= K"), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/Users/manasvi/Projects/k-in-k/imp/./imp.k)"), contentStartLine{}("44")]

// rule `<T>`(`<k>`(inj{Id,KItem}(X)~>DotVar1),`<state>`(`_Map_`(`_|->_`(inj{Id,KItem}(X),I),DotVar2)))=>`<T>`(`<k>`(I~>DotVar1),`<state>`(`_Map_`(`_|->_`(inj{Id,KItem}(X),I),DotVar2))) requires #token("true","Bool") ensures #token("true","Bool") [contentStartColumn(8) contentStartLine(39) org.kframework.attributes.Location(Location(39,8,39,60)) org.kframework.attributes.Source(Source(/Users/manasvi/Projects/k-in-k/imp/./imp.k)) org.kframework.definition.Production(syntax RuleContent ::= K)]
  axiom{} \and{SortTCell{}} (
    \top{SortTCell{}}(), \and{SortTCell{}} (
    \top{SortTCell{}}(), \rewrites{SortTCell{}}(Lbl'-LT-'T'-GT-'{}(Lbl'-LT-'k'-GT-'{}(kseq{}(inj{SortId{}, SortKItem{}}(VarX:SortId{}),VarDotVar1:SortK{})),Lbl'-LT-'state'-GT-'{}(Lbl'Unds'Map'Unds'{}(Lbl'UndsPipe'-'-GT-Unds'{}(kseq{}(inj{SortId{}, SortKItem{}}(VarX:SortId{}),dotk{}()),VarI:SortK{}),VarDotVar2:SortMap{}))),Lbl'-LT-'T'-GT-'{}(Lbl'-LT-'k'-GT-'{}(append{}(VarI:SortK{},VarDotVar1:SortK{})),Lbl'-LT-'state'-GT-'{}(Lbl'Unds'Map'Unds'{}(Lbl'UndsPipe'-'-GT-Unds'{}(kseq{}(inj{SortId{}, SortKItem{}}(VarX:SortId{}),dotk{}()),VarI:SortK{}),VarDotVar2:SortMap{}))))))
  [org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(39,8,39,60)"), contentStartColumn{}("8"), org'Stop'kframework'Stop'definition'Stop'Production{}("syntax RuleContent ::= K"), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/Users/manasvi/Projects/k-in-k/imp/./imp.k)"), contentStartLine{}("39")]

// rule isKItem(inj{AExp,KItem}(AExp))=>#token("true","Bool") requires #token("true","Bool") ensures #token("true","Bool") []
  axiom{R} \implies{R} (
    \top{R}(),
    \and{R} (
      \equals{SortBool{},R} (
        LblisKItem{}(kseq{}(inj{SortAExp{}, SortKItem{}}(VarAExp:SortAExp{}),dotk{}())),
        \dv{SortBool{}}("true")),
      \top{R}()))
  []

// rule isKItem(inj{KCell,KItem}(KCell))=>#token("true","Bool") requires #token("true","Bool") ensures #token("true","Bool") []
  axiom{R} \implies{R} (
    \top{R}(),
    \and{R} (
      \equals{SortBool{},R} (
        LblisKItem{}(kseq{}(inj{SortKCell{}, SortKItem{}}(VarKCell:SortKCell{}),dotk{}())),
        \dv{SortBool{}}("true")),
      \top{R}()))
  []

// rule `_andThenBool__BOOL__Bool_Bool`(K,#token("true","Bool"))=>K requires #token("true","Bool") ensures #token("true","Bool") [contentStartColumn(8) contentStartLine(291) org.kframework.attributes.Location(Location(291,8,291,37)) org.kframework.attributes.Source(Source(/Users/manasvi/Projects/k-in-k/ext/k/k-distribution/target/release/k/include/builtin/domains.k)) org.kframework.definition.Production(syntax RuleContent ::= K)]
  axiom{R} \implies{R} (
    \top{R}(),
    \and{R} (
      \equals{SortBool{},R} (
        Lbl'Unds'andThenBool'UndsUnds'BOOL'UndsUnds'Bool'Unds'Bool{}(VarK:SortBool{},\dv{SortBool{}}("true")),
        VarK:SortBool{}),
      \top{R}()))
  [org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(291,8,291,37)"), contentStartColumn{}("8"), org'Stop'kframework'Stop'definition'Stop'Production{}("syntax RuleContent ::= K"), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/Users/manasvi/Projects/k-in-k/ext/k/k-distribution/target/release/k/include/builtin/domains.k)"), contentStartLine{}("291")]

// rule isKItem(inj{Pgm,KItem}(Pgm))=>#token("true","Bool") requires #token("true","Bool") ensures #token("true","Bool") []
  axiom{R} \implies{R} (
    \top{R}(),
    \and{R} (
      \equals{SortBool{},R} (
        LblisKItem{}(kseq{}(inj{SortPgm{}, SortKItem{}}(VarPgm:SortPgm{}),dotk{}())),
        \dv{SortBool{}}("true")),
      \top{R}()))
  []

// rule `replace(_,_,_,_)_STRING__String_String_String_Int`(Source,ToReplace,Replacement,Count)=>`_+String__STRING__String_String`(`_+String__STRING__String_String`(`substrString(_,_,_)_STRING__String_Int_Int`(Source,#token("0","Int"),`findString(_,_,_)_STRING__String_String_Int`(Source,ToReplace,#token("0","Int"))),Replacement),`replace(_,_,_,_)_STRING__String_String_String_Int`(`substrString(_,_,_)_STRING__String_Int_Int`(Source,`_+Int__INT__Int_Int`(`findString(_,_,_)_STRING__String_String_Int`(Source,ToReplace,#token("0","Int")),`lengthString(_)_STRING__String`(ToReplace)),`lengthString(_)_STRING__String`(Source)),ToReplace,Replacement,`_-Int__INT__Int_Int`(Count,#token("1","Int")))) requires `_>Int__INT__Int_Int`(Count,#token("0","Int")) ensures #token("true","Bool") [contentStartColumn(8) contentStartLine(553) org.kframework.attributes.Location(Location(553,8,556,30)) org.kframework.attributes.Source(Source(/Users/manasvi/Projects/k-in-k/ext/k/k-distribution/target/release/k/include/builtin/domains.k)) org.kframework.definition.Production(syntax RuleContent ::= K "requires" K)]
  axiom{R} \implies{R} (
    \equals{SortBool{},R}(
        Lbl'Unds-GT-'Int'UndsUnds'INT'UndsUnds'Int'Unds'Int{}(VarCount:SortInt{},\dv{SortInt{}}("0")),
        \dv{SortBool{}}("true")),
    \and{R} (
      \equals{SortString{},R} (
        Lblreplace'LParUndsCommUndsCommUndsCommUndsRParUnds'STRING'UndsUnds'String'Unds'String'Unds'String'Unds'Int{}(VarSource:SortString{},VarToReplace:SortString{},VarReplacement:SortString{},VarCount:SortInt{}),
        Lbl'UndsPlus'String'UndsUnds'STRING'UndsUnds'String'Unds'String{}(Lbl'UndsPlus'String'UndsUnds'STRING'UndsUnds'String'Unds'String{}(LblsubstrString'LParUndsCommUndsCommUndsRParUnds'STRING'UndsUnds'String'Unds'Int'Unds'Int{}(VarSource:SortString{},\dv{SortInt{}}("0"),LblfindString'LParUndsCommUndsCommUndsRParUnds'STRING'UndsUnds'String'Unds'String'Unds'Int{}(VarSource:SortString{},VarToReplace:SortString{},\dv{SortInt{}}("0"))),VarReplacement:SortString{}),Lblreplace'LParUndsCommUndsCommUndsCommUndsRParUnds'STRING'UndsUnds'String'Unds'String'Unds'String'Unds'Int{}(LblsubstrString'LParUndsCommUndsCommUndsRParUnds'STRING'UndsUnds'String'Unds'Int'Unds'Int{}(VarSource:SortString{},Lbl'UndsPlus'Int'UndsUnds'INT'UndsUnds'Int'Unds'Int{}(LblfindString'LParUndsCommUndsCommUndsRParUnds'STRING'UndsUnds'String'Unds'String'Unds'Int{}(VarSource:SortString{},VarToReplace:SortString{},\dv{SortInt{}}("0")),LbllengthString'LParUndsRParUnds'STRING'UndsUnds'String{}(VarToReplace:SortString{})),LbllengthString'LParUndsRParUnds'STRING'UndsUnds'String{}(VarSource:SortString{})),VarToReplace:SortString{},VarReplacement:SortString{},Lbl'Unds'-Int'UndsUnds'INT'UndsUnds'Int'Unds'Int{}(VarCount:SortInt{},\dv{SortInt{}}("1"))))),
      \top{R}()))
  [org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(553,8,556,30)"), contentStartColumn{}("8"), org'Stop'kframework'Stop'definition'Stop'Production{}("syntax RuleContent ::= K \"requires\" K"), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/Users/manasvi/Projects/k-in-k/ext/k/k-distribution/target/release/k/include/builtin/domains.k)"), contentStartLine{}("553")]

// rule `<T>`(`<k>`(inj{AExp,KItem}(`-__IMP-SYNTAX__Int`(I1))~>DotVar1),DotVar0)=>`<T>`(`<k>`(inj{Int,KItem}(`_-Int__INT__Int_Int`(#token("0","Int"),I1))~>DotVar1),DotVar0) requires #token("true","Bool") ensures #token("true","Bool") [contentStartColumn(8) contentStartLine(42) org.kframework.attributes.Location(Location(42,8,42,25)) org.kframework.attributes.Source(Source(/Users/manasvi/Projects/k-in-k/imp/./imp.k)) org.kframework.definition.Production(syntax RuleContent ::= K)]
  axiom{} \and{SortTCell{}} (
    \top{SortTCell{}}(), \and{SortTCell{}} (
    \top{SortTCell{}}(), \rewrites{SortTCell{}}(Lbl'-LT-'T'-GT-'{}(Lbl'-LT-'k'-GT-'{}(kseq{}(inj{SortAExp{}, SortKItem{}}(Lbl-'UndsUnds'IMP-SYNTAX'UndsUnds'Int{}(VarI1:SortInt{})),VarDotVar1:SortK{})),VarDotVar0:SortStateCell{}),Lbl'-LT-'T'-GT-'{}(Lbl'-LT-'k'-GT-'{}(kseq{}(inj{SortInt{}, SortKItem{}}(Lbl'Unds'-Int'UndsUnds'INT'UndsUnds'Int'Unds'Int{}(\dv{SortInt{}}("0"),VarI1:SortInt{})),VarDotVar1:SortK{})),VarDotVar0:SortStateCell{}))))
  [org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(42,8,42,25)"), contentStartColumn{}("8"), org'Stop'kframework'Stop'definition'Stop'Production{}("syntax RuleContent ::= K"), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/Users/manasvi/Projects/k-in-k/imp/./imp.k)"), contentStartLine{}("42")]

// rule isAExp(K)=>#token("false","Bool") requires #token("true","Bool") ensures #token("true","Bool") [owise()]
  axiom{R} \implies{R} (
    \and{R} (
      \not{R} (
        \or{R} (
          \ceil{SortBool{},R} (
            \exists{SortBool{}} (VarAExp:SortAExp{},
              \and{SortBool{}} (
                \top{SortBool{}}(),
                LblisAExp{}(kseq{}(inj{SortAExp{}, SortKItem{}}(VarAExp:SortAExp{}),dotk{}()))))),
        \or{R} (
          \ceil{SortBool{},R} (
            \exists{SortBool{}} (VarInt:SortInt{},
              \and{SortBool{}} (
                \top{SortBool{}}(),
                LblisAExp{}(kseq{}(inj{SortInt{}, SortKItem{}}(VarInt:SortInt{}),dotk{}()))))),
        \or{R} (
          \ceil{SortBool{},R} (
            \exists{SortBool{}} (VarId:SortId{},
              \and{SortBool{}} (
                \top{SortBool{}}(),
                LblisAExp{}(kseq{}(inj{SortId{}, SortKItem{}}(VarId:SortId{}),dotk{}()))))),
        \bottom{R}())))),
      \top{R}()),
    \and{R} (
      \equals{SortBool{},R} (
        LblisAExp{}(VarK:SortK{}),
        \dv{SortBool{}}("false")),
      \top{R}()))
  [owise{}()]

// rule isTCell(K)=>#token("false","Bool") requires #token("true","Bool") ensures #token("true","Bool") [owise()]
  axiom{R} \implies{R} (
    \and{R} (
      \not{R} (
        \or{R} (
          \ceil{SortBool{},R} (
            \exists{SortBool{}} (VarTCell:SortTCell{},
              \and{SortBool{}} (
                \top{SortBool{}}(),
                LblisTCell{}(kseq{}(inj{SortTCell{}, SortKItem{}}(VarTCell:SortTCell{}),dotk{}()))))),
        \bottom{R}())),
      \top{R}()),
    \and{R} (
      \equals{SortBool{},R} (
        LblisTCell{}(VarK:SortK{}),
        \dv{SortBool{}}("false")),
      \top{R}()))
  [owise{}()]

// rule `<T>`(`<k>`(inj{AExp,KItem}(`_/__IMP-SYNTAX__AExp_AExp`(HOLE,K1))~>DotVar1),DotVar0)=>`<T>`(`<k>`(inj{AExp,KItem}(HOLE)~>`#freezer_/__IMP-SYNTAX__AExp_AExp1_`(inj{AExp,KItem}(K1))~>DotVar1),DotVar0) requires #token("true","Bool") ensures #token("true","Bool") [heat() left() org.kframework.attributes.Location(Location(7,20,7,77)) org.kframework.attributes.Source(Source(/Users/manasvi/Projects/k-in-k/imp/./imp.k)) productionID(284686302) strict() symbol(divAExp)]
  axiom{} \and{SortTCell{}} (
    \top{SortTCell{}}(), \and{SortTCell{}} (
    \top{SortTCell{}}(), \rewrites{SortTCell{}}(Lbl'-LT-'T'-GT-'{}(Lbl'-LT-'k'-GT-'{}(kseq{}(inj{SortAExp{}, SortKItem{}}(Lbl'UndsSlshUndsUnds'IMP-SYNTAX'UndsUnds'AExp'Unds'AExp{}(VarHOLE:SortAExp{},VarK1:SortAExp{})),VarDotVar1:SortK{})),VarDotVar0:SortStateCell{}),Lbl'-LT-'T'-GT-'{}(Lbl'-LT-'k'-GT-'{}(kseq{}(inj{SortAExp{}, SortKItem{}}(VarHOLE:SortAExp{}),kseq{}(Lbl'Hash'freezer'UndsSlshUndsUnds'IMP-SYNTAX'UndsUnds'AExp'Unds'AExp1'Unds'{}(kseq{}(inj{SortAExp{}, SortKItem{}}(VarK1:SortAExp{}),dotk{}())),VarDotVar1:SortK{}))),VarDotVar0:SortStateCell{}))))
  [org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(7,20,7,77)"), heat{}(), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/Users/manasvi/Projects/k-in-k/imp/./imp.k)"), left{}(), productionID{}("284686302"), strict{}(""), symbol'Kywd'{}("divAExp")]

// rule isSet(inj{Set,KItem}(Set))=>#token("true","Bool") requires #token("true","Bool") ensures #token("true","Bool") []
  axiom{R} \implies{R} (
    \top{R}(),
    \and{R} (
      \equals{SortBool{},R} (
        LblisSet{}(kseq{}(inj{SortSet{}, SortKItem{}}(VarSet:SortSet{}),dotk{}())),
        \dv{SortBool{}}("true")),
      \top{R}()))
  []

// rule isStateCellOpt(K)=>#token("false","Bool") requires #token("true","Bool") ensures #token("true","Bool") [owise()]
  axiom{R} \implies{R} (
    \and{R} (
      \not{R} (
        \or{R} (
          \ceil{SortBool{},R} (
            \exists{SortBool{}} (VarStateCellOpt:SortStateCellOpt{},
              \and{SortBool{}} (
                \top{SortBool{}}(),
                LblisStateCellOpt{}(kseq{}(inj{SortStateCellOpt{}, SortKItem{}}(VarStateCellOpt:SortStateCellOpt{}),dotk{}()))))),
        \or{R} (
          \ceil{SortBool{},R} (
            \exists{SortBool{}} (VarStateCell:SortStateCell{},
              \and{SortBool{}} (
                \top{SortBool{}}(),
                LblisStateCellOpt{}(kseq{}(inj{SortStateCell{}, SortKItem{}}(VarStateCell:SortStateCell{}),dotk{}()))))),
        \bottom{R}()))),
      \top{R}()),
    \and{R} (
      \equals{SortBool{},R} (
        LblisStateCellOpt{}(VarK:SortK{}),
        \dv{SortBool{}}("false")),
      \top{R}()))
  [owise{}()]

// rule `<T>`(`<k>`(inj{Block,KItem}(`{}_IMP-SYNTAX_`(.KList))~>DotVar1),DotVar0)=>`<T>`(`<k>`(DotVar1),DotVar0) requires #token("true","Bool") ensures #token("true","Bool") [contentStartColumn(8) contentStartLine(49) org.kframework.attributes.Location(Location(49,8,49,15)) org.kframework.attributes.Source(Source(/Users/manasvi/Projects/k-in-k/imp/./imp.k)) org.kframework.definition.Production(syntax RuleContent ::= K) structural()]
  axiom{} \and{SortTCell{}} (
    \top{SortTCell{}}(), \and{SortTCell{}} (
    \top{SortTCell{}}(), \rewrites{SortTCell{}}(Lbl'-LT-'T'-GT-'{}(Lbl'-LT-'k'-GT-'{}(kseq{}(inj{SortBlock{}, SortKItem{}}(Lbl'LBraRBraUnds'IMP-SYNTAX'Unds'{}()),VarDotVar1:SortK{})),VarDotVar0:SortStateCell{}),Lbl'-LT-'T'-GT-'{}(Lbl'-LT-'k'-GT-'{}(VarDotVar1:SortK{}),VarDotVar0:SortStateCell{}))))
  [org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(49,8,49,15)"), contentStartColumn{}("8"), org'Stop'kframework'Stop'definition'Stop'Production{}("syntax RuleContent ::= K"), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/Users/manasvi/Projects/k-in-k/imp/./imp.k)"), contentStartLine{}("49"), structural{}()]

// rule `<T>`(`<k>`(inj{AExp,KItem}(HOLE)~>`#freezer_<=__IMP-SYNTAX__AExp_AExp0_`(inj{AExp,KItem}(K0))~>DotVar1),DotVar0)=>`<T>`(`<k>`(inj{BExp,KItem}(`_<=__IMP-SYNTAX__AExp_AExp`(K0,HOLE))~>DotVar1),DotVar0) requires #token("true","Bool") ensures #token("true","Bool") [cool() latex({#1}\leq{#2}) org.kframework.attributes.Location(Location(11,20,11,94)) org.kframework.attributes.Source(Source(/Users/manasvi/Projects/k-in-k/imp/./imp.k)) productionID(1810923540) seqstrict() symbol(ltAExp)]
  axiom{} \and{SortTCell{}} (
    \top{SortTCell{}}(), \and{SortTCell{}} (
    \top{SortTCell{}}(), \rewrites{SortTCell{}}(Lbl'-LT-'T'-GT-'{}(Lbl'-LT-'k'-GT-'{}(kseq{}(inj{SortAExp{}, SortKItem{}}(VarHOLE:SortAExp{}),kseq{}(Lbl'Hash'freezer'Unds-LT-EqlsUndsUnds'IMP-SYNTAX'UndsUnds'AExp'Unds'AExp0'Unds'{}(kseq{}(inj{SortAExp{}, SortKItem{}}(VarK0:SortAExp{}),dotk{}())),VarDotVar1:SortK{}))),VarDotVar0:SortStateCell{}),Lbl'-LT-'T'-GT-'{}(Lbl'-LT-'k'-GT-'{}(kseq{}(inj{SortBExp{}, SortKItem{}}(Lbl'Unds-LT-EqlsUndsUnds'IMP-SYNTAX'UndsUnds'AExp'Unds'AExp{}(VarK0:SortAExp{},VarHOLE:SortAExp{})),VarDotVar1:SortK{})),VarDotVar0:SortStateCell{}))))
  [org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(11,20,11,94)"), cool{}(), seqstrict{}(), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/Users/manasvi/Projects/k-in-k/imp/./imp.k)"), productionID{}("1810923540"), latex{}("{#1}\\leq{#2}"), symbol'Kywd'{}("ltAExp")]

// rule isCell(inj{TCell,KItem}(TCell))=>#token("true","Bool") requires #token("true","Bool") ensures #token("true","Bool") []
  axiom{R} \implies{R} (
    \top{R}(),
    \and{R} (
      \equals{SortBool{},R} (
        LblisCell{}(kseq{}(inj{SortTCell{}, SortKItem{}}(VarTCell:SortTCell{}),dotk{}())),
        \dv{SortBool{}}("true")),
      \top{R}()))
  []

// rule isList(inj{List,KItem}(List))=>#token("true","Bool") requires #token("true","Bool") ensures #token("true","Bool") []
  axiom{R} \implies{R} (
    \top{R}(),
    \and{R} (
      \equals{SortBool{},R} (
        LblisList{}(kseq{}(inj{SortList{}, SortKItem{}}(VarList:SortList{}),dotk{}())),
        \dv{SortBool{}}("true")),
      \top{R}()))
  []

// rule isId(inj{Id,KItem}(Id))=>#token("true","Bool") requires #token("true","Bool") ensures #token("true","Bool") []
  axiom{R} \implies{R} (
    \top{R}(),
    \and{R} (
      \equals{SortBool{},R} (
        LblisId{}(kseq{}(inj{SortId{}, SortKItem{}}(VarId:SortId{}),dotk{}())),
        \dv{SortBool{}}("true")),
      \top{R}()))
  []

// rule `_andThenBool__BOOL__Bool_Bool`(_5,#token("false","Bool"))=>#token("false","Bool") requires #token("true","Bool") ensures #token("true","Bool") [contentStartColumn(8) contentStartLine(293) org.kframework.attributes.Location(Location(293,8,293,36)) org.kframework.attributes.Source(Source(/Users/manasvi/Projects/k-in-k/ext/k/k-distribution/target/release/k/include/builtin/domains.k)) org.kframework.definition.Production(syntax RuleContent ::= K)]
  axiom{R} \implies{R} (
    \top{R}(),
    \and{R} (
      \equals{SortBool{},R} (
        Lbl'Unds'andThenBool'UndsUnds'BOOL'UndsUnds'Bool'Unds'Bool{}(Var'Unds'5:SortBool{},\dv{SortBool{}}("false")),
        \dv{SortBool{}}("false")),
      \top{R}()))
  [org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(293,8,293,36)"), contentStartColumn{}("8"), org'Stop'kframework'Stop'definition'Stop'Production{}("syntax RuleContent ::= K"), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/Users/manasvi/Projects/k-in-k/ext/k/k-distribution/target/release/k/include/builtin/domains.k)"), contentStartLine{}("293")]

// rule isBlock(inj{Block,KItem}(Block))=>#token("true","Bool") requires #token("true","Bool") ensures #token("true","Bool") []
  axiom{R} \implies{R} (
    \top{R}(),
    \and{R} (
      \equals{SortBool{},R} (
        LblisBlock{}(kseq{}(inj{SortBlock{}, SortKItem{}}(VarBlock:SortBlock{}),dotk{}())),
        \dv{SortBool{}}("true")),
      \top{R}()))
  []

// rule `<T>`(`<k>`(inj{AExp,KItem}(HOLE)~>`#freezer_=_;_IMP-SYNTAX__Id_AExp0_`(inj{Id,KItem}(K0))~>DotVar1),DotVar0)=>`<T>`(`<k>`(inj{Stmt,KItem}(`_=_;_IMP-SYNTAX__Id_AExp`(K0,HOLE))~>DotVar1),DotVar0) requires #token("true","Bool") ensures #token("true","Bool") [cool() org.kframework.attributes.Location(Location(18,20,18,73)) org.kframework.attributes.Source(Source(/Users/manasvi/Projects/k-in-k/imp/./imp.k)) productionID(417557780) strict(2) symbol(assign)]
  axiom{} \and{SortTCell{}} (
    \top{SortTCell{}}(), \and{SortTCell{}} (
    \top{SortTCell{}}(), \rewrites{SortTCell{}}(Lbl'-LT-'T'-GT-'{}(Lbl'-LT-'k'-GT-'{}(kseq{}(inj{SortAExp{}, SortKItem{}}(VarHOLE:SortAExp{}),kseq{}(Lbl'Hash'freezer'UndsEqlsUndsSClnUnds'IMP-SYNTAX'UndsUnds'Id'Unds'AExp0'Unds'{}(kseq{}(inj{SortId{}, SortKItem{}}(VarK0:SortId{}),dotk{}())),VarDotVar1:SortK{}))),VarDotVar0:SortStateCell{}),Lbl'-LT-'T'-GT-'{}(Lbl'-LT-'k'-GT-'{}(kseq{}(inj{SortStmt{}, SortKItem{}}(Lbl'UndsEqlsUndsSClnUnds'IMP-SYNTAX'UndsUnds'Id'Unds'AExp{}(VarK0:SortId{},VarHOLE:SortAExp{})),VarDotVar1:SortK{})),VarDotVar0:SortStateCell{}))))
  [org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(18,20,18,73)"), cool{}(), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/Users/manasvi/Projects/k-in-k/imp/./imp.k)"), productionID{}("417557780"), strict{}("2"), symbol'Kywd'{}("assign")]

// rule isKItem(inj{KResult,KItem}(KResult))=>#token("true","Bool") requires #token("true","Bool") ensures #token("true","Bool") []
  axiom{R} \implies{R} (
    \top{R}(),
    \and{R} (
      \equals{SortBool{},R} (
        LblisKItem{}(kseq{}(inj{SortKResult{}, SortKItem{}}(VarKResult:SortKResult{}),dotk{}())),
        \dv{SortBool{}}("true")),
      \top{R}()))
  []

// rule isKItem(inj{Map,KItem}(Map))=>#token("true","Bool") requires #token("true","Bool") ensures #token("true","Bool") []
  axiom{R} \implies{R} (
    \top{R}(),
    \and{R} (
      \equals{SortBool{},R} (
        LblisKItem{}(kseq{}(inj{SortMap{}, SortKItem{}}(VarMap:SortMap{}),dotk{}())),
        \dv{SortBool{}}("true")),
      \top{R}()))
  []

// rule `#stderr_K-IO_`(.KList)=>#token("2","Int") requires #token("true","Bool") ensures #token("true","Bool") [contentStartColumn(8) contentStartLine(862) org.kframework.attributes.Location(Location(862,8,862,20)) org.kframework.attributes.Source(Source(/Users/manasvi/Projects/k-in-k/ext/k/k-distribution/target/release/k/include/builtin/domains.k)) org.kframework.definition.Production(syntax RuleContent ::= K)]
  axiom{R} \implies{R} (
    \top{R}(),
    \and{R} (
      \equals{SortInt{},R} (
        Lbl'Hash'stderr'Unds'K-IO'Unds'{}(),
        \dv{SortInt{}}("2")),
      \top{R}()))
  [org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(862,8,862,20)"), contentStartColumn{}("8"), org'Stop'kframework'Stop'definition'Stop'Production{}("syntax RuleContent ::= K"), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/Users/manasvi/Projects/k-in-k/ext/k/k-distribution/target/release/k/include/builtin/domains.k)"), contentStartLine{}("862")]

// rule `_andBool_`(B,#token("true","Bool"))=>B requires #token("true","Bool") ensures #token("true","Bool") [contentStartColumn(8) contentStartLine(286) org.kframework.attributes.Location(Location(286,8,286,37)) org.kframework.attributes.Source(Source(/Users/manasvi/Projects/k-in-k/ext/k/k-distribution/target/release/k/include/builtin/domains.k)) org.kframework.definition.Production(syntax RuleContent ::= K)]
  axiom{R} \implies{R} (
    \top{R}(),
    \and{R} (
      \equals{SortBool{},R} (
        Lbl'Unds'andBool'Unds'{}(VarB:SortBool{},\dv{SortBool{}}("true")),
        VarB:SortBool{}),
      \top{R}()))
  [org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(286,8,286,37)"), contentStartColumn{}("8"), org'Stop'kframework'Stop'definition'Stop'Production{}("syntax RuleContent ::= K"), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/Users/manasvi/Projects/k-in-k/ext/k/k-distribution/target/release/k/include/builtin/domains.k)"), contentStartLine{}("286")]

// rule `_impliesBool__BOOL__Bool_Bool`(#token("true","Bool"),B)=>B requires #token("true","Bool") ensures #token("true","Bool") [contentStartColumn(8) contentStartLine(310) org.kframework.attributes.Location(Location(310,8,310,36)) org.kframework.attributes.Source(Source(/Users/manasvi/Projects/k-in-k/ext/k/k-distribution/target/release/k/include/builtin/domains.k)) org.kframework.definition.Production(syntax RuleContent ::= K)]
  axiom{R} \implies{R} (
    \top{R}(),
    \and{R} (
      \equals{SortBool{},R} (
        Lbl'Unds'impliesBool'UndsUnds'BOOL'UndsUnds'Bool'Unds'Bool{}(\dv{SortBool{}}("true"),VarB:SortBool{}),
        VarB:SortBool{}),
      \top{R}()))
  [org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(310,8,310,36)"), contentStartColumn{}("8"), org'Stop'kframework'Stop'definition'Stop'Production{}("syntax RuleContent ::= K"), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/Users/manasvi/Projects/k-in-k/ext/k/k-distribution/target/release/k/include/builtin/domains.k)"), contentStartLine{}("310")]

// rule `_impliesBool__BOOL__Bool_Bool`(_6,#token("true","Bool"))=>#token("true","Bool") requires #token("true","Bool") ensures #token("true","Bool") [contentStartColumn(8) contentStartLine(312) org.kframework.attributes.Location(Location(312,8,312,39)) org.kframework.attributes.Source(Source(/Users/manasvi/Projects/k-in-k/ext/k/k-distribution/target/release/k/include/builtin/domains.k)) org.kframework.definition.Production(syntax RuleContent ::= K)]
  axiom{R} \implies{R} (
    \top{R}(),
    \and{R} (
      \equals{SortBool{},R} (
        Lbl'Unds'impliesBool'UndsUnds'BOOL'UndsUnds'Bool'Unds'Bool{}(Var'Unds'6:SortBool{},\dv{SortBool{}}("true")),
        \dv{SortBool{}}("true")),
      \top{R}()))
  [org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(312,8,312,39)"), contentStartColumn{}("8"), org'Stop'kframework'Stop'definition'Stop'Production{}("syntax RuleContent ::= K"), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/Users/manasvi/Projects/k-in-k/ext/k/k-distribution/target/release/k/include/builtin/domains.k)"), contentStartLine{}("312")]

// rule `_orBool__BOOL__Bool_Bool`(B,#token("false","Bool"))=>B requires #token("true","Bool") ensures #token("true","Bool") [contentStartColumn(8) contentStartLine(303) org.kframework.attributes.Location(Location(303,8,303,32)) org.kframework.attributes.Source(Source(/Users/manasvi/Projects/k-in-k/ext/k/k-distribution/target/release/k/include/builtin/domains.k)) org.kframework.definition.Production(syntax RuleContent ::= K)]
  axiom{R} \implies{R} (
    \top{R}(),
    \and{R} (
      \equals{SortBool{},R} (
        Lbl'Unds'orBool'UndsUnds'BOOL'UndsUnds'Bool'Unds'Bool{}(VarB:SortBool{},\dv{SortBool{}}("false")),
        VarB:SortBool{}),
      \top{R}()))
  [org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(303,8,303,32)"), contentStartColumn{}("8"), org'Stop'kframework'Stop'definition'Stop'Production{}("syntax RuleContent ::= K"), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/Users/manasvi/Projects/k-in-k/ext/k/k-distribution/target/release/k/include/builtin/domains.k)"), contentStartLine{}("303")]

// rule `_impliesBool__BOOL__Bool_Bool`(#token("false","Bool"),_8)=>#token("true","Bool") requires #token("true","Bool") ensures #token("true","Bool") [contentStartColumn(8) contentStartLine(311) org.kframework.attributes.Location(Location(311,8,311,40)) org.kframework.attributes.Source(Source(/Users/manasvi/Projects/k-in-k/ext/k/k-distribution/target/release/k/include/builtin/domains.k)) org.kframework.definition.Production(syntax RuleContent ::= K)]
  axiom{R} \implies{R} (
    \top{R}(),
    \and{R} (
      \equals{SortBool{},R} (
        Lbl'Unds'impliesBool'UndsUnds'BOOL'UndsUnds'Bool'Unds'Bool{}(\dv{SortBool{}}("false"),Var'Unds'8:SortBool{}),
        \dv{SortBool{}}("true")),
      \top{R}()))
  [org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(311,8,311,40)"), contentStartColumn{}("8"), org'Stop'kframework'Stop'definition'Stop'Production{}("syntax RuleContent ::= K"), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/Users/manasvi/Projects/k-in-k/ext/k/k-distribution/target/release/k/include/builtin/domains.k)"), contentStartLine{}("311")]

// rule `_==Int__INT__Int_Int`(I1,I2)=>`_==K_`(inj{Int,KItem}(I1),inj{Int,KItem}(I2)) requires #token("true","Bool") ensures #token("true","Bool") [contentStartColumn(8) contentStartLine(390) org.kframework.attributes.Location(Location(390,8,390,40)) org.kframework.attributes.Source(Source(/Users/manasvi/Projects/k-in-k/ext/k/k-distribution/target/release/k/include/builtin/domains.k)) org.kframework.definition.Production(syntax RuleContent ::= K)]
  axiom{R} \implies{R} (
    \top{R}(),
    \and{R} (
      \equals{SortBool{},R} (
        Lbl'UndsEqlsEqls'Int'UndsUnds'INT'UndsUnds'Int'Unds'Int{}(VarI1:SortInt{},VarI2:SortInt{}),
        Lbl'UndsEqlsEqls'K'Unds'{}(kseq{}(inj{SortInt{}, SortKItem{}}(VarI1:SortInt{}),dotk{}()),kseq{}(inj{SortInt{}, SortKItem{}}(VarI2:SortInt{}),dotk{}()))),
      \top{R}()))
  [org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(390,8,390,40)"), contentStartColumn{}("8"), org'Stop'kframework'Stop'definition'Stop'Production{}("syntax RuleContent ::= K"), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/Users/manasvi/Projects/k-in-k/ext/k/k-distribution/target/release/k/include/builtin/domains.k)"), contentStartLine{}("390")]

// rule `<T>`(`<k>`(inj{Stmt,KItem}(`if(_)_else__IMP-SYNTAX__BExp_Block_Block`(inj{Bool,BExp}(#token("false","Bool")),_21,S))~>DotVar1),DotVar0)=>`<T>`(`<k>`(inj{Block,KItem}(S)~>DotVar1),DotVar0) requires #token("true","Bool") ensures #token("true","Bool") [contentStartColumn(8) contentStartLine(55) org.kframework.attributes.Location(Location(55,8,55,32)) org.kframework.attributes.Source(Source(/Users/manasvi/Projects/k-in-k/imp/./imp.k)) org.kframework.definition.Production(syntax RuleContent ::= K)]
  axiom{} \and{SortTCell{}} (
    \top{SortTCell{}}(), \and{SortTCell{}} (
    \top{SortTCell{}}(), \rewrites{SortTCell{}}(Lbl'-LT-'T'-GT-'{}(Lbl'-LT-'k'-GT-'{}(kseq{}(inj{SortStmt{}, SortKItem{}}(Lblif'LParUndsRParUnds'else'UndsUnds'IMP-SYNTAX'UndsUnds'BExp'Unds'Block'Unds'Block{}(inj{SortBool{}, SortBExp{}}(\dv{SortBool{}}("false")),Var'Unds'21:SortBlock{},VarS:SortBlock{})),VarDotVar1:SortK{})),VarDotVar0:SortStateCell{}),Lbl'-LT-'T'-GT-'{}(Lbl'-LT-'k'-GT-'{}(kseq{}(inj{SortBlock{}, SortKItem{}}(VarS:SortBlock{}),VarDotVar1:SortK{})),VarDotVar0:SortStateCell{}))))
  [org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(55,8,55,32)"), contentStartColumn{}("8"), org'Stop'kframework'Stop'definition'Stop'Production{}("syntax RuleContent ::= K"), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/Users/manasvi/Projects/k-in-k/imp/./imp.k)"), contentStartLine{}("55")]

// rule `_=/=Bool__BOOL__Bool_Bool`(B1,B2)=>`notBool_`(`_==Bool__BOOL__Bool_Bool`(B1,B2)) requires #token("true","Bool") ensures #token("true","Bool") [contentStartColumn(8) contentStartLine(315) org.kframework.attributes.Location(Location(315,8,315,57)) org.kframework.attributes.Source(Source(/Users/manasvi/Projects/k-in-k/ext/k/k-distribution/target/release/k/include/builtin/domains.k)) org.kframework.definition.Production(syntax RuleContent ::= K)]
  axiom{R} \implies{R} (
    \top{R}(),
    \and{R} (
      \equals{SortBool{},R} (
        Lbl'UndsEqlsSlshEqls'Bool'UndsUnds'BOOL'UndsUnds'Bool'Unds'Bool{}(VarB1:SortBool{},VarB2:SortBool{}),
        LblnotBool'Unds'{}(Lbl'UndsEqlsEqls'Bool'UndsUnds'BOOL'UndsUnds'Bool'Unds'Bool{}(VarB1:SortBool{},VarB2:SortBool{}))),
      \top{R}()))
  [org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(315,8,315,57)"), contentStartColumn{}("8"), org'Stop'kframework'Stop'definition'Stop'Production{}("syntax RuleContent ::= K"), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/Users/manasvi/Projects/k-in-k/ext/k/k-distribution/target/release/k/include/builtin/domains.k)"), contentStartLine{}("315")]

// rule `_orElseBool__BOOL__Bool_Bool`(_4,#token("true","Bool"))=>#token("true","Bool") requires #token("true","Bool") ensures #token("true","Bool") [contentStartColumn(8) contentStartLine(306) org.kframework.attributes.Location(Location(306,8,306,33)) org.kframework.attributes.Source(Source(/Users/manasvi/Projects/k-in-k/ext/k/k-distribution/target/release/k/include/builtin/domains.k)) org.kframework.definition.Production(syntax RuleContent ::= K)]
  axiom{R} \implies{R} (
    \top{R}(),
    \and{R} (
      \equals{SortBool{},R} (
        Lbl'Unds'orElseBool'UndsUnds'BOOL'UndsUnds'Bool'Unds'Bool{}(Var'Unds'4:SortBool{},\dv{SortBool{}}("true")),
        \dv{SortBool{}}("true")),
      \top{R}()))
  [org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(306,8,306,33)"), contentStartColumn{}("8"), org'Stop'kframework'Stop'definition'Stop'Production{}("syntax RuleContent ::= K"), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/Users/manasvi/Projects/k-in-k/ext/k/k-distribution/target/release/k/include/builtin/domains.k)"), contentStartLine{}("306")]

// rule `_orElseBool__BOOL__Bool_Bool`(K,#token("false","Bool"))=>K requires #token("true","Bool") ensures #token("true","Bool") [contentStartColumn(8) contentStartLine(308) org.kframework.attributes.Location(Location(308,8,308,37)) org.kframework.attributes.Source(Source(/Users/manasvi/Projects/k-in-k/ext/k/k-distribution/target/release/k/include/builtin/domains.k)) org.kframework.definition.Production(syntax RuleContent ::= K)]
  axiom{R} \implies{R} (
    \top{R}(),
    \and{R} (
      \equals{SortBool{},R} (
        Lbl'Unds'orElseBool'UndsUnds'BOOL'UndsUnds'Bool'Unds'Bool{}(VarK:SortBool{},\dv{SortBool{}}("false")),
        VarK:SortBool{}),
      \top{R}()))
  [org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(308,8,308,37)"), contentStartColumn{}("8"), org'Stop'kframework'Stop'definition'Stop'Production{}("syntax RuleContent ::= K"), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/Users/manasvi/Projects/k-in-k/ext/k/k-distribution/target/release/k/include/builtin/domains.k)"), contentStartLine{}("308")]

// rule isK(K)=>#token("true","Bool") requires #token("true","Bool") ensures #token("true","Bool") []
  axiom{R} \implies{R} (
    \top{R}(),
    \and{R} (
      \equals{SortBool{},R} (
        LblisK{}(VarK:SortK{}),
        \dv{SortBool{}}("true")),
      \top{R}()))
  []

// rule `<T>`(`<k>`(inj{BExp,KItem}(`!__IMP-SYNTAX__BExp`(inj{Bool,BExp}(T)))~>DotVar1),DotVar0)=>`<T>`(`<k>`(inj{Bool,KItem}(`notBool_`(T))~>DotVar1),DotVar0) requires #token("true","Bool") ensures #token("true","Bool") [contentStartColumn(8) contentStartLine(45) org.kframework.attributes.Location(Location(45,8,45,24)) org.kframework.attributes.Source(Source(/Users/manasvi/Projects/k-in-k/imp/./imp.k)) org.kframework.definition.Production(syntax RuleContent ::= K)]
  axiom{} \and{SortTCell{}} (
    \top{SortTCell{}}(), \and{SortTCell{}} (
    \top{SortTCell{}}(), \rewrites{SortTCell{}}(Lbl'-LT-'T'-GT-'{}(Lbl'-LT-'k'-GT-'{}(kseq{}(inj{SortBExp{}, SortKItem{}}(Lbl'BangUndsUnds'IMP-SYNTAX'UndsUnds'BExp{}(inj{SortBool{}, SortBExp{}}(VarT:SortBool{}))),VarDotVar1:SortK{})),VarDotVar0:SortStateCell{}),Lbl'-LT-'T'-GT-'{}(Lbl'-LT-'k'-GT-'{}(kseq{}(inj{SortBool{}, SortKItem{}}(LblnotBool'Unds'{}(VarT:SortBool{})),VarDotVar1:SortK{})),VarDotVar0:SortStateCell{}))))
  [org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(45,8,45,24)"), contentStartColumn{}("8"), org'Stop'kframework'Stop'definition'Stop'Production{}("syntax RuleContent ::= K"), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/Users/manasvi/Projects/k-in-k/imp/./imp.k)"), contentStartLine{}("45")]

// rule `notBool_`(#token("true","Bool"))=>#token("false","Bool") requires #token("true","Bool") ensures #token("true","Bool") [contentStartColumn(8) contentStartLine(282) org.kframework.attributes.Location(Location(282,8,282,29)) org.kframework.attributes.Source(Source(/Users/manasvi/Projects/k-in-k/ext/k/k-distribution/target/release/k/include/builtin/domains.k)) org.kframework.definition.Production(syntax RuleContent ::= K)]
  axiom{R} \implies{R} (
    \top{R}(),
    \and{R} (
      \equals{SortBool{},R} (
        LblnotBool'Unds'{}(\dv{SortBool{}}("true")),
        \dv{SortBool{}}("false")),
      \top{R}()))
  [org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(282,8,282,29)"), contentStartColumn{}("8"), org'Stop'kframework'Stop'definition'Stop'Production{}("syntax RuleContent ::= K"), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/Users/manasvi/Projects/k-in-k/ext/k/k-distribution/target/release/k/include/builtin/domains.k)"), contentStartLine{}("282")]

// rule `_dividesInt__INT__Int_Int`(I1,I2)=>`_==Int__INT__Int_Int`(`_%Int__INT__Int_Int`(I2,I1),#token("0","Int")) requires #token("true","Bool") ensures #token("true","Bool") [contentStartColumn(8) contentStartLine(392) org.kframework.attributes.Location(Location(392,8,392,58)) org.kframework.attributes.Source(Source(/Users/manasvi/Projects/k-in-k/ext/k/k-distribution/target/release/k/include/builtin/domains.k)) org.kframework.definition.Production(syntax RuleContent ::= K)]
  axiom{R} \implies{R} (
    \top{R}(),
    \and{R} (
      \equals{SortBool{},R} (
        Lbl'Unds'dividesInt'UndsUnds'INT'UndsUnds'Int'Unds'Int{}(VarI1:SortInt{},VarI2:SortInt{}),
        Lbl'UndsEqlsEqls'Int'UndsUnds'INT'UndsUnds'Int'Unds'Int{}(Lbl'UndsPerc'Int'UndsUnds'INT'UndsUnds'Int'Unds'Int{}(VarI2:SortInt{},VarI1:SortInt{}),\dv{SortInt{}}("0"))),
      \top{R}()))
  [org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(392,8,392,58)"), contentStartColumn{}("8"), org'Stop'kframework'Stop'definition'Stop'Production{}("syntax RuleContent ::= K"), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/Users/manasvi/Projects/k-in-k/ext/k/k-distribution/target/release/k/include/builtin/domains.k)"), contentStartLine{}("392")]

// rule `minInt(_,_)_INT__Int_Int`(I1,I2)=>I1 requires `_<=Int__INT__Int_Int`(I1,I2) ensures #token("true","Bool") [contentStartColumn(8) contentStartLine(379) org.kframework.attributes.Location(Location(379,8,379,57)) org.kframework.attributes.Source(Source(/Users/manasvi/Projects/k-in-k/ext/k/k-distribution/target/release/k/include/builtin/domains.k)) org.kframework.definition.Production(syntax RuleContent ::= K "requires" K)]
  axiom{R} \implies{R} (
    \equals{SortBool{},R}(
        Lbl'Unds-LT-Eqls'Int'UndsUnds'INT'UndsUnds'Int'Unds'Int{}(VarI1:SortInt{},VarI2:SortInt{}),
        \dv{SortBool{}}("true")),
    \and{R} (
      \equals{SortInt{},R} (
        LblminInt'LParUndsCommUndsRParUnds'INT'UndsUnds'Int'Unds'Int{}(VarI1:SortInt{},VarI2:SortInt{}),
        VarI1:SortInt{}),
      \top{R}()))
  [org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(379,8,379,57)"), contentStartColumn{}("8"), org'Stop'kframework'Stop'definition'Stop'Production{}("syntax RuleContent ::= K \"requires\" K"), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/Users/manasvi/Projects/k-in-k/ext/k/k-distribution/target/release/k/include/builtin/domains.k)"), contentStartLine{}("379")]

// rule `_orElseBool__BOOL__Bool_Bool`(#token("true","Bool"),_9)=>#token("true","Bool") requires #token("true","Bool") ensures #token("true","Bool") [contentStartColumn(8) contentStartLine(305) org.kframework.attributes.Location(Location(305,8,305,33)) org.kframework.attributes.Source(Source(/Users/manasvi/Projects/k-in-k/ext/k/k-distribution/target/release/k/include/builtin/domains.k)) org.kframework.definition.Production(syntax RuleContent ::= K)]
  axiom{R} \implies{R} (
    \top{R}(),
    \and{R} (
      \equals{SortBool{},R} (
        Lbl'Unds'orElseBool'UndsUnds'BOOL'UndsUnds'Bool'Unds'Bool{}(\dv{SortBool{}}("true"),Var'Unds'9:SortBool{}),
        \dv{SortBool{}}("true")),
      \top{R}()))
  [org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(305,8,305,33)"), contentStartColumn{}("8"), org'Stop'kframework'Stop'definition'Stop'Production{}("syntax RuleContent ::= K"), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/Users/manasvi/Projects/k-in-k/ext/k/k-distribution/target/release/k/include/builtin/domains.k)"), contentStartLine{}("305")]

// rule `_xorBool__BOOL__Bool_Bool`(B,B)=>#token("false","Bool") requires #token("true","Bool") ensures #token("true","Bool") [contentStartColumn(8) contentStartLine(297) org.kframework.attributes.Location(Location(297,8,297,38)) org.kframework.attributes.Source(Source(/Users/manasvi/Projects/k-in-k/ext/k/k-distribution/target/release/k/include/builtin/domains.k)) org.kframework.definition.Production(syntax RuleContent ::= K)]
  axiom{R} \implies{R} (
    \top{R}(),
    \and{R} (
      \equals{SortBool{},R} (
        Lbl'Unds'xorBool'UndsUnds'BOOL'UndsUnds'Bool'Unds'Bool{}(VarB:SortBool{},VarB:SortBool{}),
        \dv{SortBool{}}("false")),
      \top{R}()))
  [org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(297,8,297,38)"), contentStartColumn{}("8"), org'Stop'kframework'Stop'definition'Stop'Production{}("syntax RuleContent ::= K"), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/Users/manasvi/Projects/k-in-k/ext/k/k-distribution/target/release/k/include/builtin/domains.k)"), contentStartLine{}("297")]

// rule isStmt(inj{Block,KItem}(Block))=>#token("true","Bool") requires #token("true","Bool") ensures #token("true","Bool") []
  axiom{R} \implies{R} (
    \top{R}(),
    \and{R} (
      \equals{SortBool{},R} (
        LblisStmt{}(kseq{}(inj{SortBlock{}, SortKItem{}}(VarBlock:SortBlock{}),dotk{}())),
        \dv{SortBool{}}("true")),
      \top{R}()))
  []

// rule isAExp(inj{Id,KItem}(Id))=>#token("true","Bool") requires #token("true","Bool") ensures #token("true","Bool") []
  axiom{R} \implies{R} (
    \top{R}(),
    \and{R} (
      \equals{SortBool{},R} (
        LblisAExp{}(kseq{}(inj{SortId{}, SortKItem{}}(VarId:SortId{}),dotk{}())),
        \dv{SortBool{}}("true")),
      \top{R}()))
  []

// rule `minInt(_,_)_INT__Int_Int`(I1,I2)=>I2 requires `_>=Int__INT__Int_Int`(I1,I2) ensures #token("true","Bool") [contentStartColumn(8) contentStartLine(380) org.kframework.attributes.Location(Location(380,8,380,57)) org.kframework.attributes.Source(Source(/Users/manasvi/Projects/k-in-k/ext/k/k-distribution/target/release/k/include/builtin/domains.k)) org.kframework.definition.Production(syntax RuleContent ::= K "requires" K)]
  axiom{R} \implies{R} (
    \equals{SortBool{},R}(
        Lbl'Unds-GT-Eqls'Int'UndsUnds'INT'UndsUnds'Int'Unds'Int{}(VarI1:SortInt{},VarI2:SortInt{}),
        \dv{SortBool{}}("true")),
    \and{R} (
      \equals{SortInt{},R} (
        LblminInt'LParUndsCommUndsRParUnds'INT'UndsUnds'Int'Unds'Int{}(VarI1:SortInt{},VarI2:SortInt{}),
        VarI2:SortInt{}),
      \top{R}()))
  [org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(380,8,380,57)"), contentStartColumn{}("8"), org'Stop'kframework'Stop'definition'Stop'Production{}("syntax RuleContent ::= K \"requires\" K"), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/Users/manasvi/Projects/k-in-k/ext/k/k-distribution/target/release/k/include/builtin/domains.k)"), contentStartLine{}("380")]

// rule isKItem(inj{BExp,KItem}(BExp))=>#token("true","Bool") requires #token("true","Bool") ensures #token("true","Bool") []
  axiom{R} \implies{R} (
    \top{R}(),
    \and{R} (
      \equals{SortBool{},R} (
        LblisKItem{}(kseq{}(inj{SortBExp{}, SortKItem{}}(VarBExp:SortBExp{}),dotk{}())),
        \dv{SortBool{}}("true")),
      \top{R}()))
  []

// rule isKItem(K)=>#token("false","Bool") requires #token("true","Bool") ensures #token("true","Bool") [owise()]
  axiom{R} \implies{R} (
    \and{R} (
      \not{R} (
        \or{R} (
          \ceil{SortBool{},R} (
            \exists{SortBool{}} (VarKCell:SortKCell{},
              \and{SortBool{}} (
                \top{SortBool{}}(),
                LblisKItem{}(kseq{}(inj{SortKCell{}, SortKItem{}}(VarKCell:SortKCell{}),dotk{}()))))),
        \or{R} (
          \ceil{SortBool{},R} (
            \exists{SortBool{}} (VarStateCellOpt:SortStateCellOpt{},
              \and{SortBool{}} (
                \top{SortBool{}}(),
                LblisKItem{}(kseq{}(inj{SortStateCellOpt{}, SortKItem{}}(VarStateCellOpt:SortStateCellOpt{}),dotk{}()))))),
        \or{R} (
          \ceil{SortBool{},R} (
            \exists{SortBool{}} (VarIOError:SortIOError{},
              \and{SortBool{}} (
                \top{SortBool{}}(),
                LblisKItem{}(kseq{}(inj{SortIOError{}, SortKItem{}}(VarIOError:SortIOError{}),dotk{}()))))),
        \or{R} (
          \ceil{SortBool{},R} (
            \exists{SortBool{}} (VarCell:SortCell{},
              \and{SortBool{}} (
                \top{SortBool{}}(),
                LblisKItem{}(kseq{}(inj{SortCell{}, SortKItem{}}(VarCell:SortCell{}),dotk{}()))))),
        \or{R} (
          \ceil{SortBool{},R} (
            \exists{SortBool{}} (VarInt:SortInt{},
              \and{SortBool{}} (
                \top{SortBool{}}(),
                LblisKItem{}(kseq{}(inj{SortInt{}, SortKItem{}}(VarInt:SortInt{}),dotk{}()))))),
        \or{R} (
          \ceil{SortBool{},R} (
            \exists{SortBool{}} (VarBlock:SortBlock{},
              \and{SortBool{}} (
                \top{SortBool{}}(),
                LblisKItem{}(kseq{}(inj{SortBlock{}, SortKItem{}}(VarBlock:SortBlock{}),dotk{}()))))),
        \or{R} (
          \ceil{SortBool{},R} (
            \exists{SortBool{}} (VarStream:SortStream{},
              \and{SortBool{}} (
                \top{SortBool{}}(),
                LblisKItem{}(kseq{}(inj{SortStream{}, SortKItem{}}(VarStream:SortStream{}),dotk{}()))))),
        \or{R} (
          \ceil{SortBool{},R} (
            \exists{SortBool{}} (VarAExp:SortAExp{},
              \and{SortBool{}} (
                \top{SortBool{}}(),
                LblisKItem{}(kseq{}(inj{SortAExp{}, SortKItem{}}(VarAExp:SortAExp{}),dotk{}()))))),
        \or{R} (
          \ceil{SortBool{},R} (
            \exists{SortBool{}} (VarId:SortId{},
              \and{SortBool{}} (
                \top{SortBool{}}(),
                LblisKItem{}(kseq{}(inj{SortId{}, SortKItem{}}(VarId:SortId{}),dotk{}()))))),
        \or{R} (
          \ceil{SortBool{},R} (
            \exists{SortBool{}} (VarMap:SortMap{},
              \and{SortBool{}} (
                \top{SortBool{}}(),
                LblisKItem{}(kseq{}(inj{SortMap{}, SortKItem{}}(VarMap:SortMap{}),dotk{}()))))),
        \or{R} (
          \ceil{SortBool{},R} (
            \exists{SortBool{}} (VarList:SortList{},
              \and{SortBool{}} (
                \top{SortBool{}}(),
                LblisKItem{}(kseq{}(inj{SortList{}, SortKItem{}}(VarList:SortList{}),dotk{}()))))),
        \or{R} (
          \ceil{SortBool{},R} (
            \exists{SortBool{}} (VarStmt:SortStmt{},
              \and{SortBool{}} (
                \top{SortBool{}}(),
                LblisKItem{}(kseq{}(inj{SortStmt{}, SortKItem{}}(VarStmt:SortStmt{}),dotk{}()))))),
        \or{R} (
          \ceil{SortBool{},R} (
            \exists{SortBool{}} (VarTCell:SortTCell{},
              \and{SortBool{}} (
                \top{SortBool{}}(),
                LblisKItem{}(kseq{}(inj{SortTCell{}, SortKItem{}}(VarTCell:SortTCell{}),dotk{}()))))),
        \or{R} (
          \ceil{SortBool{},R} (
            \exists{SortBool{}} (VarTCellFragment:SortTCellFragment{},
              \and{SortBool{}} (
                \top{SortBool{}}(),
                LblisKItem{}(kseq{}(inj{SortTCellFragment{}, SortKItem{}}(VarTCellFragment:SortTCellFragment{}),dotk{}()))))),
        \or{R} (
          \ceil{SortBool{},R} (
            \exists{SortBool{}} (VarKResult:SortKResult{},
              \and{SortBool{}} (
                \top{SortBool{}}(),
                LblisKItem{}(kseq{}(inj{SortKResult{}, SortKItem{}}(VarKResult:SortKResult{}),dotk{}()))))),
        \or{R} (
          \ceil{SortBool{},R} (
            \exists{SortBool{}} (VarBExp:SortBExp{},
              \and{SortBool{}} (
                \top{SortBool{}}(),
                LblisKItem{}(kseq{}(inj{SortBExp{}, SortKItem{}}(VarBExp:SortBExp{}),dotk{}()))))),
        \or{R} (
          \ceil{SortBool{},R} (
            \exists{SortBool{}} (VarStateCell:SortStateCell{},
              \and{SortBool{}} (
                \top{SortBool{}}(),
                LblisKItem{}(kseq{}(inj{SortStateCell{}, SortKItem{}}(VarStateCell:SortStateCell{}),dotk{}()))))),
        \or{R} (
          \ceil{SortBool{},R} (
            \exists{SortBool{}} (VarSet:SortSet{},
              \and{SortBool{}} (
                \top{SortBool{}}(),
                LblisKItem{}(kseq{}(inj{SortSet{}, SortKItem{}}(VarSet:SortSet{}),dotk{}()))))),
        \or{R} (
          \ceil{SortBool{},R} (
            \exists{SortBool{}} (VarPgm:SortPgm{},
              \and{SortBool{}} (
                \top{SortBool{}}(),
                LblisKItem{}(kseq{}(inj{SortPgm{}, SortKItem{}}(VarPgm:SortPgm{}),dotk{}()))))),
        \or{R} (
          \ceil{SortBool{},R} (
            \exists{SortBool{}} (VarIds:SortIds{},
              \and{SortBool{}} (
                \top{SortBool{}}(),
                LblisKItem{}(kseq{}(inj{SortIds{}, SortKItem{}}(VarIds:SortIds{}),dotk{}()))))),
        \or{R} (
          \ceil{SortBool{},R} (
            \exists{SortBool{}} (VarKCellOpt:SortKCellOpt{},
              \and{SortBool{}} (
                \top{SortBool{}}(),
                LblisKItem{}(kseq{}(inj{SortKCellOpt{}, SortKItem{}}(VarKCellOpt:SortKCellOpt{}),dotk{}()))))),
        \or{R} (
          \ceil{SortBool{},R} (
            \exists{SortBool{}} (VarBool:SortBool{},
              \and{SortBool{}} (
                \top{SortBool{}}(),
                LblisKItem{}(kseq{}(inj{SortBool{}, SortKItem{}}(VarBool:SortBool{}),dotk{}()))))),
        \or{R} (
          \ceil{SortBool{},R} (
            \exists{SortBool{}} (VarString:SortString{},
              \and{SortBool{}} (
                \top{SortBool{}}(),
                LblisKItem{}(kseq{}(inj{SortString{}, SortKItem{}}(VarString:SortString{}),dotk{}()))))),
        \or{R} (
          \ceil{SortBool{},R} (
            \exists{SortBool{}} (VarKItem:SortKItem{},
              \and{SortBool{}} (
                \top{SortBool{}}(),
                LblisKItem{}(kseq{}(inj{SortKItem{}, SortKItem{}}(VarKItem:SortKItem{}),dotk{}()))))),
        \or{R} (
          \ceil{SortBool{},R} (
            \exists{SortBool{}} (VarFloat:SortFloat{},
              \and{SortBool{}} (
                \top{SortBool{}}(),
                LblisKItem{}(kseq{}(inj{SortFloat{}, SortKItem{}}(VarFloat:SortFloat{}),dotk{}()))))),
        \bottom{R}())))))))))))))))))))))))))),
      \top{R}()),
    \and{R} (
      \equals{SortBool{},R} (
        LblisKItem{}(VarK:SortK{}),
        \dv{SortBool{}}("false")),
      \top{R}()))
  [owise{}()]

// rule isAExp(inj{Int,KItem}(Int))=>#token("true","Bool") requires #token("true","Bool") ensures #token("true","Bool") []
  axiom{R} \implies{R} (
    \top{R}(),
    \and{R} (
      \equals{SortBool{},R} (
        LblisAExp{}(kseq{}(inj{SortInt{}, SortKItem{}}(VarInt:SortInt{}),dotk{}())),
        \dv{SortBool{}}("true")),
      \top{R}()))
  []

// rule isKResult(K)=>#token("false","Bool") requires #token("true","Bool") ensures #token("true","Bool") [owise()]
  axiom{R} \implies{R} (
    \and{R} (
      \not{R} (
        \or{R} (
          \ceil{SortBool{},R} (
            \exists{SortBool{}} (VarBool:SortBool{},
              \and{SortBool{}} (
                \top{SortBool{}}(),
                LblisKResult{}(kseq{}(inj{SortBool{}, SortKItem{}}(VarBool:SortBool{}),dotk{}()))))),
        \or{R} (
          \ceil{SortBool{},R} (
            \exists{SortBool{}} (VarInt:SortInt{},
              \and{SortBool{}} (
                \top{SortBool{}}(),
                LblisKResult{}(kseq{}(inj{SortInt{}, SortKItem{}}(VarInt:SortInt{}),dotk{}()))))),
        \or{R} (
          \ceil{SortBool{},R} (
            \exists{SortBool{}} (VarKResult:SortKResult{},
              \and{SortBool{}} (
                \top{SortBool{}}(),
                LblisKResult{}(kseq{}(inj{SortKResult{}, SortKItem{}}(VarKResult:SortKResult{}),dotk{}()))))),
        \bottom{R}())))),
      \top{R}()),
    \and{R} (
      \equals{SortBool{},R} (
        LblisKResult{}(VarK:SortK{}),
        \dv{SortBool{}}("false")),
      \top{R}()))
  [owise{}()]

// rule `#if_#then_#else_#fi_K-EQUAL__Bool_K_K`(C,B1,_10)=>B1 requires C ensures #token("true","Bool") [contentStartColumn(8) contentStartLine(733) org.kframework.attributes.Location(Location(733,8,733,56)) org.kframework.attributes.Source(Source(/Users/manasvi/Projects/k-in-k/ext/k/k-distribution/target/release/k/include/builtin/domains.k)) org.kframework.definition.Production(syntax RuleContent ::= K "requires" K)]
  axiom{R} \implies{R} (
    \equals{SortBool{},R}(
        VarC:SortBool{},
        \dv{SortBool{}}("true")),
    \and{R} (
      \equals{SortK{},R} (
        Lbl'Hash'if'UndsHash'then'UndsHash'else'UndsHash'fi'Unds'K-EQUAL'UndsUnds'Bool'Unds'K'Unds'K{SortK{}}(VarC:SortBool{},VarB1:SortK{},Var'Unds'10:SortK{}),
        VarB1:SortK{}),
      \top{R}()))
  [org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(733,8,733,56)"), contentStartColumn{}("8"), org'Stop'kframework'Stop'definition'Stop'Production{}("syntax RuleContent ::= K \"requires\" K"), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/Users/manasvi/Projects/k-in-k/ext/k/k-distribution/target/release/k/include/builtin/domains.k)"), contentStartLine{}("733")]

// rule `rfindChar(_,_,_)_STRING__String_String_Int`(_17,#token("\"\"","String"),_18)=>#token("-1","Int") requires #token("true","Bool") ensures #token("true","Bool") [contentStartColumn(8) contentStartLine(539) org.kframework.attributes.Location(Location(539,8,539,33)) org.kframework.attributes.Source(Source(/Users/manasvi/Projects/k-in-k/ext/k/k-distribution/target/release/k/include/builtin/domains.k)) org.kframework.definition.Production(syntax RuleContent ::= K)]
  axiom{R} \implies{R} (
    \top{R}(),
    \and{R} (
      \equals{SortInt{},R} (
        LblrfindChar'LParUndsCommUndsCommUndsRParUnds'STRING'UndsUnds'String'Unds'String'Unds'Int{}(Var'Unds'17:SortString{},\dv{SortString{}}("\"\""),Var'Unds'18:SortInt{}),
        \dv{SortInt{}}("-1")),
      \top{R}()))
  [org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(539,8,539,33)"), contentStartColumn{}("8"), org'Stop'kframework'Stop'definition'Stop'Production{}("syntax RuleContent ::= K"), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/Users/manasvi/Projects/k-in-k/ext/k/k-distribution/target/release/k/include/builtin/domains.k)"), contentStartLine{}("539")]

// rule isKItem(inj{TCell,KItem}(TCell))=>#token("true","Bool") requires #token("true","Bool") ensures #token("true","Bool") []
  axiom{R} \implies{R} (
    \top{R}(),
    \and{R} (
      \equals{SortBool{},R} (
        LblisKItem{}(kseq{}(inj{SortTCell{}, SortKItem{}}(VarTCell:SortTCell{}),dotk{}())),
        \dv{SortBool{}}("true")),
      \top{R}()))
  []

// rule isKConfigVar(inj{KConfigVar,KItem}(KConfigVar))=>#token("true","Bool") requires #token("true","Bool") ensures #token("true","Bool") []
  axiom{R} \implies{R} (
    \top{R}(),
    \and{R} (
      \equals{SortBool{},R} (
        LblisKConfigVar{}(kseq{}(inj{SortKConfigVar{}, SortKItem{}}(VarKConfigVar:SortKConfigVar{}),dotk{}())),
        \dv{SortBool{}}("true")),
      \top{R}()))
  []

// rule isInt(inj{Int,KItem}(Int))=>#token("true","Bool") requires #token("true","Bool") ensures #token("true","Bool") []
  axiom{R} \implies{R} (
    \top{R}(),
    \and{R} (
      \equals{SortBool{},R} (
        LblisInt{}(kseq{}(inj{SortInt{}, SortKItem{}}(VarInt:SortInt{}),dotk{}())),
        \dv{SortBool{}}("true")),
      \top{R}()))
  []

// rule isKItem(inj{Stream,KItem}(Stream))=>#token("true","Bool") requires #token("true","Bool") ensures #token("true","Bool") []
  axiom{R} \implies{R} (
    \top{R}(),
    \and{R} (
      \equals{SortBool{},R} (
        LblisKItem{}(kseq{}(inj{SortStream{}, SortKItem{}}(VarStream:SortStream{}),dotk{}())),
        \dv{SortBool{}}("true")),
      \top{R}()))
  []

// rule `<T>`(`<k>`(inj{AExp,KItem}(`_+__IMP-SYNTAX__AExp_AExp`(HOLE,K1))~>DotVar1),DotVar0)=>`<T>`(`<k>`(inj{AExp,KItem}(HOLE)~>`#freezer_+__IMP-SYNTAX__AExp_AExp1_`(inj{AExp,KItem}(K1))~>DotVar1),DotVar0) requires #token("true","Bool") ensures #token("true","Bool") [heat() left() org.kframework.attributes.Location(Location(8,20,8,77)) org.kframework.attributes.Source(Source(/Users/manasvi/Projects/k-in-k/imp/./imp.k)) productionID(1940445711) strict() symbol(addAExp)]
  axiom{} \and{SortTCell{}} (
    \top{SortTCell{}}(), \and{SortTCell{}} (
    \top{SortTCell{}}(), \rewrites{SortTCell{}}(Lbl'-LT-'T'-GT-'{}(Lbl'-LT-'k'-GT-'{}(kseq{}(inj{SortAExp{}, SortKItem{}}(Lbl'UndsPlusUndsUnds'IMP-SYNTAX'UndsUnds'AExp'Unds'AExp{}(VarHOLE:SortAExp{},VarK1:SortAExp{})),VarDotVar1:SortK{})),VarDotVar0:SortStateCell{}),Lbl'-LT-'T'-GT-'{}(Lbl'-LT-'k'-GT-'{}(kseq{}(inj{SortAExp{}, SortKItem{}}(VarHOLE:SortAExp{}),kseq{}(Lbl'Hash'freezer'UndsPlusUndsUnds'IMP-SYNTAX'UndsUnds'AExp'Unds'AExp1'Unds'{}(kseq{}(inj{SortAExp{}, SortKItem{}}(VarK1:SortAExp{}),dotk{}())),VarDotVar1:SortK{}))),VarDotVar0:SortStateCell{}))))
  [org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(8,20,8,77)"), heat{}(), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/Users/manasvi/Projects/k-in-k/imp/./imp.k)"), left{}(), productionID{}("1940445711"), strict{}(""), symbol'Kywd'{}("addAExp")]

// rule `_orBool__BOOL__Bool_Bool`(#token("false","Bool"),B)=>B requires #token("true","Bool") ensures #token("true","Bool") [contentStartColumn(8) contentStartLine(302) org.kframework.attributes.Location(Location(302,8,302,32)) org.kframework.attributes.Source(Source(/Users/manasvi/Projects/k-in-k/ext/k/k-distribution/target/release/k/include/builtin/domains.k)) org.kframework.definition.Production(syntax RuleContent ::= K)]
  axiom{R} \implies{R} (
    \top{R}(),
    \and{R} (
      \equals{SortBool{},R} (
        Lbl'Unds'orBool'UndsUnds'BOOL'UndsUnds'Bool'Unds'Bool{}(\dv{SortBool{}}("false"),VarB:SortBool{}),
        VarB:SortBool{}),
      \top{R}()))
  [org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(302,8,302,32)"), contentStartColumn{}("8"), org'Stop'kframework'Stop'definition'Stop'Production{}("syntax RuleContent ::= K"), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/Users/manasvi/Projects/k-in-k/ext/k/k-distribution/target/release/k/include/builtin/domains.k)"), contentStartLine{}("302")]

// rule `_andBool_`(#token("true","Bool"),B)=>B requires #token("true","Bool") ensures #token("true","Bool") [contentStartColumn(8) contentStartLine(285) org.kframework.attributes.Location(Location(285,8,285,37)) org.kframework.attributes.Source(Source(/Users/manasvi/Projects/k-in-k/ext/k/k-distribution/target/release/k/include/builtin/domains.k)) org.kframework.definition.Production(syntax RuleContent ::= K)]
  axiom{R} \implies{R} (
    \top{R}(),
    \and{R} (
      \equals{SortBool{},R} (
        Lbl'Unds'andBool'Unds'{}(\dv{SortBool{}}("true"),VarB:SortBool{}),
        VarB:SortBool{}),
      \top{R}()))
  [org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(285,8,285,37)"), contentStartColumn{}("8"), org'Stop'kframework'Stop'definition'Stop'Production{}("syntax RuleContent ::= K"), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/Users/manasvi/Projects/k-in-k/ext/k/k-distribution/target/release/k/include/builtin/domains.k)"), contentStartLine{}("285")]

// rule isKItem(inj{Cell,KItem}(Cell))=>#token("true","Bool") requires #token("true","Bool") ensures #token("true","Bool") []
  axiom{R} \implies{R} (
    \top{R}(),
    \and{R} (
      \equals{SortBool{},R} (
        LblisKItem{}(kseq{}(inj{SortCell{}, SortKItem{}}(VarCell:SortCell{}),dotk{}())),
        \dv{SortBool{}}("true")),
      \top{R}()))
  []

// rule `<T>`(`<k>`(inj{BExp,KItem}(`_<=__IMP-SYNTAX__AExp_AExp`(HOLE,K1))~>DotVar1),DotVar0)=>`<T>`(`<k>`(inj{AExp,KItem}(HOLE)~>`#freezer_<=__IMP-SYNTAX__AExp_AExp1_`(inj{AExp,KItem}(K1))~>DotVar1),DotVar0) requires #token("true","Bool") ensures #token("true","Bool") [heat() latex({#1}\leq{#2}) org.kframework.attributes.Location(Location(11,20,11,94)) org.kframework.attributes.Source(Source(/Users/manasvi/Projects/k-in-k/imp/./imp.k)) productionID(1810923540) seqstrict() symbol(ltAExp)]
  axiom{} \and{SortTCell{}} (
    \top{SortTCell{}}(), \and{SortTCell{}} (
    \top{SortTCell{}}(), \rewrites{SortTCell{}}(Lbl'-LT-'T'-GT-'{}(Lbl'-LT-'k'-GT-'{}(kseq{}(inj{SortBExp{}, SortKItem{}}(Lbl'Unds-LT-EqlsUndsUnds'IMP-SYNTAX'UndsUnds'AExp'Unds'AExp{}(VarHOLE:SortAExp{},VarK1:SortAExp{})),VarDotVar1:SortK{})),VarDotVar0:SortStateCell{}),Lbl'-LT-'T'-GT-'{}(Lbl'-LT-'k'-GT-'{}(kseq{}(inj{SortAExp{}, SortKItem{}}(VarHOLE:SortAExp{}),kseq{}(Lbl'Hash'freezer'Unds-LT-EqlsUndsUnds'IMP-SYNTAX'UndsUnds'AExp'Unds'AExp1'Unds'{}(kseq{}(inj{SortAExp{}, SortKItem{}}(VarK1:SortAExp{}),dotk{}())),VarDotVar1:SortK{}))),VarDotVar0:SortStateCell{}))))
  [org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(11,20,11,94)"), seqstrict{}(), heat{}(), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/Users/manasvi/Projects/k-in-k/imp/./imp.k)"), productionID{}("1810923540"), latex{}("{#1}\\leq{#2}"), symbol'Kywd'{}("ltAExp")]

// rule isStream(K)=>#token("false","Bool") requires #token("true","Bool") ensures #token("true","Bool") [owise()]
  axiom{R} \implies{R} (
    \and{R} (
      \not{R} (
        \or{R} (
          \ceil{SortBool{},R} (
            \exists{SortBool{}} (VarStream:SortStream{},
              \and{SortBool{}} (
                \top{SortBool{}}(),
                LblisStream{}(kseq{}(inj{SortStream{}, SortKItem{}}(VarStream:SortStream{}),dotk{}()))))),
        \bottom{R}())),
      \top{R}()),
    \and{R} (
      \equals{SortBool{},R} (
        LblisStream{}(VarK:SortK{}),
        \dv{SortBool{}}("false")),
      \top{R}()))
  [owise{}()]

// rule `replaceFirst(_,_,_)_STRING__String_String_String`(Source,ToReplace,Replacement)=>`_+String__STRING__String_String`(`_+String__STRING__String_String`(`substrString(_,_,_)_STRING__String_Int_Int`(Source,#token("0","Int"),`findString(_,_,_)_STRING__String_String_Int`(Source,ToReplace,#token("0","Int"))),Replacement),`substrString(_,_,_)_STRING__String_Int_Int`(Source,`_+Int__INT__Int_Int`(`findString(_,_,_)_STRING__String_String_Int`(Source,ToReplace,#token("0","Int")),`lengthString(_)_STRING__String`(ToReplace)),`lengthString(_)_STRING__String`(Source))) requires `_>=Int__INT__Int_Int`(`findString(_,_,_)_STRING__String_String_Int`(Source,ToReplace,#token("0","Int")),#token("0","Int")) ensures #token("true","Bool") [contentStartColumn(8) contentStartLine(546) org.kframework.attributes.Location(Location(546,8,548,66)) org.kframework.attributes.Source(Source(/Users/manasvi/Projects/k-in-k/ext/k/k-distribution/target/release/k/include/builtin/domains.k)) org.kframework.definition.Production(syntax RuleContent ::= K "requires" K)]
  axiom{R} \implies{R} (
    \equals{SortBool{},R}(
        Lbl'Unds-GT-Eqls'Int'UndsUnds'INT'UndsUnds'Int'Unds'Int{}(LblfindString'LParUndsCommUndsCommUndsRParUnds'STRING'UndsUnds'String'Unds'String'Unds'Int{}(VarSource:SortString{},VarToReplace:SortString{},\dv{SortInt{}}("0")),\dv{SortInt{}}("0")),
        \dv{SortBool{}}("true")),
    \and{R} (
      \equals{SortString{},R} (
        LblreplaceFirst'LParUndsCommUndsCommUndsRParUnds'STRING'UndsUnds'String'Unds'String'Unds'String{}(VarSource:SortString{},VarToReplace:SortString{},VarReplacement:SortString{}),
        Lbl'UndsPlus'String'UndsUnds'STRING'UndsUnds'String'Unds'String{}(Lbl'UndsPlus'String'UndsUnds'STRING'UndsUnds'String'Unds'String{}(LblsubstrString'LParUndsCommUndsCommUndsRParUnds'STRING'UndsUnds'String'Unds'Int'Unds'Int{}(VarSource:SortString{},\dv{SortInt{}}("0"),LblfindString'LParUndsCommUndsCommUndsRParUnds'STRING'UndsUnds'String'Unds'String'Unds'Int{}(VarSource:SortString{},VarToReplace:SortString{},\dv{SortInt{}}("0"))),VarReplacement:SortString{}),LblsubstrString'LParUndsCommUndsCommUndsRParUnds'STRING'UndsUnds'String'Unds'Int'Unds'Int{}(VarSource:SortString{},Lbl'UndsPlus'Int'UndsUnds'INT'UndsUnds'Int'Unds'Int{}(LblfindString'LParUndsCommUndsCommUndsRParUnds'STRING'UndsUnds'String'Unds'String'Unds'Int{}(VarSource:SortString{},VarToReplace:SortString{},\dv{SortInt{}}("0")),LbllengthString'LParUndsRParUnds'STRING'UndsUnds'String{}(VarToReplace:SortString{})),LbllengthString'LParUndsRParUnds'STRING'UndsUnds'String{}(VarSource:SortString{})))),
      \top{R}()))
  [org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(546,8,548,66)"), contentStartColumn{}("8"), org'Stop'kframework'Stop'definition'Stop'Production{}("syntax RuleContent ::= K \"requires\" K"), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/Users/manasvi/Projects/k-in-k/ext/k/k-distribution/target/release/k/include/builtin/domains.k)"), contentStartLine{}("546")]

// rule isKCell(K)=>#token("false","Bool") requires #token("true","Bool") ensures #token("true","Bool") [owise()]
  axiom{R} \implies{R} (
    \and{R} (
      \not{R} (
        \or{R} (
          \ceil{SortBool{},R} (
            \exists{SortBool{}} (VarKCell:SortKCell{},
              \and{SortBool{}} (
                \top{SortBool{}}(),
                LblisKCell{}(kseq{}(inj{SortKCell{}, SortKItem{}}(VarKCell:SortKCell{}),dotk{}()))))),
        \bottom{R}())),
      \top{R}()),
    \and{R} (
      \equals{SortBool{},R} (
        LblisKCell{}(VarK:SortK{}),
        \dv{SortBool{}}("false")),
      \top{R}()))
  [owise{}()]

// rule isString(K)=>#token("false","Bool") requires #token("true","Bool") ensures #token("true","Bool") [owise()]
  axiom{R} \implies{R} (
    \and{R} (
      \not{R} (
        \or{R} (
          \ceil{SortBool{},R} (
            \exists{SortBool{}} (VarString:SortString{},
              \and{SortBool{}} (
                \top{SortBool{}}(),
                LblisString{}(kseq{}(inj{SortString{}, SortKItem{}}(VarString:SortString{}),dotk{}()))))),
        \bottom{R}())),
      \top{R}()),
    \and{R} (
      \equals{SortBool{},R} (
        LblisString{}(VarK:SortK{}),
        \dv{SortBool{}}("false")),
      \top{R}()))
  [owise{}()]

// rule `findChar(_,_,_)_STRING__String_String_Int`(S1,S2,I)=>`#if_#then_#else_#fi_K-EQUAL__Bool_K_K`(`_==Int__INT__Int_Int`(`findString(_,_,_)_STRING__String_String_Int`(S1,`substrString(_,_,_)_STRING__String_Int_Int`(S2,#token("0","Int"),#token("1","Int")),I),#token("-1","Int")),`findChar(_,_,_)_STRING__String_String_Int`(S1,`substrString(_,_,_)_STRING__String_Int_Int`(S2,#token("1","Int"),`lengthString(_)_STRING__String`(S2)),I),`#if_#then_#else_#fi_K-EQUAL__Bool_K_K`(`_==Int__INT__Int_Int`(`findChar(_,_,_)_STRING__String_String_Int`(S1,`substrString(_,_,_)_STRING__String_Int_Int`(S2,#token("1","Int"),`lengthString(_)_STRING__String`(S2)),I),#token("-1","Int")),`findString(_,_,_)_STRING__String_String_Int`(S1,`substrString(_,_,_)_STRING__String_Int_Int`(S2,#token("0","Int"),#token("1","Int")),I),`minInt(_,_)_INT__Int_Int`(`findString(_,_,_)_STRING__String_String_Int`(S1,`substrString(_,_,_)_STRING__String_Int_Int`(S2,#token("0","Int"),#token("1","Int")),I),`findChar(_,_,_)_STRING__String_String_Int`(S1,`substrString(_,_,_)_STRING__String_Int_Int`(S2,#token("1","Int"),`lengthString(_)_STRING__String`(S2)),I)))) requires `_=/=String__STRING__String_String`(S2,#token("\"\"","String")) ensures #token("true","Bool") [contentStartColumn(8) contentStartLine(536) org.kframework.attributes.Location(Location(536,8,536,431)) org.kframework.attributes.Source(Source(/Users/manasvi/Projects/k-in-k/ext/k/k-distribution/target/release/k/include/builtin/domains.k)) org.kframework.definition.Production(syntax RuleContent ::= K "requires" K)]
  axiom{R} \implies{R} (
    \equals{SortBool{},R}(
        Lbl'UndsEqlsSlshEqls'String'UndsUnds'STRING'UndsUnds'String'Unds'String{}(VarS2:SortString{},\dv{SortString{}}("\"\"")),
        \dv{SortBool{}}("true")),
    \and{R} (
      \equals{SortInt{},R} (
        LblfindChar'LParUndsCommUndsCommUndsRParUnds'STRING'UndsUnds'String'Unds'String'Unds'Int{}(VarS1:SortString{},VarS2:SortString{},VarI:SortInt{}),
        Lbl'Hash'if'UndsHash'then'UndsHash'else'UndsHash'fi'Unds'K-EQUAL'UndsUnds'Bool'Unds'K'Unds'K{SortInt{}}(Lbl'UndsEqlsEqls'Int'UndsUnds'INT'UndsUnds'Int'Unds'Int{}(LblfindString'LParUndsCommUndsCommUndsRParUnds'STRING'UndsUnds'String'Unds'String'Unds'Int{}(VarS1:SortString{},LblsubstrString'LParUndsCommUndsCommUndsRParUnds'STRING'UndsUnds'String'Unds'Int'Unds'Int{}(VarS2:SortString{},\dv{SortInt{}}("0"),\dv{SortInt{}}("1")),VarI:SortInt{}),\dv{SortInt{}}("-1")),LblfindChar'LParUndsCommUndsCommUndsRParUnds'STRING'UndsUnds'String'Unds'String'Unds'Int{}(VarS1:SortString{},LblsubstrString'LParUndsCommUndsCommUndsRParUnds'STRING'UndsUnds'String'Unds'Int'Unds'Int{}(VarS2:SortString{},\dv{SortInt{}}("1"),LbllengthString'LParUndsRParUnds'STRING'UndsUnds'String{}(VarS2:SortString{})),VarI:SortInt{}),Lbl'Hash'if'UndsHash'then'UndsHash'else'UndsHash'fi'Unds'K-EQUAL'UndsUnds'Bool'Unds'K'Unds'K{SortInt{}}(Lbl'UndsEqlsEqls'Int'UndsUnds'INT'UndsUnds'Int'Unds'Int{}(LblfindChar'LParUndsCommUndsCommUndsRParUnds'STRING'UndsUnds'String'Unds'String'Unds'Int{}(VarS1:SortString{},LblsubstrString'LParUndsCommUndsCommUndsRParUnds'STRING'UndsUnds'String'Unds'Int'Unds'Int{}(VarS2:SortString{},\dv{SortInt{}}("1"),LbllengthString'LParUndsRParUnds'STRING'UndsUnds'String{}(VarS2:SortString{})),VarI:SortInt{}),\dv{SortInt{}}("-1")),LblfindString'LParUndsCommUndsCommUndsRParUnds'STRING'UndsUnds'String'Unds'String'Unds'Int{}(VarS1:SortString{},LblsubstrString'LParUndsCommUndsCommUndsRParUnds'STRING'UndsUnds'String'Unds'Int'Unds'Int{}(VarS2:SortString{},\dv{SortInt{}}("0"),\dv{SortInt{}}("1")),VarI:SortInt{}),LblminInt'LParUndsCommUndsRParUnds'INT'UndsUnds'Int'Unds'Int{}(LblfindString'LParUndsCommUndsCommUndsRParUnds'STRING'UndsUnds'String'Unds'String'Unds'Int{}(VarS1:SortString{},LblsubstrString'LParUndsCommUndsCommUndsRParUnds'STRING'UndsUnds'String'Unds'Int'Unds'Int{}(VarS2:SortString{},\dv{SortInt{}}("0"),\dv{SortInt{}}("1")),VarI:SortInt{}),LblfindChar'LParUndsCommUndsCommUndsRParUnds'STRING'UndsUnds'String'Unds'String'Unds'Int{}(VarS1:SortString{},LblsubstrString'LParUndsCommUndsCommUndsRParUnds'STRING'UndsUnds'String'Unds'Int'Unds'Int{}(VarS2:SortString{},\dv{SortInt{}}("1"),LbllengthString'LParUndsRParUnds'STRING'UndsUnds'String{}(VarS2:SortString{})),VarI:SortInt{}))))),
      \top{R}()))
  [org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(536,8,536,431)"), contentStartColumn{}("8"), org'Stop'kframework'Stop'definition'Stop'Production{}("syntax RuleContent ::= K \"requires\" K"), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/Users/manasvi/Projects/k-in-k/ext/k/k-distribution/target/release/k/include/builtin/domains.k)"), contentStartLine{}("536")]

// rule `<T>`(`<k>`(inj{Block,KItem}(`{_}_IMP-SYNTAX__Stmt`(S))~>DotVar1),DotVar0)=>`<T>`(`<k>`(inj{Stmt,KItem}(S)~>DotVar1),DotVar0) requires #token("true","Bool") ensures #token("true","Bool") [contentStartColumn(8) contentStartLine(50) org.kframework.attributes.Location(Location(50,8,50,16)) org.kframework.attributes.Source(Source(/Users/manasvi/Projects/k-in-k/imp/./imp.k)) org.kframework.definition.Production(syntax RuleContent ::= K) structural()]
  axiom{} \and{SortTCell{}} (
    \top{SortTCell{}}(), \and{SortTCell{}} (
    \top{SortTCell{}}(), \rewrites{SortTCell{}}(Lbl'-LT-'T'-GT-'{}(Lbl'-LT-'k'-GT-'{}(kseq{}(inj{SortBlock{}, SortKItem{}}(Lbl'LBraUndsRBraUnds'IMP-SYNTAX'UndsUnds'Stmt{}(VarS:SortStmt{})),VarDotVar1:SortK{})),VarDotVar0:SortStateCell{}),Lbl'-LT-'T'-GT-'{}(Lbl'-LT-'k'-GT-'{}(kseq{}(inj{SortStmt{}, SortKItem{}}(VarS:SortStmt{}),VarDotVar1:SortK{})),VarDotVar0:SortStateCell{}))))
  [org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(50,8,50,16)"), contentStartColumn{}("8"), org'Stop'kframework'Stop'definition'Stop'Production{}("syntax RuleContent ::= K"), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/Users/manasvi/Projects/k-in-k/imp/./imp.k)"), contentStartLine{}("50"), structural{}()]

// rule isStateCellOpt(inj{StateCellOpt,KItem}(StateCellOpt))=>#token("true","Bool") requires #token("true","Bool") ensures #token("true","Bool") []
  axiom{R} \implies{R} (
    \top{R}(),
    \and{R} (
      \equals{SortBool{},R} (
        LblisStateCellOpt{}(kseq{}(inj{SortStateCellOpt{}, SortKItem{}}(VarStateCellOpt:SortStateCellOpt{}),dotk{}())),
        \dv{SortBool{}}("true")),
      \top{R}()))
  []

// rule isSet(K)=>#token("false","Bool") requires #token("true","Bool") ensures #token("true","Bool") [owise()]
  axiom{R} \implies{R} (
    \and{R} (
      \not{R} (
        \or{R} (
          \ceil{SortBool{},R} (
            \exists{SortBool{}} (VarSet:SortSet{},
              \and{SortBool{}} (
                \top{SortBool{}}(),
                LblisSet{}(kseq{}(inj{SortSet{}, SortKItem{}}(VarSet:SortSet{}),dotk{}()))))),
        \bottom{R}())),
      \top{R}()),
    \and{R} (
      \equals{SortBool{},R} (
        LblisSet{}(VarK:SortK{}),
        \dv{SortBool{}}("false")),
      \top{R}()))
  [owise{}()]

// rule isKCellOpt(inj{KCell,KItem}(KCell))=>#token("true","Bool") requires #token("true","Bool") ensures #token("true","Bool") []
  axiom{R} \implies{R} (
    \top{R}(),
    \and{R} (
      \equals{SortBool{},R} (
        LblisKCellOpt{}(kseq{}(inj{SortKCell{}, SortKItem{}}(VarKCell:SortKCell{}),dotk{}())),
        \dv{SortBool{}}("true")),
      \top{R}()))
  []

// rule `freshId(_)_ID-SYNTAX__Int`(I)=>`String2Id(_)_ID-SYNTAX__String`(`_+String__STRING__String_String`(#token("\"_\"","String"),`Int2String(_)_STRING__Int`(I))) requires #token("true","Bool") ensures #token("true","Bool") [contentStartColumn(8) contentStartLine(709) org.kframework.attributes.Location(Location(709,8,709,62)) org.kframework.attributes.Source(Source(/Users/manasvi/Projects/k-in-k/ext/k/k-distribution/target/release/k/include/builtin/domains.k)) org.kframework.definition.Production(syntax RuleContent ::= K)]
  axiom{R} \implies{R} (
    \top{R}(),
    \and{R} (
      \equals{SortId{},R} (
        LblfreshId'LParUndsRParUnds'ID-SYNTAX'UndsUnds'Int{}(VarI:SortInt{}),
        LblString2Id'LParUndsRParUnds'ID-SYNTAX'UndsUnds'String{}(Lbl'UndsPlus'String'UndsUnds'STRING'UndsUnds'String'Unds'String{}(\dv{SortString{}}("\"_\""),LblInt2String'LParUndsRParUnds'STRING'UndsUnds'Int{}(VarI:SortInt{})))),
      \top{R}()))
  [org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(709,8,709,62)"), contentStartColumn{}("8"), org'Stop'kframework'Stop'definition'Stop'Production{}("syntax RuleContent ::= K"), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/Users/manasvi/Projects/k-in-k/ext/k/k-distribution/target/release/k/include/builtin/domains.k)"), contentStartLine{}("709")]

// rule isList(K)=>#token("false","Bool") requires #token("true","Bool") ensures #token("true","Bool") [owise()]
  axiom{R} \implies{R} (
    \and{R} (
      \not{R} (
        \or{R} (
          \ceil{SortBool{},R} (
            \exists{SortBool{}} (VarList:SortList{},
              \and{SortBool{}} (
                \top{SortBool{}}(),
                LblisList{}(kseq{}(inj{SortList{}, SortKItem{}}(VarList:SortList{}),dotk{}()))))),
        \bottom{R}())),
      \top{R}()),
    \and{R} (
      \equals{SortBool{},R} (
        LblisList{}(VarK:SortK{}),
        \dv{SortBool{}}("false")),
      \top{R}()))
  [owise{}()]

// rule initStateCell(.KList)=>`<state>`(`.Map`(.KList)) requires #token("true","Bool") ensures #token("true","Bool") [initializer()]
  axiom{R} \implies{R} (
    \top{R}(),
    \and{R} (
      \equals{SortStateCell{},R} (
        LblinitStateCell{}(),
        Lbl'-LT-'state'-GT-'{}(Lbl'Stop'Map{}())),
      \top{R}()))
  [initializer{}()]

// rule isIds(K)=>#token("false","Bool") requires #token("true","Bool") ensures #token("true","Bool") [owise()]
  axiom{R} \implies{R} (
    \and{R} (
      \not{R} (
        \or{R} (
          \ceil{SortBool{},R} (
            \exists{SortBool{}} (VarIds:SortIds{},
              \and{SortBool{}} (
                \top{SortBool{}}(),
                LblisIds{}(kseq{}(inj{SortIds{}, SortKItem{}}(VarIds:SortIds{}),dotk{}()))))),
        \bottom{R}())),
      \top{R}()),
    \and{R} (
      \equals{SortBool{},R} (
        LblisIds{}(VarK:SortK{}),
        \dv{SortBool{}}("false")),
      \top{R}()))
  [owise{}()]

// rule isPgm(inj{Pgm,KItem}(Pgm))=>#token("true","Bool") requires #token("true","Bool") ensures #token("true","Bool") []
  axiom{R} \implies{R} (
    \top{R}(),
    \and{R} (
      \equals{SortBool{},R} (
        LblisPgm{}(kseq{}(inj{SortPgm{}, SortKItem{}}(VarPgm:SortPgm{}),dotk{}())),
        \dv{SortBool{}}("true")),
      \top{R}()))
  []

// rule isKItem(inj{StateCellOpt,KItem}(StateCellOpt))=>#token("true","Bool") requires #token("true","Bool") ensures #token("true","Bool") []
  axiom{R} \implies{R} (
    \top{R}(),
    \and{R} (
      \equals{SortBool{},R} (
        LblisKItem{}(kseq{}(inj{SortStateCellOpt{}, SortKItem{}}(VarStateCellOpt:SortStateCellOpt{}),dotk{}())),
        \dv{SortBool{}}("true")),
      \top{R}()))
  []

// rule isKCellOpt(K)=>#token("false","Bool") requires #token("true","Bool") ensures #token("true","Bool") [owise()]
  axiom{R} \implies{R} (
    \and{R} (
      \not{R} (
        \or{R} (
          \ceil{SortBool{},R} (
            \exists{SortBool{}} (VarKCell:SortKCell{},
              \and{SortBool{}} (
                \top{SortBool{}}(),
                LblisKCellOpt{}(kseq{}(inj{SortKCell{}, SortKItem{}}(VarKCell:SortKCell{}),dotk{}()))))),
        \or{R} (
          \ceil{SortBool{},R} (
            \exists{SortBool{}} (VarKCellOpt:SortKCellOpt{},
              \and{SortBool{}} (
                \top{SortBool{}}(),
                LblisKCellOpt{}(kseq{}(inj{SortKCellOpt{}, SortKItem{}}(VarKCellOpt:SortKCellOpt{}),dotk{}()))))),
        \bottom{R}()))),
      \top{R}()),
    \and{R} (
      \equals{SortBool{},R} (
        LblisKCellOpt{}(VarK:SortK{}),
        \dv{SortBool{}}("false")),
      \top{R}()))
  [owise{}()]

// rule isIds(inj{Ids,KItem}(Ids))=>#token("true","Bool") requires #token("true","Bool") ensures #token("true","Bool") []
  axiom{R} \implies{R} (
    \top{R}(),
    \and{R} (
      \equals{SortBool{},R} (
        LblisIds{}(kseq{}(inj{SortIds{}, SortKItem{}}(VarIds:SortIds{}),dotk{}())),
        \dv{SortBool{}}("true")),
      \top{R}()))
  []

// rule `rfindChar(_,_,_)_STRING__String_String_Int`(S1,S2,I)=>`maxInt(_,_)_INT__Int_Int`(`rfindString(_,_,_)_STRING__String_String_Int`(S1,`substrString(_,_,_)_STRING__String_Int_Int`(S2,#token("0","Int"),#token("1","Int")),I),`rfindChar(_,_,_)_STRING__String_String_Int`(S1,`substrString(_,_,_)_STRING__String_Int_Int`(S2,#token("1","Int"),`lengthString(_)_STRING__String`(S2)),I)) requires `_=/=String__STRING__String_String`(S2,#token("\"\"","String")) ensures #token("true","Bool") [contentStartColumn(8) contentStartLine(538) org.kframework.attributes.Location(Location(538,8,538,182)) org.kframework.attributes.Source(Source(/Users/manasvi/Projects/k-in-k/ext/k/k-distribution/target/release/k/include/builtin/domains.k)) org.kframework.definition.Production(syntax RuleContent ::= K "requires" K)]
  axiom{R} \implies{R} (
    \equals{SortBool{},R}(
        Lbl'UndsEqlsSlshEqls'String'UndsUnds'STRING'UndsUnds'String'Unds'String{}(VarS2:SortString{},\dv{SortString{}}("\"\"")),
        \dv{SortBool{}}("true")),
    \and{R} (
      \equals{SortInt{},R} (
        LblrfindChar'LParUndsCommUndsCommUndsRParUnds'STRING'UndsUnds'String'Unds'String'Unds'Int{}(VarS1:SortString{},VarS2:SortString{},VarI:SortInt{}),
        LblmaxInt'LParUndsCommUndsRParUnds'INT'UndsUnds'Int'Unds'Int{}(LblrfindString'LParUndsCommUndsCommUndsRParUnds'STRING'UndsUnds'String'Unds'String'Unds'Int{}(VarS1:SortString{},LblsubstrString'LParUndsCommUndsCommUndsRParUnds'STRING'UndsUnds'String'Unds'Int'Unds'Int{}(VarS2:SortString{},\dv{SortInt{}}("0"),\dv{SortInt{}}("1")),VarI:SortInt{}),LblrfindChar'LParUndsCommUndsCommUndsRParUnds'STRING'UndsUnds'String'Unds'String'Unds'Int{}(VarS1:SortString{},LblsubstrString'LParUndsCommUndsCommUndsRParUnds'STRING'UndsUnds'String'Unds'Int'Unds'Int{}(VarS2:SortString{},\dv{SortInt{}}("1"),LbllengthString'LParUndsRParUnds'STRING'UndsUnds'String{}(VarS2:SortString{})),VarI:SortInt{}))),
      \top{R}()))
  [org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(538,8,538,182)"), contentStartColumn{}("8"), org'Stop'kframework'Stop'definition'Stop'Production{}("syntax RuleContent ::= K \"requires\" K"), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/Users/manasvi/Projects/k-in-k/ext/k/k-distribution/target/release/k/include/builtin/domains.k)"), contentStartLine{}("538")]

// rule `<T>`(`<k>`(inj{Stmt,KItem}(`_=_;_IMP-SYNTAX__Id_AExp`(K0,HOLE))~>DotVar1),DotVar0)=>`<T>`(`<k>`(inj{AExp,KItem}(HOLE)~>`#freezer_=_;_IMP-SYNTAX__Id_AExp0_`(inj{Id,KItem}(K0))~>DotVar1),DotVar0) requires #token("true","Bool") ensures #token("true","Bool") [heat() org.kframework.attributes.Location(Location(18,20,18,73)) org.kframework.attributes.Source(Source(/Users/manasvi/Projects/k-in-k/imp/./imp.k)) productionID(417557780) strict(2) symbol(assign)]
  axiom{} \and{SortTCell{}} (
    \top{SortTCell{}}(), \and{SortTCell{}} (
    \top{SortTCell{}}(), \rewrites{SortTCell{}}(Lbl'-LT-'T'-GT-'{}(Lbl'-LT-'k'-GT-'{}(kseq{}(inj{SortStmt{}, SortKItem{}}(Lbl'UndsEqlsUndsSClnUnds'IMP-SYNTAX'UndsUnds'Id'Unds'AExp{}(VarK0:SortId{},VarHOLE:SortAExp{})),VarDotVar1:SortK{})),VarDotVar0:SortStateCell{}),Lbl'-LT-'T'-GT-'{}(Lbl'-LT-'k'-GT-'{}(kseq{}(inj{SortAExp{}, SortKItem{}}(VarHOLE:SortAExp{}),kseq{}(Lbl'Hash'freezer'UndsEqlsUndsSClnUnds'IMP-SYNTAX'UndsUnds'Id'Unds'AExp0'Unds'{}(kseq{}(inj{SortId{}, SortKItem{}}(VarK0:SortId{}),dotk{}())),VarDotVar1:SortK{}))),VarDotVar0:SortStateCell{}))))
  [org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(18,20,18,73)"), heat{}(), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/Users/manasvi/Projects/k-in-k/imp/./imp.k)"), productionID{}("417557780"), strict{}("2"), symbol'Kywd'{}("assign")]

// rule isKItem(inj{Stmt,KItem}(Stmt))=>#token("true","Bool") requires #token("true","Bool") ensures #token("true","Bool") []
  axiom{R} \implies{R} (
    \top{R}(),
    \and{R} (
      \equals{SortBool{},R} (
        LblisKItem{}(kseq{}(inj{SortStmt{}, SortKItem{}}(VarStmt:SortStmt{}),dotk{}())),
        \dv{SortBool{}}("true")),
      \top{R}()))
  []

// rule `<T>`(`<k>`(inj{BExp,KItem}(`_&&__IMP-SYNTAX__BExp_BExp`(HOLE,K1))~>DotVar1),DotVar0)=>`<T>`(`<k>`(inj{BExp,KItem}(HOLE)~>`#freezer_&&__IMP-SYNTAX__BExp_BExp1_`(inj{BExp,KItem}(K1))~>DotVar1),DotVar0) requires #token("true","Bool") ensures #token("true","Bool") [heat() left() org.kframework.attributes.Location(Location(13,20,13,80)) org.kframework.attributes.Source(Source(/Users/manasvi/Projects/k-in-k/imp/./imp.k)) productionID(1932332324) strict(1) symbol(andBExp)]
  axiom{} \and{SortTCell{}} (
    \top{SortTCell{}}(), \and{SortTCell{}} (
    \top{SortTCell{}}(), \rewrites{SortTCell{}}(Lbl'-LT-'T'-GT-'{}(Lbl'-LT-'k'-GT-'{}(kseq{}(inj{SortBExp{}, SortKItem{}}(Lbl'UndsAndAndUndsUnds'IMP-SYNTAX'UndsUnds'BExp'Unds'BExp{}(VarHOLE:SortBExp{},VarK1:SortBExp{})),VarDotVar1:SortK{})),VarDotVar0:SortStateCell{}),Lbl'-LT-'T'-GT-'{}(Lbl'-LT-'k'-GT-'{}(kseq{}(inj{SortBExp{}, SortKItem{}}(VarHOLE:SortBExp{}),kseq{}(Lbl'Hash'freezer'UndsAndAndUndsUnds'IMP-SYNTAX'UndsUnds'BExp'Unds'BExp1'Unds'{}(kseq{}(inj{SortBExp{}, SortKItem{}}(VarK1:SortBExp{}),dotk{}())),VarDotVar1:SortK{}))),VarDotVar0:SortStateCell{}))))
  [org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(13,20,13,80)"), heat{}(), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/Users/manasvi/Projects/k-in-k/imp/./imp.k)"), left{}(), productionID{}("1932332324"), strict{}("1"), symbol'Kywd'{}("andBExp")]

// rule `<T>`(`<k>`(inj{BExp,KItem}(`_&&__IMP-SYNTAX__BExp_BExp`(inj{Bool,BExp}(#token("true","Bool")),B))~>DotVar1),DotVar0)=>`<T>`(`<k>`(inj{BExp,KItem}(B)~>DotVar1),DotVar0) requires #token("true","Bool") ensures #token("true","Bool") [contentStartColumn(8) contentStartLine(46) org.kframework.attributes.Location(Location(46,8,46,22)) org.kframework.attributes.Source(Source(/Users/manasvi/Projects/k-in-k/imp/./imp.k)) org.kframework.definition.Production(syntax RuleContent ::= K)]
  axiom{} \and{SortTCell{}} (
    \top{SortTCell{}}(), \and{SortTCell{}} (
    \top{SortTCell{}}(), \rewrites{SortTCell{}}(Lbl'-LT-'T'-GT-'{}(Lbl'-LT-'k'-GT-'{}(kseq{}(inj{SortBExp{}, SortKItem{}}(Lbl'UndsAndAndUndsUnds'IMP-SYNTAX'UndsUnds'BExp'Unds'BExp{}(inj{SortBool{}, SortBExp{}}(\dv{SortBool{}}("true")),VarB:SortBExp{})),VarDotVar1:SortK{})),VarDotVar0:SortStateCell{}),Lbl'-LT-'T'-GT-'{}(Lbl'-LT-'k'-GT-'{}(kseq{}(inj{SortBExp{}, SortKItem{}}(VarB:SortBExp{}),VarDotVar1:SortK{})),VarDotVar0:SortStateCell{}))))
  [org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(46,8,46,22)"), contentStartColumn{}("8"), org'Stop'kframework'Stop'definition'Stop'Production{}("syntax RuleContent ::= K"), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/Users/manasvi/Projects/k-in-k/imp/./imp.k)"), contentStartLine{}("46")]

// rule `_xorBool__BOOL__Bool_Bool`(B1,B2)=>`notBool_`(`_==Bool__BOOL__Bool_Bool`(B1,B2)) requires #token("true","Bool") ensures #token("true","Bool") [contentStartColumn(8) contentStartLine(298) org.kframework.attributes.Location(Location(298,8,298,57)) org.kframework.attributes.Source(Source(/Users/manasvi/Projects/k-in-k/ext/k/k-distribution/target/release/k/include/builtin/domains.k)) org.kframework.definition.Production(syntax RuleContent ::= K)]
  axiom{R} \implies{R} (
    \top{R}(),
    \and{R} (
      \equals{SortBool{},R} (
        Lbl'Unds'xorBool'UndsUnds'BOOL'UndsUnds'Bool'Unds'Bool{}(VarB1:SortBool{},VarB2:SortBool{}),
        LblnotBool'Unds'{}(Lbl'UndsEqlsEqls'Bool'UndsUnds'BOOL'UndsUnds'Bool'Unds'Bool{}(VarB1:SortBool{},VarB2:SortBool{}))),
      \top{R}()))
  [org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(298,8,298,57)"), contentStartColumn{}("8"), org'Stop'kframework'Stop'definition'Stop'Production{}("syntax RuleContent ::= K"), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/Users/manasvi/Projects/k-in-k/ext/k/k-distribution/target/release/k/include/builtin/domains.k)"), contentStartLine{}("298")]

// rule isFloat(K)=>#token("false","Bool") requires #token("true","Bool") ensures #token("true","Bool") [owise()]
  axiom{R} \implies{R} (
    \and{R} (
      \not{R} (
        \or{R} (
          \ceil{SortBool{},R} (
            \exists{SortBool{}} (VarFloat:SortFloat{},
              \and{SortBool{}} (
                \top{SortBool{}}(),
                LblisFloat{}(kseq{}(inj{SortFloat{}, SortKItem{}}(VarFloat:SortFloat{}),dotk{}()))))),
        \bottom{R}())),
      \top{R}()),
    \and{R} (
      \equals{SortBool{},R} (
        LblisFloat{}(VarK:SortK{}),
        \dv{SortBool{}}("false")),
      \top{R}()))
  [owise{}()]

// rule isIOError(K)=>#token("false","Bool") requires #token("true","Bool") ensures #token("true","Bool") [owise()]
  axiom{R} \implies{R} (
    \and{R} (
      \not{R} (
        \or{R} (
          \ceil{SortBool{},R} (
            \exists{SortBool{}} (VarIOError:SortIOError{},
              \and{SortBool{}} (
                \top{SortBool{}}(),
                LblisIOError{}(kseq{}(inj{SortIOError{}, SortKItem{}}(VarIOError:SortIOError{}),dotk{}()))))),
        \bottom{R}())),
      \top{R}()),
    \and{R} (
      \equals{SortBool{},R} (
        LblisIOError{}(VarK:SortK{}),
        \dv{SortBool{}}("false")),
      \top{R}()))
  [owise{}()]

// rule isBExp(K)=>#token("false","Bool") requires #token("true","Bool") ensures #token("true","Bool") [owise()]
  axiom{R} \implies{R} (
    \and{R} (
      \not{R} (
        \or{R} (
          \ceil{SortBool{},R} (
            \exists{SortBool{}} (VarBool:SortBool{},
              \and{SortBool{}} (
                \top{SortBool{}}(),
                LblisBExp{}(kseq{}(inj{SortBool{}, SortKItem{}}(VarBool:SortBool{}),dotk{}()))))),
        \or{R} (
          \ceil{SortBool{},R} (
            \exists{SortBool{}} (VarBExp:SortBExp{},
              \and{SortBool{}} (
                \top{SortBool{}}(),
                LblisBExp{}(kseq{}(inj{SortBExp{}, SortKItem{}}(VarBExp:SortBExp{}),dotk{}()))))),
        \bottom{R}()))),
      \top{R}()),
    \and{R} (
      \equals{SortBool{},R} (
        LblisBExp{}(VarK:SortK{}),
        \dv{SortBool{}}("false")),
      \top{R}()))
  [owise{}()]

// rule isTCellFragment(K)=>#token("false","Bool") requires #token("true","Bool") ensures #token("true","Bool") [owise()]
  axiom{R} \implies{R} (
    \and{R} (
      \not{R} (
        \or{R} (
          \ceil{SortBool{},R} (
            \exists{SortBool{}} (VarTCellFragment:SortTCellFragment{},
              \and{SortBool{}} (
                \top{SortBool{}}(),
                LblisTCellFragment{}(kseq{}(inj{SortTCellFragment{}, SortKItem{}}(VarTCellFragment:SortTCellFragment{}),dotk{}()))))),
        \bottom{R}())),
      \top{R}()),
    \and{R} (
      \equals{SortBool{},R} (
        LblisTCellFragment{}(VarK:SortK{}),
        \dv{SortBool{}}("false")),
      \top{R}()))
  [owise{}()]

// rule `replaceAll(_,_,_)_STRING__String_String_String`(Source,ToReplace,Replacement)=>`replace(_,_,_,_)_STRING__String_String_String_Int`(Source,ToReplace,Replacement,`countAllOccurrences(_,_)_STRING__String_String`(Source,ToReplace)) requires #token("true","Bool") ensures #token("true","Bool") [contentStartColumn(8) contentStartLine(558) org.kframework.attributes.Location(Location(558,8,558,154)) org.kframework.attributes.Source(Source(/Users/manasvi/Projects/k-in-k/ext/k/k-distribution/target/release/k/include/builtin/domains.k)) org.kframework.definition.Production(syntax RuleContent ::= K)]
  axiom{R} \implies{R} (
    \top{R}(),
    \and{R} (
      \equals{SortString{},R} (
        LblreplaceAll'LParUndsCommUndsCommUndsRParUnds'STRING'UndsUnds'String'Unds'String'Unds'String{}(VarSource:SortString{},VarToReplace:SortString{},VarReplacement:SortString{}),
        Lblreplace'LParUndsCommUndsCommUndsCommUndsRParUnds'STRING'UndsUnds'String'Unds'String'Unds'String'Unds'Int{}(VarSource:SortString{},VarToReplace:SortString{},VarReplacement:SortString{},LblcountAllOccurrences'LParUndsCommUndsRParUnds'STRING'UndsUnds'String'Unds'String{}(VarSource:SortString{},VarToReplace:SortString{}))),
      \top{R}()))
  [org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(558,8,558,154)"), contentStartColumn{}("8"), org'Stop'kframework'Stop'definition'Stop'Production{}("syntax RuleContent ::= K"), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/Users/manasvi/Projects/k-in-k/ext/k/k-distribution/target/release/k/include/builtin/domains.k)"), contentStartLine{}("558")]

// rule `_=/=K__K-EQUAL__K_K`(K1,K2)=>`notBool_`(`_==K_`(K1,K2)) requires #token("true","Bool") ensures #token("true","Bool") [contentStartColumn(8) contentStartLine(727) org.kframework.attributes.Location(Location(727,8,727,45)) org.kframework.attributes.Source(Source(/Users/manasvi/Projects/k-in-k/ext/k/k-distribution/target/release/k/include/builtin/domains.k)) org.kframework.definition.Production(syntax RuleContent ::= K)]
  axiom{R} \implies{R} (
    \top{R}(),
    \and{R} (
      \equals{SortBool{},R} (
        Lbl'UndsEqlsSlshEqls'K'UndsUnds'K-EQUAL'UndsUnds'K'Unds'K{}(VarK1:SortK{},VarK2:SortK{}),
        LblnotBool'Unds'{}(Lbl'UndsEqlsEqls'K'Unds'{}(VarK1:SortK{},VarK2:SortK{}))),
      \top{R}()))
  [org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(727,8,727,45)"), contentStartColumn{}("8"), org'Stop'kframework'Stop'definition'Stop'Production{}("syntax RuleContent ::= K"), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/Users/manasvi/Projects/k-in-k/ext/k/k-distribution/target/release/k/include/builtin/domains.k)"), contentStartLine{}("727")]

// rule isStream(inj{Stream,KItem}(Stream))=>#token("true","Bool") requires #token("true","Bool") ensures #token("true","Bool") []
  axiom{R} \implies{R} (
    \top{R}(),
    \and{R} (
      \equals{SortBool{},R} (
        LblisStream{}(kseq{}(inj{SortStream{}, SortKItem{}}(VarStream:SortStream{}),dotk{}())),
        \dv{SortBool{}}("true")),
      \top{R}()))
  []

// rule `#open(_)_K-IO__String`(S)=>`#open(_,_)_K-IO__String_String`(S,#token("\"r+\"","String")) requires #token("true","Bool") ensures #token("true","Bool") [contentStartColumn(8) contentStartLine(854) org.kframework.attributes.Location(Location(854,8,854,48)) org.kframework.attributes.Source(Source(/Users/manasvi/Projects/k-in-k/ext/k/k-distribution/target/release/k/include/builtin/domains.k)) org.kframework.definition.Production(syntax RuleContent ::= K)]
  axiom{R} \implies{R} (
    \top{R}(),
    \and{R} (
      \equals{SortInt{},R} (
        Lbl'Hash'open'LParUndsRParUnds'K-IO'UndsUnds'String{}(VarS:SortString{}),
        Lbl'Hash'open'LParUndsCommUndsRParUnds'K-IO'UndsUnds'String'Unds'String{}(VarS:SortString{},\dv{SortString{}}("\"r+\""))),
      \top{R}()))
  [org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(854,8,854,48)"), contentStartColumn{}("8"), org'Stop'kframework'Stop'definition'Stop'Production{}("syntax RuleContent ::= K"), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/Users/manasvi/Projects/k-in-k/ext/k/k-distribution/target/release/k/include/builtin/domains.k)"), contentStartLine{}("854")]

// rule `_andThenBool__BOOL__Bool_Bool`(#token("false","Bool"),_1)=>#token("false","Bool") requires #token("true","Bool") ensures #token("true","Bool") [contentStartColumn(8) contentStartLine(292) org.kframework.attributes.Location(Location(292,8,292,36)) org.kframework.attributes.Source(Source(/Users/manasvi/Projects/k-in-k/ext/k/k-distribution/target/release/k/include/builtin/domains.k)) org.kframework.definition.Production(syntax RuleContent ::= K)]
  axiom{R} \implies{R} (
    \top{R}(),
    \and{R} (
      \equals{SortBool{},R} (
        Lbl'Unds'andThenBool'UndsUnds'BOOL'UndsUnds'Bool'Unds'Bool{}(\dv{SortBool{}}("false"),Var'Unds'1:SortBool{}),
        \dv{SortBool{}}("false")),
      \top{R}()))
  [org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(292,8,292,36)"), contentStartColumn{}("8"), org'Stop'kframework'Stop'definition'Stop'Production{}("syntax RuleContent ::= K"), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/Users/manasvi/Projects/k-in-k/ext/k/k-distribution/target/release/k/include/builtin/domains.k)"), contentStartLine{}("292")]

// rule isKResult(inj{KResult,KItem}(KResult))=>#token("true","Bool") requires #token("true","Bool") ensures #token("true","Bool") []
  axiom{R} \implies{R} (
    \top{R}(),
    \and{R} (
      \equals{SortBool{},R} (
        LblisKResult{}(kseq{}(inj{SortKResult{}, SortKItem{}}(VarKResult:SortKResult{}),dotk{}())),
        \dv{SortBool{}}("true")),
      \top{R}()))
  []

// rule `notBool_`(#token("false","Bool"))=>#token("true","Bool") requires #token("true","Bool") ensures #token("true","Bool") [contentStartColumn(8) contentStartLine(283) org.kframework.attributes.Location(Location(283,8,283,29)) org.kframework.attributes.Source(Source(/Users/manasvi/Projects/k-in-k/ext/k/k-distribution/target/release/k/include/builtin/domains.k)) org.kframework.definition.Production(syntax RuleContent ::= K)]
  axiom{R} \implies{R} (
    \top{R}(),
    \and{R} (
      \equals{SortBool{},R} (
        LblnotBool'Unds'{}(\dv{SortBool{}}("false")),
        \dv{SortBool{}}("true")),
      \top{R}()))
  [org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(283,8,283,29)"), contentStartColumn{}("8"), org'Stop'kframework'Stop'definition'Stop'Production{}("syntax RuleContent ::= K"), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/Users/manasvi/Projects/k-in-k/ext/k/k-distribution/target/release/k/include/builtin/domains.k)"), contentStartLine{}("283")]

// rule `countAllOccurrences(_,_)_STRING__String_String`(Source,ToCount)=>`_+Int__INT__Int_Int`(#token("1","Int"),`countAllOccurrences(_,_)_STRING__String_String`(`substrString(_,_,_)_STRING__String_Int_Int`(Source,`_+Int__INT__Int_Int`(`findString(_,_,_)_STRING__String_String_Int`(Source,ToCount,#token("0","Int")),`lengthString(_)_STRING__String`(ToCount)),`lengthString(_)_STRING__String`(Source)),ToCount)) requires `_>=Int__INT__Int_Int`(`findString(_,_,_)_STRING__String_String_Int`(Source,ToCount,#token("0","Int")),#token("0","Int")) ensures #token("true","Bool") [contentStartColumn(8) contentStartLine(543) org.kframework.attributes.Location(Location(543,8,544,60)) org.kframework.attributes.Source(Source(/Users/manasvi/Projects/k-in-k/ext/k/k-distribution/target/release/k/include/builtin/domains.k)) org.kframework.definition.Production(syntax RuleContent ::= K "requires" K)]
  axiom{R} \implies{R} (
    \equals{SortBool{},R}(
        Lbl'Unds-GT-Eqls'Int'UndsUnds'INT'UndsUnds'Int'Unds'Int{}(LblfindString'LParUndsCommUndsCommUndsRParUnds'STRING'UndsUnds'String'Unds'String'Unds'Int{}(VarSource:SortString{},VarToCount:SortString{},\dv{SortInt{}}("0")),\dv{SortInt{}}("0")),
        \dv{SortBool{}}("true")),
    \and{R} (
      \equals{SortInt{},R} (
        LblcountAllOccurrences'LParUndsCommUndsRParUnds'STRING'UndsUnds'String'Unds'String{}(VarSource:SortString{},VarToCount:SortString{}),
        Lbl'UndsPlus'Int'UndsUnds'INT'UndsUnds'Int'Unds'Int{}(\dv{SortInt{}}("1"),LblcountAllOccurrences'LParUndsCommUndsRParUnds'STRING'UndsUnds'String'Unds'String{}(LblsubstrString'LParUndsCommUndsCommUndsRParUnds'STRING'UndsUnds'String'Unds'Int'Unds'Int{}(VarSource:SortString{},Lbl'UndsPlus'Int'UndsUnds'INT'UndsUnds'Int'Unds'Int{}(LblfindString'LParUndsCommUndsCommUndsRParUnds'STRING'UndsUnds'String'Unds'String'Unds'Int{}(VarSource:SortString{},VarToCount:SortString{},\dv{SortInt{}}("0")),LbllengthString'LParUndsRParUnds'STRING'UndsUnds'String{}(VarToCount:SortString{})),LbllengthString'LParUndsRParUnds'STRING'UndsUnds'String{}(VarSource:SortString{})),VarToCount:SortString{}))),
      \top{R}()))
  [org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(543,8,544,60)"), contentStartColumn{}("8"), org'Stop'kframework'Stop'definition'Stop'Production{}("syntax RuleContent ::= K \"requires\" K"), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/Users/manasvi/Projects/k-in-k/ext/k/k-distribution/target/release/k/include/builtin/domains.k)"), contentStartLine{}("543")]

// rule isId(K)=>#token("false","Bool") requires #token("true","Bool") ensures #token("true","Bool") [owise()]
  axiom{R} \implies{R} (
    \and{R} (
      \not{R} (
        \or{R} (
          \ceil{SortBool{},R} (
            \exists{SortBool{}} (VarId:SortId{},
              \and{SortBool{}} (
                \top{SortBool{}}(),
                LblisId{}(kseq{}(inj{SortId{}, SortKItem{}}(VarId:SortId{}),dotk{}()))))),
        \bottom{R}())),
      \top{R}()),
    \and{R} (
      \equals{SortBool{},R} (
        LblisId{}(VarK:SortK{}),
        \dv{SortBool{}}("false")),
      \top{R}()))
  [owise{}()]

// rule `#stdin_K-IO_`(.KList)=>#token("0","Int") requires #token("true","Bool") ensures #token("true","Bool") [contentStartColumn(8) contentStartLine(860) org.kframework.attributes.Location(Location(860,8,860,19)) org.kframework.attributes.Source(Source(/Users/manasvi/Projects/k-in-k/ext/k/k-distribution/target/release/k/include/builtin/domains.k)) org.kframework.definition.Production(syntax RuleContent ::= K)]
  axiom{R} \implies{R} (
    \top{R}(),
    \and{R} (
      \equals{SortInt{},R} (
        Lbl'Hash'stdin'Unds'K-IO'Unds'{}(),
        \dv{SortInt{}}("0")),
      \top{R}()))
  [org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(860,8,860,19)"), contentStartColumn{}("8"), org'Stop'kframework'Stop'definition'Stop'Production{}("syntax RuleContent ::= K"), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/Users/manasvi/Projects/k-in-k/ext/k/k-distribution/target/release/k/include/builtin/domains.k)"), contentStartLine{}("860")]

// rule isCell(K)=>#token("false","Bool") requires #token("true","Bool") ensures #token("true","Bool") [owise()]
  axiom{R} \implies{R} (
    \and{R} (
      \not{R} (
        \or{R} (
          \ceil{SortBool{},R} (
            \exists{SortBool{}} (VarStateCell:SortStateCell{},
              \and{SortBool{}} (
                \top{SortBool{}}(),
                LblisCell{}(kseq{}(inj{SortStateCell{}, SortKItem{}}(VarStateCell:SortStateCell{}),dotk{}()))))),
        \or{R} (
          \ceil{SortBool{},R} (
            \exists{SortBool{}} (VarTCell:SortTCell{},
              \and{SortBool{}} (
                \top{SortBool{}}(),
                LblisCell{}(kseq{}(inj{SortTCell{}, SortKItem{}}(VarTCell:SortTCell{}),dotk{}()))))),
        \or{R} (
          \ceil{SortBool{},R} (
            \exists{SortBool{}} (VarCell:SortCell{},
              \and{SortBool{}} (
                \top{SortBool{}}(),
                LblisCell{}(kseq{}(inj{SortCell{}, SortKItem{}}(VarCell:SortCell{}),dotk{}()))))),
        \or{R} (
          \ceil{SortBool{},R} (
            \exists{SortBool{}} (VarKCell:SortKCell{},
              \and{SortBool{}} (
                \top{SortBool{}}(),
                LblisCell{}(kseq{}(inj{SortKCell{}, SortKItem{}}(VarKCell:SortKCell{}),dotk{}()))))),
        \bottom{R}()))))),
      \top{R}()),
    \and{R} (
      \equals{SortBool{},R} (
        LblisCell{}(VarK:SortK{}),
        \dv{SortBool{}}("false")),
      \top{R}()))
  [owise{}()]

// rule isBlock(K)=>#token("false","Bool") requires #token("true","Bool") ensures #token("true","Bool") [owise()]
  axiom{R} \implies{R} (
    \and{R} (
      \not{R} (
        \or{R} (
          \ceil{SortBool{},R} (
            \exists{SortBool{}} (VarBlock:SortBlock{},
              \and{SortBool{}} (
                \top{SortBool{}}(),
                LblisBlock{}(kseq{}(inj{SortBlock{}, SortKItem{}}(VarBlock:SortBlock{}),dotk{}()))))),
        \bottom{R}())),
      \top{R}()),
    \and{R} (
      \equals{SortBool{},R} (
        LblisBlock{}(VarK:SortK{}),
        \dv{SortBool{}}("false")),
      \top{R}()))
  [owise{}()]

// rule `replace(_,_,_,_)_STRING__String_String_String_Int`(Source,_14,_15,#token("0","Int"))=>Source requires #token("true","Bool") ensures #token("true","Bool") [contentStartColumn(8) contentStartLine(557) org.kframework.attributes.Location(Location(557,8,557,49)) org.kframework.attributes.Source(Source(/Users/manasvi/Projects/k-in-k/ext/k/k-distribution/target/release/k/include/builtin/domains.k)) org.kframework.definition.Production(syntax RuleContent ::= K)]
  axiom{R} \implies{R} (
    \top{R}(),
    \and{R} (
      \equals{SortString{},R} (
        Lblreplace'LParUndsCommUndsCommUndsCommUndsRParUnds'STRING'UndsUnds'String'Unds'String'Unds'String'Unds'Int{}(VarSource:SortString{},Var'Unds'14:SortString{},Var'Unds'15:SortString{},\dv{SortInt{}}("0")),
        VarSource:SortString{}),
      \top{R}()))
  [org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(557,8,557,49)"), contentStartColumn{}("8"), org'Stop'kframework'Stop'definition'Stop'Production{}("syntax RuleContent ::= K"), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/Users/manasvi/Projects/k-in-k/ext/k/k-distribution/target/release/k/include/builtin/domains.k)"), contentStartLine{}("557")]

// rule isFloat(inj{Float,KItem}(Float))=>#token("true","Bool") requires #token("true","Bool") ensures #token("true","Bool") []
  axiom{R} \implies{R} (
    \top{R}(),
    \and{R} (
      \equals{SortBool{},R} (
        LblisFloat{}(kseq{}(inj{SortFloat{}, SortKItem{}}(VarFloat:SortFloat{}),dotk{}())),
        \dv{SortBool{}}("true")),
      \top{R}()))
  []

// rule isStmt(K)=>#token("false","Bool") requires #token("true","Bool") ensures #token("true","Bool") [owise()]
  axiom{R} \implies{R} (
    \and{R} (
      \not{R} (
        \or{R} (
          \ceil{SortBool{},R} (
            \exists{SortBool{}} (VarBlock:SortBlock{},
              \and{SortBool{}} (
                \top{SortBool{}}(),
                LblisStmt{}(kseq{}(inj{SortBlock{}, SortKItem{}}(VarBlock:SortBlock{}),dotk{}()))))),
        \or{R} (
          \ceil{SortBool{},R} (
            \exists{SortBool{}} (VarStmt:SortStmt{},
              \and{SortBool{}} (
                \top{SortBool{}}(),
                LblisStmt{}(kseq{}(inj{SortStmt{}, SortKItem{}}(VarStmt:SortStmt{}),dotk{}()))))),
        \bottom{R}()))),
      \top{R}()),
    \and{R} (
      \equals{SortBool{},R} (
        LblisStmt{}(VarK:SortK{}),
        \dv{SortBool{}}("false")),
      \top{R}()))
  [owise{}()]

// rule isKItem(inj{IOError,KItem}(IOError))=>#token("true","Bool") requires #token("true","Bool") ensures #token("true","Bool") []
  axiom{R} \implies{R} (
    \top{R}(),
    \and{R} (
      \equals{SortBool{},R} (
        LblisKItem{}(kseq{}(inj{SortIOError{}, SortKItem{}}(VarIOError:SortIOError{}),dotk{}())),
        \dv{SortBool{}}("true")),
      \top{R}()))
  []

// rule `<T>`(`<k>`(inj{AExp,KItem}(`_+__IMP-SYNTAX__AExp_AExp`(K0,HOLE))~>DotVar1),DotVar0)=>`<T>`(`<k>`(inj{AExp,KItem}(HOLE)~>`#freezer_+__IMP-SYNTAX__AExp_AExp0_`(inj{AExp,KItem}(K0))~>DotVar1),DotVar0) requires #token("true","Bool") ensures #token("true","Bool") [heat() left() org.kframework.attributes.Location(Location(8,20,8,77)) org.kframework.attributes.Source(Source(/Users/manasvi/Projects/k-in-k/imp/./imp.k)) productionID(1940445711) strict() symbol(addAExp)]
  axiom{} \and{SortTCell{}} (
    \top{SortTCell{}}(), \and{SortTCell{}} (
    \top{SortTCell{}}(), \rewrites{SortTCell{}}(Lbl'-LT-'T'-GT-'{}(Lbl'-LT-'k'-GT-'{}(kseq{}(inj{SortAExp{}, SortKItem{}}(Lbl'UndsPlusUndsUnds'IMP-SYNTAX'UndsUnds'AExp'Unds'AExp{}(VarK0:SortAExp{},VarHOLE:SortAExp{})),VarDotVar1:SortK{})),VarDotVar0:SortStateCell{}),Lbl'-LT-'T'-GT-'{}(Lbl'-LT-'k'-GT-'{}(kseq{}(inj{SortAExp{}, SortKItem{}}(VarHOLE:SortAExp{}),kseq{}(Lbl'Hash'freezer'UndsPlusUndsUnds'IMP-SYNTAX'UndsUnds'AExp'Unds'AExp0'Unds'{}(kseq{}(inj{SortAExp{}, SortKItem{}}(VarK0:SortAExp{}),dotk{}())),VarDotVar1:SortK{}))),VarDotVar0:SortStateCell{}))))
  [org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(8,20,8,77)"), heat{}(), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/Users/manasvi/Projects/k-in-k/imp/./imp.k)"), left{}(), productionID{}("1940445711"), strict{}(""), symbol'Kywd'{}("addAExp")]

// rule `<T>`(`<k>`(inj{AExp,KItem}(`_/__IMP-SYNTAX__AExp_AExp`(inj{Int,AExp}(I1),inj{Int,AExp}(I2)))~>DotVar1),DotVar0)=>`<T>`(`<k>`(inj{Int,KItem}(`_/Int__INT__Int_Int`(I1,I2))~>DotVar1),DotVar0) requires `_=/=Int__INT__Int_Int`(I2,#token("0","Int")) ensures #token("true","Bool") [contentStartColumn(8) contentStartLine(40) org.kframework.attributes.Location(Location(40,8,40,51)) org.kframework.attributes.Source(Source(/Users/manasvi/Projects/k-in-k/imp/./imp.k)) org.kframework.definition.Production(syntax RuleContent ::= K "requires" K)]
  axiom{} \and{SortTCell{}} (
    \equals{SortBool{},SortTCell{}}(
        Lbl'UndsEqlsSlshEqls'Int'UndsUnds'INT'UndsUnds'Int'Unds'Int{}(VarI2:SortInt{},\dv{SortInt{}}("0")),
        \dv{SortBool{}}("true")), \and{SortTCell{}} (
    \top{SortTCell{}}(), \rewrites{SortTCell{}}(Lbl'-LT-'T'-GT-'{}(Lbl'-LT-'k'-GT-'{}(kseq{}(inj{SortAExp{}, SortKItem{}}(Lbl'UndsSlshUndsUnds'IMP-SYNTAX'UndsUnds'AExp'Unds'AExp{}(inj{SortInt{}, SortAExp{}}(VarI1:SortInt{}),inj{SortInt{}, SortAExp{}}(VarI2:SortInt{}))),VarDotVar1:SortK{})),VarDotVar0:SortStateCell{}),Lbl'-LT-'T'-GT-'{}(Lbl'-LT-'k'-GT-'{}(kseq{}(inj{SortInt{}, SortKItem{}}(Lbl'UndsSlsh'Int'UndsUnds'INT'UndsUnds'Int'Unds'Int{}(VarI1:SortInt{},VarI2:SortInt{})),VarDotVar1:SortK{})),VarDotVar0:SortStateCell{}))))
  [org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(40,8,40,51)"), contentStartColumn{}("8"), org'Stop'kframework'Stop'definition'Stop'Production{}("syntax RuleContent ::= K \"requires\" K"), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/Users/manasvi/Projects/k-in-k/imp/./imp.k)"), contentStartLine{}("40")]

// rule isAExp(inj{AExp,KItem}(AExp))=>#token("true","Bool") requires #token("true","Bool") ensures #token("true","Bool") []
  axiom{R} \implies{R} (
    \top{R}(),
    \and{R} (
      \equals{SortBool{},R} (
        LblisAExp{}(kseq{}(inj{SortAExp{}, SortKItem{}}(VarAExp:SortAExp{}),dotk{}())),
        \dv{SortBool{}}("true")),
      \top{R}()))
  []

// rule `<T>`(`<k>`(inj{Pgm,KItem}(`int_;__IMP-SYNTAX__Ids_Stmt`(`.List{"_,__IMP-SYNTAX__Id_Ids"}_Ids`(.KList),S))~>DotVar1),DotVar0)=>`<T>`(`<k>`(inj{Stmt,KItem}(S)~>DotVar1),DotVar0) requires #token("true","Bool") ensures #token("true","Bool") [contentStartColumn(8) contentStartLine(60) org.kframework.attributes.Location(Location(60,8,60,24)) org.kframework.attributes.Source(Source(/Users/manasvi/Projects/k-in-k/imp/./imp.k)) org.kframework.definition.Production(syntax RuleContent ::= K) structural()]
  axiom{} \and{SortTCell{}} (
    \top{SortTCell{}}(), \and{SortTCell{}} (
    \top{SortTCell{}}(), \rewrites{SortTCell{}}(Lbl'-LT-'T'-GT-'{}(Lbl'-LT-'k'-GT-'{}(kseq{}(inj{SortPgm{}, SortKItem{}}(Lblint'UndsSClnUndsUnds'IMP-SYNTAX'UndsUnds'Ids'Unds'Stmt{}(Lbl'Stop'List'LBraQuotUndsCommUndsUnds'IMP-SYNTAX'UndsUnds'Id'Unds'Ids'QuotRBraUnds'Ids{}(),VarS:SortStmt{})),VarDotVar1:SortK{})),VarDotVar0:SortStateCell{}),Lbl'-LT-'T'-GT-'{}(Lbl'-LT-'k'-GT-'{}(kseq{}(inj{SortStmt{}, SortKItem{}}(VarS:SortStmt{}),VarDotVar1:SortK{})),VarDotVar0:SortStateCell{}))))
  [org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(60,8,60,24)"), contentStartColumn{}("8"), org'Stop'kframework'Stop'definition'Stop'Production{}("syntax RuleContent ::= K"), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/Users/manasvi/Projects/k-in-k/imp/./imp.k)"), contentStartLine{}("60"), structural{}()]

// rule `_andBool_`(_7,#token("false","Bool"))=>#token("false","Bool") requires #token("true","Bool") ensures #token("true","Bool") [contentStartColumn(8) contentStartLine(288) org.kframework.attributes.Location(Location(288,8,288,37)) org.kframework.attributes.Source(Source(/Users/manasvi/Projects/k-in-k/ext/k/k-distribution/target/release/k/include/builtin/domains.k)) org.kframework.definition.Production(syntax RuleContent ::= K)]
  axiom{R} \implies{R} (
    \top{R}(),
    \and{R} (
      \equals{SortBool{},R} (
        Lbl'Unds'andBool'Unds'{}(Var'Unds'7:SortBool{},\dv{SortBool{}}("false")),
        \dv{SortBool{}}("false")),
      \top{R}()))
  [org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(288,8,288,37)"), contentStartColumn{}("8"), org'Stop'kframework'Stop'definition'Stop'Production{}("syntax RuleContent ::= K"), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/Users/manasvi/Projects/k-in-k/ext/k/k-distribution/target/release/k/include/builtin/domains.k)"), contentStartLine{}("288")]

// rule `_>String__STRING__String_String`(S1,S2)=>`_<String__STRING__String_String`(S2,S1) requires #token("true","Bool") ensures #token("true","Bool") [contentStartColumn(8) contentStartLine(533) org.kframework.attributes.Location(Location(533,8,533,52)) org.kframework.attributes.Source(Source(/Users/manasvi/Projects/k-in-k/ext/k/k-distribution/target/release/k/include/builtin/domains.k)) org.kframework.definition.Production(syntax RuleContent ::= K)]
  axiom{R} \implies{R} (
    \top{R}(),
    \and{R} (
      \equals{SortBool{},R} (
        Lbl'Unds-GT-'String'UndsUnds'STRING'UndsUnds'String'Unds'String{}(VarS1:SortString{},VarS2:SortString{}),
        Lbl'Unds-LT-'String'UndsUnds'STRING'UndsUnds'String'Unds'String{}(VarS2:SortString{},VarS1:SortString{})),
      \top{R}()))
  [org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(533,8,533,52)"), contentStartColumn{}("8"), org'Stop'kframework'Stop'definition'Stop'Production{}("syntax RuleContent ::= K"), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/Users/manasvi/Projects/k-in-k/ext/k/k-distribution/target/release/k/include/builtin/domains.k)"), contentStartLine{}("533")]

// rule isKCellOpt(inj{KCellOpt,KItem}(KCellOpt))=>#token("true","Bool") requires #token("true","Bool") ensures #token("true","Bool") []
  axiom{R} \implies{R} (
    \top{R}(),
    \and{R} (
      \equals{SortBool{},R} (
        LblisKCellOpt{}(kseq{}(inj{SortKCellOpt{}, SortKItem{}}(VarKCellOpt:SortKCellOpt{}),dotk{}())),
        \dv{SortBool{}}("true")),
      \top{R}()))
  []

// rule `countAllOccurrences(_,_)_STRING__String_String`(Source,ToCount)=>#token("0","Int") requires `_<Int__INT__Int_Int`(`findString(_,_,_)_STRING__String_String_Int`(Source,ToCount,#token("0","Int")),#token("0","Int")) ensures #token("true","Bool") [contentStartColumn(8) contentStartLine(541) org.kframework.attributes.Location(Location(541,8,542,59)) org.kframework.attributes.Source(Source(/Users/manasvi/Projects/k-in-k/ext/k/k-distribution/target/release/k/include/builtin/domains.k)) org.kframework.definition.Production(syntax RuleContent ::= K "requires" K)]
  axiom{R} \implies{R} (
    \equals{SortBool{},R}(
        Lbl'Unds-LT-'Int'UndsUnds'INT'UndsUnds'Int'Unds'Int{}(LblfindString'LParUndsCommUndsCommUndsRParUnds'STRING'UndsUnds'String'Unds'String'Unds'Int{}(VarSource:SortString{},VarToCount:SortString{},\dv{SortInt{}}("0")),\dv{SortInt{}}("0")),
        \dv{SortBool{}}("true")),
    \and{R} (
      \equals{SortInt{},R} (
        LblcountAllOccurrences'LParUndsCommUndsRParUnds'STRING'UndsUnds'String'Unds'String{}(VarSource:SortString{},VarToCount:SortString{}),
        \dv{SortInt{}}("0")),
      \top{R}()))
  [org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(541,8,542,59)"), contentStartColumn{}("8"), org'Stop'kframework'Stop'definition'Stop'Production{}("syntax RuleContent ::= K \"requires\" K"), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/Users/manasvi/Projects/k-in-k/ext/k/k-distribution/target/release/k/include/builtin/domains.k)"), contentStartLine{}("541")]

// rule `freshInt(_)_INT__Int`(I)=>I requires #token("true","Bool") ensures #token("true","Bool") [contentStartColumn(8) contentStartLine(395) org.kframework.attributes.Location(Location(395,8,395,28)) org.kframework.attributes.Source(Source(/Users/manasvi/Projects/k-in-k/ext/k/k-distribution/target/release/k/include/builtin/domains.k)) org.kframework.definition.Production(syntax RuleContent ::= K)]
  axiom{R} \implies{R} (
    \top{R}(),
    \and{R} (
      \equals{SortInt{},R} (
        LblfreshInt'LParUndsRParUnds'INT'UndsUnds'Int{}(VarI:SortInt{}),
        VarI:SortInt{}),
      \top{R}()))
  [org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(395,8,395,28)"), contentStartColumn{}("8"), org'Stop'kframework'Stop'definition'Stop'Production{}("syntax RuleContent ::= K"), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/Users/manasvi/Projects/k-in-k/ext/k/k-distribution/target/release/k/include/builtin/domains.k)"), contentStartLine{}("395")]

// rule `<T>`(`<k>`(inj{BExp,KItem}(`_&&__IMP-SYNTAX__BExp_BExp`(inj{Bool,BExp}(#token("false","Bool")),_19))~>DotVar1),DotVar0)=>`<T>`(`<k>`(inj{Bool,KItem}(#token("false","Bool"))~>DotVar1),DotVar0) requires #token("true","Bool") ensures #token("true","Bool") [contentStartColumn(8) contentStartLine(47) org.kframework.attributes.Location(Location(47,8,47,27)) org.kframework.attributes.Source(Source(/Users/manasvi/Projects/k-in-k/imp/./imp.k)) org.kframework.definition.Production(syntax RuleContent ::= K)]
  axiom{} \and{SortTCell{}} (
    \top{SortTCell{}}(), \and{SortTCell{}} (
    \top{SortTCell{}}(), \rewrites{SortTCell{}}(Lbl'-LT-'T'-GT-'{}(Lbl'-LT-'k'-GT-'{}(kseq{}(inj{SortBExp{}, SortKItem{}}(Lbl'UndsAndAndUndsUnds'IMP-SYNTAX'UndsUnds'BExp'Unds'BExp{}(inj{SortBool{}, SortBExp{}}(\dv{SortBool{}}("false")),Var'Unds'19:SortBExp{})),VarDotVar1:SortK{})),VarDotVar0:SortStateCell{}),Lbl'-LT-'T'-GT-'{}(Lbl'-LT-'k'-GT-'{}(kseq{}(inj{SortBool{}, SortKItem{}}(\dv{SortBool{}}("false")),VarDotVar1:SortK{})),VarDotVar0:SortStateCell{}))))
  [org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(47,8,47,27)"), contentStartColumn{}("8"), org'Stop'kframework'Stop'definition'Stop'Production{}("syntax RuleContent ::= K"), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/Users/manasvi/Projects/k-in-k/imp/./imp.k)"), contentStartLine{}("47")]

// rule isKConfigVar(K)=>#token("false","Bool") requires #token("true","Bool") ensures #token("true","Bool") [owise()]
  axiom{R} \implies{R} (
    \and{R} (
      \not{R} (
        \or{R} (
          \ceil{SortBool{},R} (
            \exists{SortBool{}} (VarKConfigVar:SortKConfigVar{},
              \and{SortBool{}} (
                \top{SortBool{}}(),
                LblisKConfigVar{}(kseq{}(inj{SortKConfigVar{}, SortKItem{}}(VarKConfigVar:SortKConfigVar{}),dotk{}()))))),
        \bottom{R}())),
      \top{R}()),
    \and{R} (
      \equals{SortBool{},R} (
        LblisKConfigVar{}(VarK:SortK{}),
        \dv{SortBool{}}("false")),
      \top{R}()))
  [owise{}()]

// rule `<T>`(`<k>`(inj{BExp,KItem}(HOLE)~>`#freezer_&&__IMP-SYNTAX__BExp_BExp1_`(inj{BExp,KItem}(K1))~>DotVar1),DotVar0)=>`<T>`(`<k>`(inj{BExp,KItem}(`_&&__IMP-SYNTAX__BExp_BExp`(HOLE,K1))~>DotVar1),DotVar0) requires #token("true","Bool") ensures #token("true","Bool") [cool() left() org.kframework.attributes.Location(Location(13,20,13,80)) org.kframework.attributes.Source(Source(/Users/manasvi/Projects/k-in-k/imp/./imp.k)) productionID(1932332324) strict(1) symbol(andBExp)]
  axiom{} \and{SortTCell{}} (
    \top{SortTCell{}}(), \and{SortTCell{}} (
    \top{SortTCell{}}(), \rewrites{SortTCell{}}(Lbl'-LT-'T'-GT-'{}(Lbl'-LT-'k'-GT-'{}(kseq{}(inj{SortBExp{}, SortKItem{}}(VarHOLE:SortBExp{}),kseq{}(Lbl'Hash'freezer'UndsAndAndUndsUnds'IMP-SYNTAX'UndsUnds'BExp'Unds'BExp1'Unds'{}(kseq{}(inj{SortBExp{}, SortKItem{}}(VarK1:SortBExp{}),dotk{}())),VarDotVar1:SortK{}))),VarDotVar0:SortStateCell{}),Lbl'-LT-'T'-GT-'{}(Lbl'-LT-'k'-GT-'{}(kseq{}(inj{SortBExp{}, SortKItem{}}(Lbl'UndsAndAndUndsUnds'IMP-SYNTAX'UndsUnds'BExp'Unds'BExp{}(VarHOLE:SortBExp{},VarK1:SortBExp{})),VarDotVar1:SortK{})),VarDotVar0:SortStateCell{}))))
  [org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(13,20,13,80)"), cool{}(), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/Users/manasvi/Projects/k-in-k/imp/./imp.k)"), left{}(), productionID{}("1932332324"), strict{}("1"), symbol'Kywd'{}("andBExp")]

// rule isTCellFragment(inj{TCellFragment,KItem}(TCellFragment))=>#token("true","Bool") requires #token("true","Bool") ensures #token("true","Bool") []
  axiom{R} \implies{R} (
    \top{R}(),
    \and{R} (
      \equals{SortBool{},R} (
        LblisTCellFragment{}(kseq{}(inj{SortTCellFragment{}, SortKItem{}}(VarTCellFragment:SortTCellFragment{}),dotk{}())),
        \dv{SortBool{}}("true")),
      \top{R}()))
  []

// rule `<T>`(`<k>`(inj{BExp,KItem}(HOLE)~>`#freezer!__IMP-SYNTAX__BExp0_`(.KList)~>DotVar1),DotVar0)=>`<T>`(`<k>`(inj{BExp,KItem}(`!__IMP-SYNTAX__BExp`(HOLE))~>DotVar1),DotVar0) requires #token("true","Bool") ensures #token("true","Bool") [cool() org.kframework.attributes.Location(Location(12,20,12,77)) org.kframework.attributes.Source(Source(/Users/manasvi/Projects/k-in-k/imp/./imp.k)) productionID(1581078471) strict() symbol(unaryNegation)]
  axiom{} \and{SortTCell{}} (
    \top{SortTCell{}}(), \and{SortTCell{}} (
    \top{SortTCell{}}(), \rewrites{SortTCell{}}(Lbl'-LT-'T'-GT-'{}(Lbl'-LT-'k'-GT-'{}(kseq{}(inj{SortBExp{}, SortKItem{}}(VarHOLE:SortBExp{}),kseq{}(Lbl'Hash'freezer'BangUndsUnds'IMP-SYNTAX'UndsUnds'BExp0'Unds'{}(),VarDotVar1:SortK{}))),VarDotVar0:SortStateCell{}),Lbl'-LT-'T'-GT-'{}(Lbl'-LT-'k'-GT-'{}(kseq{}(inj{SortBExp{}, SortKItem{}}(Lbl'BangUndsUnds'IMP-SYNTAX'UndsUnds'BExp{}(VarHOLE:SortBExp{})),VarDotVar1:SortK{})),VarDotVar0:SortStateCell{}))))
  [org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(12,20,12,77)"), cool{}(), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/Users/manasvi/Projects/k-in-k/imp/./imp.k)"), productionID{}("1581078471"), strict{}(""), symbol'Kywd'{}("unaryNegation")]

// rule `<T>`(`<k>`(inj{Stmt,KItem}(`while(_)__IMP-SYNTAX__BExp_Block`(B,S))~>DotVar1),DotVar0)=>`<T>`(`<k>`(inj{Stmt,KItem}(`if(_)_else__IMP-SYNTAX__BExp_Block_Block`(B,`{_}_IMP-SYNTAX__Stmt`(`___IMP-SYNTAX__Stmt_Stmt`(inj{Block,Stmt}(S),`while(_)__IMP-SYNTAX__BExp_Block`(B,S))),`{}_IMP-SYNTAX_`(.KList)))~>DotVar1),DotVar0) requires #token("true","Bool") ensures #token("true","Bool") [contentStartColumn(8) contentStartLine(56) org.kframework.attributes.Location(Location(56,8,56,53)) org.kframework.attributes.Source(Source(/Users/manasvi/Projects/k-in-k/imp/./imp.k)) org.kframework.definition.Production(syntax RuleContent ::= K) structural()]
  axiom{} \and{SortTCell{}} (
    \top{SortTCell{}}(), \and{SortTCell{}} (
    \top{SortTCell{}}(), \rewrites{SortTCell{}}(Lbl'-LT-'T'-GT-'{}(Lbl'-LT-'k'-GT-'{}(kseq{}(inj{SortStmt{}, SortKItem{}}(Lblwhile'LParUndsRParUndsUnds'IMP-SYNTAX'UndsUnds'BExp'Unds'Block{}(VarB:SortBExp{},VarS:SortBlock{})),VarDotVar1:SortK{})),VarDotVar0:SortStateCell{}),Lbl'-LT-'T'-GT-'{}(Lbl'-LT-'k'-GT-'{}(kseq{}(inj{SortStmt{}, SortKItem{}}(Lblif'LParUndsRParUnds'else'UndsUnds'IMP-SYNTAX'UndsUnds'BExp'Unds'Block'Unds'Block{}(VarB:SortBExp{},Lbl'LBraUndsRBraUnds'IMP-SYNTAX'UndsUnds'Stmt{}(Lbl'UndsUndsUnds'IMP-SYNTAX'UndsUnds'Stmt'Unds'Stmt{}(inj{SortBlock{}, SortStmt{}}(VarS:SortBlock{}),Lblwhile'LParUndsRParUndsUnds'IMP-SYNTAX'UndsUnds'BExp'Unds'Block{}(VarB:SortBExp{},VarS:SortBlock{}))),Lbl'LBraRBraUnds'IMP-SYNTAX'Unds'{}())),VarDotVar1:SortK{})),VarDotVar0:SortStateCell{}))))
  [org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(56,8,56,53)"), contentStartColumn{}("8"), org'Stop'kframework'Stop'definition'Stop'Production{}("syntax RuleContent ::= K"), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/Users/manasvi/Projects/k-in-k/imp/./imp.k)"), contentStartLine{}("56"), structural{}()]

// rule isKItem(inj{Id,KItem}(Id))=>#token("true","Bool") requires #token("true","Bool") ensures #token("true","Bool") []
  axiom{R} \implies{R} (
    \top{R}(),
    \and{R} (
      \equals{SortBool{},R} (
        LblisKItem{}(kseq{}(inj{SortId{}, SortKItem{}}(VarId:SortId{}),dotk{}())),
        \dv{SortBool{}}("true")),
      \top{R}()))
  []

// rule `_==Bool__BOOL__Bool_Bool`(K1,K2)=>`_==K_`(inj{Bool,KItem}(K1),inj{Bool,KItem}(K2)) requires #token("true","Bool") ensures #token("true","Bool") [contentStartColumn(8) contentStartLine(729) org.kframework.attributes.Location(Location(729,8,729,43)) org.kframework.attributes.Source(Source(/Users/manasvi/Projects/k-in-k/ext/k/k-distribution/target/release/k/include/builtin/domains.k)) org.kframework.definition.Production(syntax RuleContent ::= K)]
  axiom{R} \implies{R} (
    \top{R}(),
    \and{R} (
      \equals{SortBool{},R} (
        Lbl'UndsEqlsEqls'Bool'UndsUnds'BOOL'UndsUnds'Bool'Unds'Bool{}(VarK1:SortBool{},VarK2:SortBool{}),
        Lbl'UndsEqlsEqls'K'Unds'{}(kseq{}(inj{SortBool{}, SortKItem{}}(VarK1:SortBool{}),dotk{}()),kseq{}(inj{SortBool{}, SortKItem{}}(VarK2:SortBool{}),dotk{}()))),
      \top{R}()))
  [org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(729,8,729,43)"), contentStartColumn{}("8"), org'Stop'kframework'Stop'definition'Stop'Production{}("syntax RuleContent ::= K"), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/Users/manasvi/Projects/k-in-k/ext/k/k-distribution/target/release/k/include/builtin/domains.k)"), contentStartLine{}("729")]

// rule isTCell(inj{TCell,KItem}(TCell))=>#token("true","Bool") requires #token("true","Bool") ensures #token("true","Bool") []
  axiom{R} \implies{R} (
    \top{R}(),
    \and{R} (
      \equals{SortBool{},R} (
        LblisTCell{}(kseq{}(inj{SortTCell{}, SortKItem{}}(VarTCell:SortTCell{}),dotk{}())),
        \dv{SortBool{}}("true")),
      \top{R}()))
  []

// rule isStateCell(K)=>#token("false","Bool") requires #token("true","Bool") ensures #token("true","Bool") [owise()]
  axiom{R} \implies{R} (
    \and{R} (
      \not{R} (
        \or{R} (
          \ceil{SortBool{},R} (
            \exists{SortBool{}} (VarStateCell:SortStateCell{},
              \and{SortBool{}} (
                \top{SortBool{}}(),
                LblisStateCell{}(kseq{}(inj{SortStateCell{}, SortKItem{}}(VarStateCell:SortStateCell{}),dotk{}()))))),
        \bottom{R}())),
      \top{R}()),
    \and{R} (
      \equals{SortBool{},R} (
        LblisStateCell{}(VarK:SortK{}),
        \dv{SortBool{}}("false")),
      \top{R}()))
  [owise{}()]

// rule isIOError(inj{IOError,KItem}(IOError))=>#token("true","Bool") requires #token("true","Bool") ensures #token("true","Bool") []
  axiom{R} \implies{R} (
    \top{R}(),
    \and{R} (
      \equals{SortBool{},R} (
        LblisIOError{}(kseq{}(inj{SortIOError{}, SortKItem{}}(VarIOError:SortIOError{}),dotk{}())),
        \dv{SortBool{}}("true")),
      \top{R}()))
  []

// rule `_=/=String__STRING__String_String`(S1,S2)=>`notBool_`(`_==String__STRING__String_String`(S1,S2)) requires #token("true","Bool") ensures #token("true","Bool") [contentStartColumn(8) contentStartLine(519) org.kframework.attributes.Location(Location(519,8,519,65)) org.kframework.attributes.Source(Source(/Users/manasvi/Projects/k-in-k/ext/k/k-distribution/target/release/k/include/builtin/domains.k)) org.kframework.definition.Production(syntax RuleContent ::= K)]
  axiom{R} \implies{R} (
    \top{R}(),
    \and{R} (
      \equals{SortBool{},R} (
        Lbl'UndsEqlsSlshEqls'String'UndsUnds'STRING'UndsUnds'String'Unds'String{}(VarS1:SortString{},VarS2:SortString{}),
        LblnotBool'Unds'{}(Lbl'UndsEqlsEqls'String'UndsUnds'STRING'UndsUnds'String'Unds'String{}(VarS1:SortString{},VarS2:SortString{}))),
      \top{R}()))
  [org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(519,8,519,65)"), contentStartColumn{}("8"), org'Stop'kframework'Stop'definition'Stop'Production{}("syntax RuleContent ::= K"), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/Users/manasvi/Projects/k-in-k/ext/k/k-distribution/target/release/k/include/builtin/domains.k)"), contentStartLine{}("519")]

// rule isMap(K)=>#token("false","Bool") requires #token("true","Bool") ensures #token("true","Bool") [owise()]
  axiom{R} \implies{R} (
    \and{R} (
      \not{R} (
        \or{R} (
          \ceil{SortBool{},R} (
            \exists{SortBool{}} (VarMap:SortMap{},
              \and{SortBool{}} (
                \top{SortBool{}}(),
                LblisMap{}(kseq{}(inj{SortMap{}, SortKItem{}}(VarMap:SortMap{}),dotk{}()))))),
        \bottom{R}())),
      \top{R}()),
    \and{R} (
      \equals{SortBool{},R} (
        LblisMap{}(VarK:SortK{}),
        \dv{SortBool{}}("false")),
      \top{R}()))
  [owise{}()]

// rule `findChar(_,_,_)_STRING__String_String_Int`(_12,#token("\"\"","String"),_13)=>#token("-1","Int") requires #token("true","Bool") ensures #token("true","Bool") [contentStartColumn(8) contentStartLine(537) org.kframework.attributes.Location(Location(537,8,537,32)) org.kframework.attributes.Source(Source(/Users/manasvi/Projects/k-in-k/ext/k/k-distribution/target/release/k/include/builtin/domains.k)) org.kframework.definition.Production(syntax RuleContent ::= K)]
  axiom{R} \implies{R} (
    \top{R}(),
    \and{R} (
      \equals{SortInt{},R} (
        LblfindChar'LParUndsCommUndsCommUndsRParUnds'STRING'UndsUnds'String'Unds'String'Unds'Int{}(Var'Unds'12:SortString{},\dv{SortString{}}("\"\""),Var'Unds'13:SortInt{}),
        \dv{SortInt{}}("-1")),
      \top{R}()))
  [org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(537,8,537,32)"), contentStartColumn{}("8"), org'Stop'kframework'Stop'definition'Stop'Production{}("syntax RuleContent ::= K"), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/Users/manasvi/Projects/k-in-k/ext/k/k-distribution/target/release/k/include/builtin/domains.k)"), contentStartLine{}("537")]

// rule `_modInt__INT__Int_Int`(I1,I2)=>`_%Int__INT__Int_Int`(`_+Int__INT__Int_Int`(`_%Int__INT__Int_Int`(I1,`absInt(_)_INT__Int`(I2)),`absInt(_)_INT__Int`(I2)),`absInt(_)_INT__Int`(I2)) requires `_=/=Int__INT__Int_Int`(I2,#token("0","Int")) ensures #token("true","Bool") [concrete() contentStartColumn(5) contentStartLine(374) org.kframework.attributes.Location(Location(374,5,377,23)) org.kframework.attributes.Source(Source(/Users/manasvi/Projects/k-in-k/ext/k/k-distribution/target/release/k/include/builtin/domains.k)) org.kframework.definition.Production(syntax RuleContent ::= K "requires" K)]
  axiom{R} \implies{R} (
    \equals{SortBool{},R}(
        Lbl'UndsEqlsSlshEqls'Int'UndsUnds'INT'UndsUnds'Int'Unds'Int{}(VarI2:SortInt{},\dv{SortInt{}}("0")),
        \dv{SortBool{}}("true")),
    \and{R} (
      \equals{SortInt{},R} (
        Lbl'Unds'modInt'UndsUnds'INT'UndsUnds'Int'Unds'Int{}(VarI1:SortInt{},VarI2:SortInt{}),
        Lbl'UndsPerc'Int'UndsUnds'INT'UndsUnds'Int'Unds'Int{}(Lbl'UndsPlus'Int'UndsUnds'INT'UndsUnds'Int'Unds'Int{}(Lbl'UndsPerc'Int'UndsUnds'INT'UndsUnds'Int'Unds'Int{}(VarI1:SortInt{},LblabsInt'LParUndsRParUnds'INT'UndsUnds'Int{}(VarI2:SortInt{})),LblabsInt'LParUndsRParUnds'INT'UndsUnds'Int{}(VarI2:SortInt{})),LblabsInt'LParUndsRParUnds'INT'UndsUnds'Int{}(VarI2:SortInt{}))),
      \top{R}()))
  [org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(374,5,377,23)"), contentStartColumn{}("5"), org'Stop'kframework'Stop'definition'Stop'Production{}("syntax RuleContent ::= K \"requires\" K"), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/Users/manasvi/Projects/k-in-k/ext/k/k-distribution/target/release/k/include/builtin/domains.k)"), concrete{}(), contentStartLine{}("374")]

// rule `<T>`(`<k>`(inj{AExp,KItem}(`_+__IMP-SYNTAX__AExp_AExp`(inj{Int,AExp}(I1),inj{Int,AExp}(I2)))~>DotVar1),DotVar0)=>`<T>`(`<k>`(inj{Int,KItem}(`_+Int__INT__Int_Int`(I1,I2))~>DotVar1),DotVar0) requires #token("true","Bool") ensures #token("true","Bool") [contentStartColumn(8) contentStartLine(41) org.kframework.attributes.Location(Location(41,8,41,29)) org.kframework.attributes.Source(Source(/Users/manasvi/Projects/k-in-k/imp/./imp.k)) org.kframework.definition.Production(syntax RuleContent ::= K)]
  axiom{} \and{SortTCell{}} (
    \top{SortTCell{}}(), \and{SortTCell{}} (
    \top{SortTCell{}}(), \rewrites{SortTCell{}}(Lbl'-LT-'T'-GT-'{}(Lbl'-LT-'k'-GT-'{}(kseq{}(inj{SortAExp{}, SortKItem{}}(Lbl'UndsPlusUndsUnds'IMP-SYNTAX'UndsUnds'AExp'Unds'AExp{}(inj{SortInt{}, SortAExp{}}(VarI1:SortInt{}),inj{SortInt{}, SortAExp{}}(VarI2:SortInt{}))),VarDotVar1:SortK{})),VarDotVar0:SortStateCell{}),Lbl'-LT-'T'-GT-'{}(Lbl'-LT-'k'-GT-'{}(kseq{}(inj{SortInt{}, SortKItem{}}(Lbl'UndsPlus'Int'UndsUnds'INT'UndsUnds'Int'Unds'Int{}(VarI1:SortInt{},VarI2:SortInt{})),VarDotVar1:SortK{})),VarDotVar0:SortStateCell{}))))
  [org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(41,8,41,29)"), contentStartColumn{}("8"), org'Stop'kframework'Stop'definition'Stop'Production{}("syntax RuleContent ::= K"), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/Users/manasvi/Projects/k-in-k/imp/./imp.k)"), contentStartLine{}("41")]

// rule `_==String__STRING__String_String`(S1,S2)=>`_==K_`(inj{String,KItem}(S1),inj{String,KItem}(S2)) requires #token("true","Bool") ensures #token("true","Bool") [contentStartColumn(8) contentStartLine(520) org.kframework.attributes.Location(Location(520,8,520,49)) org.kframework.attributes.Source(Source(/Users/manasvi/Projects/k-in-k/ext/k/k-distribution/target/release/k/include/builtin/domains.k)) org.kframework.definition.Production(syntax RuleContent ::= K)]
  axiom{R} \implies{R} (
    \top{R}(),
    \and{R} (
      \equals{SortBool{},R} (
        Lbl'UndsEqlsEqls'String'UndsUnds'STRING'UndsUnds'String'Unds'String{}(VarS1:SortString{},VarS2:SortString{}),
        Lbl'UndsEqlsEqls'K'Unds'{}(kseq{}(inj{SortString{}, SortKItem{}}(VarS1:SortString{}),dotk{}()),kseq{}(inj{SortString{}, SortKItem{}}(VarS2:SortString{}),dotk{}()))),
      \top{R}()))
  [org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(520,8,520,49)"), contentStartColumn{}("8"), org'Stop'kframework'Stop'definition'Stop'Production{}("syntax RuleContent ::= K"), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/Users/manasvi/Projects/k-in-k/ext/k/k-distribution/target/release/k/include/builtin/domains.k)"), contentStartLine{}("520")]

// rule `_orBool__BOOL__Bool_Bool`(#token("true","Bool"),_3)=>#token("true","Bool") requires #token("true","Bool") ensures #token("true","Bool") [contentStartColumn(8) contentStartLine(300) org.kframework.attributes.Location(Location(300,8,300,34)) org.kframework.attributes.Source(Source(/Users/manasvi/Projects/k-in-k/ext/k/k-distribution/target/release/k/include/builtin/domains.k)) org.kframework.definition.Production(syntax RuleContent ::= K)]
  axiom{R} \implies{R} (
    \top{R}(),
    \and{R} (
      \equals{SortBool{},R} (
        Lbl'Unds'orBool'UndsUnds'BOOL'UndsUnds'Bool'Unds'Bool{}(\dv{SortBool{}}("true"),Var'Unds'3:SortBool{}),
        \dv{SortBool{}}("true")),
      \top{R}()))
  [org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(300,8,300,34)"), contentStartColumn{}("8"), org'Stop'kframework'Stop'definition'Stop'Production{}("syntax RuleContent ::= K"), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/Users/manasvi/Projects/k-in-k/ext/k/k-distribution/target/release/k/include/builtin/domains.k)"), contentStartLine{}("300")]

// rule isInt(K)=>#token("false","Bool") requires #token("true","Bool") ensures #token("true","Bool") [owise()]
  axiom{R} \implies{R} (
    \and{R} (
      \not{R} (
        \or{R} (
          \ceil{SortBool{},R} (
            \exists{SortBool{}} (VarInt:SortInt{},
              \and{SortBool{}} (
                \top{SortBool{}}(),
                LblisInt{}(kseq{}(inj{SortInt{}, SortKItem{}}(VarInt:SortInt{}),dotk{}()))))),
        \bottom{R}())),
      \top{R}()),
    \and{R} (
      \equals{SortBool{},R} (
        LblisInt{}(VarK:SortK{}),
        \dv{SortBool{}}("false")),
      \top{R}()))
  [owise{}()]

// rule isKItem(inj{Int,KItem}(Int))=>#token("true","Bool") requires #token("true","Bool") ensures #token("true","Bool") []
  axiom{R} \implies{R} (
    \top{R}(),
    \and{R} (
      \equals{SortBool{},R} (
        LblisKItem{}(kseq{}(inj{SortInt{}, SortKItem{}}(VarInt:SortInt{}),dotk{}())),
        \dv{SortBool{}}("true")),
      \top{R}()))
  []

// rule isKItem(inj{StateCell,KItem}(StateCell))=>#token("true","Bool") requires #token("true","Bool") ensures #token("true","Bool") []
  axiom{R} \implies{R} (
    \top{R}(),
    \and{R} (
      \equals{SortBool{},R} (
        LblisKItem{}(kseq{}(inj{SortStateCell{}, SortKItem{}}(VarStateCell:SortStateCell{}),dotk{}())),
        \dv{SortBool{}}("true")),
      \top{R}()))
  []

// rule `<T>`(`<k>`(inj{Stmt,KItem}(`if(_)_else__IMP-SYNTAX__BExp_Block_Block`(inj{Bool,BExp}(#token("true","Bool")),S,_20))~>DotVar1),DotVar0)=>`<T>`(`<k>`(inj{Block,KItem}(S)~>DotVar1),DotVar0) requires #token("true","Bool") ensures #token("true","Bool") [contentStartColumn(8) contentStartLine(54) org.kframework.attributes.Location(Location(54,8,54,32)) org.kframework.attributes.Source(Source(/Users/manasvi/Projects/k-in-k/imp/./imp.k)) org.kframework.definition.Production(syntax RuleContent ::= K)]
  axiom{} \and{SortTCell{}} (
    \top{SortTCell{}}(), \and{SortTCell{}} (
    \top{SortTCell{}}(), \rewrites{SortTCell{}}(Lbl'-LT-'T'-GT-'{}(Lbl'-LT-'k'-GT-'{}(kseq{}(inj{SortStmt{}, SortKItem{}}(Lblif'LParUndsRParUnds'else'UndsUnds'IMP-SYNTAX'UndsUnds'BExp'Unds'Block'Unds'Block{}(inj{SortBool{}, SortBExp{}}(\dv{SortBool{}}("true")),VarS:SortBlock{},Var'Unds'20:SortBlock{})),VarDotVar1:SortK{})),VarDotVar0:SortStateCell{}),Lbl'-LT-'T'-GT-'{}(Lbl'-LT-'k'-GT-'{}(kseq{}(inj{SortBlock{}, SortKItem{}}(VarS:SortBlock{}),VarDotVar1:SortK{})),VarDotVar0:SortStateCell{}))))
  [org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(54,8,54,32)"), contentStartColumn{}("8"), org'Stop'kframework'Stop'definition'Stop'Production{}("syntax RuleContent ::= K"), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/Users/manasvi/Projects/k-in-k/imp/./imp.k)"), contentStartLine{}("54")]

// rule `<T>`(`<k>`(inj{AExp,KItem}(`_/__IMP-SYNTAX__AExp_AExp`(K0,HOLE))~>DotVar1),DotVar0)=>`<T>`(`<k>`(inj{AExp,KItem}(HOLE)~>`#freezer_/__IMP-SYNTAX__AExp_AExp0_`(inj{AExp,KItem}(K0))~>DotVar1),DotVar0) requires #token("true","Bool") ensures #token("true","Bool") [heat() left() org.kframework.attributes.Location(Location(7,20,7,77)) org.kframework.attributes.Source(Source(/Users/manasvi/Projects/k-in-k/imp/./imp.k)) productionID(284686302) strict() symbol(divAExp)]
  axiom{} \and{SortTCell{}} (
    \top{SortTCell{}}(), \and{SortTCell{}} (
    \top{SortTCell{}}(), \rewrites{SortTCell{}}(Lbl'-LT-'T'-GT-'{}(Lbl'-LT-'k'-GT-'{}(kseq{}(inj{SortAExp{}, SortKItem{}}(Lbl'UndsSlshUndsUnds'IMP-SYNTAX'UndsUnds'AExp'Unds'AExp{}(VarK0:SortAExp{},VarHOLE:SortAExp{})),VarDotVar1:SortK{})),VarDotVar0:SortStateCell{}),Lbl'-LT-'T'-GT-'{}(Lbl'-LT-'k'-GT-'{}(kseq{}(inj{SortAExp{}, SortKItem{}}(VarHOLE:SortAExp{}),kseq{}(Lbl'Hash'freezer'UndsSlshUndsUnds'IMP-SYNTAX'UndsUnds'AExp'Unds'AExp0'Unds'{}(kseq{}(inj{SortAExp{}, SortKItem{}}(VarK0:SortAExp{}),dotk{}())),VarDotVar1:SortK{}))),VarDotVar0:SortStateCell{}))))
  [org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(7,20,7,77)"), heat{}(), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/Users/manasvi/Projects/k-in-k/imp/./imp.k)"), left{}(), productionID{}("284686302"), strict{}(""), symbol'Kywd'{}("divAExp")]

// rule isPgm(K)=>#token("false","Bool") requires #token("true","Bool") ensures #token("true","Bool") [owise()]
  axiom{R} \implies{R} (
    \and{R} (
      \not{R} (
        \or{R} (
          \ceil{SortBool{},R} (
            \exists{SortBool{}} (VarPgm:SortPgm{},
              \and{SortBool{}} (
                \top{SortBool{}}(),
                LblisPgm{}(kseq{}(inj{SortPgm{}, SortKItem{}}(VarPgm:SortPgm{}),dotk{}()))))),
        \bottom{R}())),
      \top{R}()),
    \and{R} (
      \equals{SortBool{},R} (
        LblisPgm{}(VarK:SortK{}),
        \dv{SortBool{}}("false")),
      \top{R}()))
  [owise{}()]

// rule isKItem(inj{List,KItem}(List))=>#token("true","Bool") requires #token("true","Bool") ensures #token("true","Bool") []
  axiom{R} \implies{R} (
    \top{R}(),
    \and{R} (
      \equals{SortBool{},R} (
        LblisKItem{}(kseq{}(inj{SortList{}, SortKItem{}}(VarList:SortList{}),dotk{}())),
        \dv{SortBool{}}("true")),
      \top{R}()))
  []

// rule `signExtendBitRangeInt(_,_,_)_INT__Int_Int_Int`(I,IDX,LEN)=>`_-Int__INT__Int_Int`(`_modInt__INT__Int_Int`(`_+Int__INT__Int_Int`(`bitRangeInt(_,_,_)_INT__Int_Int_Int`(I,IDX,LEN),`_<<Int__INT__Int_Int`(#token("1","Int"),`_-Int__INT__Int_Int`(LEN,#token("1","Int")))),`_<<Int__INT__Int_Int`(#token("1","Int"),LEN)),`_<<Int__INT__Int_Int`(#token("1","Int"),`_-Int__INT__Int_Int`(LEN,#token("1","Int")))) requires #token("true","Bool") ensures #token("true","Bool") [contentStartColumn(8) contentStartLine(369) org.kframework.attributes.Location(Location(369,8,369,149)) org.kframework.attributes.Source(Source(/Users/manasvi/Projects/k-in-k/ext/k/k-distribution/target/release/k/include/builtin/domains.k)) org.kframework.definition.Production(syntax RuleContent ::= K)]
  axiom{R} \implies{R} (
    \top{R}(),
    \and{R} (
      \equals{SortInt{},R} (
        LblsignExtendBitRangeInt'LParUndsCommUndsCommUndsRParUnds'INT'UndsUnds'Int'Unds'Int'Unds'Int{}(VarI:SortInt{},VarIDX:SortInt{},VarLEN:SortInt{}),
        Lbl'Unds'-Int'UndsUnds'INT'UndsUnds'Int'Unds'Int{}(Lbl'Unds'modInt'UndsUnds'INT'UndsUnds'Int'Unds'Int{}(Lbl'UndsPlus'Int'UndsUnds'INT'UndsUnds'Int'Unds'Int{}(LblbitRangeInt'LParUndsCommUndsCommUndsRParUnds'INT'UndsUnds'Int'Unds'Int'Unds'Int{}(VarI:SortInt{},VarIDX:SortInt{},VarLEN:SortInt{}),Lbl'Unds-LT--LT-'Int'UndsUnds'INT'UndsUnds'Int'Unds'Int{}(\dv{SortInt{}}("1"),Lbl'Unds'-Int'UndsUnds'INT'UndsUnds'Int'Unds'Int{}(VarLEN:SortInt{},\dv{SortInt{}}("1")))),Lbl'Unds-LT--LT-'Int'UndsUnds'INT'UndsUnds'Int'Unds'Int{}(\dv{SortInt{}}("1"),VarLEN:SortInt{})),Lbl'Unds-LT--LT-'Int'UndsUnds'INT'UndsUnds'Int'Unds'Int{}(\dv{SortInt{}}("1"),Lbl'Unds'-Int'UndsUnds'INT'UndsUnds'Int'Unds'Int{}(VarLEN:SortInt{},\dv{SortInt{}}("1"))))),
      \top{R}()))
  [org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(369,8,369,149)"), contentStartColumn{}("8"), org'Stop'kframework'Stop'definition'Stop'Production{}("syntax RuleContent ::= K"), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/Users/manasvi/Projects/k-in-k/ext/k/k-distribution/target/release/k/include/builtin/domains.k)"), contentStartLine{}("369")]

// rule `_>=String__STRING__String_String`(S1,S2)=>`notBool_`(`_<String__STRING__String_String`(S1,S2)) requires #token("true","Bool") ensures #token("true","Bool") [contentStartColumn(8) contentStartLine(534) org.kframework.attributes.Location(Location(534,8,534,63)) org.kframework.attributes.Source(Source(/Users/manasvi/Projects/k-in-k/ext/k/k-distribution/target/release/k/include/builtin/domains.k)) org.kframework.definition.Production(syntax RuleContent ::= K)]
  axiom{R} \implies{R} (
    \top{R}(),
    \and{R} (
      \equals{SortBool{},R} (
        Lbl'Unds-GT-Eqls'String'UndsUnds'STRING'UndsUnds'String'Unds'String{}(VarS1:SortString{},VarS2:SortString{}),
        LblnotBool'Unds'{}(Lbl'Unds-LT-'String'UndsUnds'STRING'UndsUnds'String'Unds'String{}(VarS1:SortString{},VarS2:SortString{}))),
      \top{R}()))
  [org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(534,8,534,63)"), contentStartColumn{}("8"), org'Stop'kframework'Stop'definition'Stop'Production{}("syntax RuleContent ::= K"), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/Users/manasvi/Projects/k-in-k/ext/k/k-distribution/target/release/k/include/builtin/domains.k)"), contentStartLine{}("534")]

// rule `<T>`(`<k>`(inj{BExp,KItem}(HOLE)~>`#freezerif(_)_else__IMP-SYNTAX__BExp_Block_Block1_`(inj{Block,KItem}(K1),inj{Block,KItem}(K2))~>DotVar1),DotVar0)=>`<T>`(`<k>`(inj{Stmt,KItem}(`if(_)_else__IMP-SYNTAX__BExp_Block_Block`(HOLE,K1,K2))~>DotVar1),DotVar0) requires #token("true","Bool") ensures #token("true","Bool") [cool() org.kframework.attributes.Location(Location(19,20,20,70)) org.kframework.attributes.Source(Source(/Users/manasvi/Projects/k-in-k/imp/./imp.k)) productionID(1350751778) strict(1) symbol(ite)]
  axiom{} \and{SortTCell{}} (
    \top{SortTCell{}}(), \and{SortTCell{}} (
    \top{SortTCell{}}(), \rewrites{SortTCell{}}(Lbl'-LT-'T'-GT-'{}(Lbl'-LT-'k'-GT-'{}(kseq{}(inj{SortBExp{}, SortKItem{}}(VarHOLE:SortBExp{}),kseq{}(Lbl'Hash'freezerif'LParUndsRParUnds'else'UndsUnds'IMP-SYNTAX'UndsUnds'BExp'Unds'Block'Unds'Block1'Unds'{}(kseq{}(inj{SortBlock{}, SortKItem{}}(VarK1:SortBlock{}),dotk{}()),kseq{}(inj{SortBlock{}, SortKItem{}}(VarK2:SortBlock{}),dotk{}())),VarDotVar1:SortK{}))),VarDotVar0:SortStateCell{}),Lbl'-LT-'T'-GT-'{}(Lbl'-LT-'k'-GT-'{}(kseq{}(inj{SortStmt{}, SortKItem{}}(Lblif'LParUndsRParUnds'else'UndsUnds'IMP-SYNTAX'UndsUnds'BExp'Unds'Block'Unds'Block{}(VarHOLE:SortBExp{},VarK1:SortBlock{},VarK2:SortBlock{})),VarDotVar1:SortK{})),VarDotVar0:SortStateCell{}))))
  [org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(19,20,20,70)"), cool{}(), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/Users/manasvi/Projects/k-in-k/imp/./imp.k)"), productionID{}("1350751778"), strict{}("1"), symbol'Kywd'{}("ite")]

// rule `_andBool_`(#token("false","Bool"),_0)=>#token("false","Bool") requires #token("true","Bool") ensures #token("true","Bool") [contentStartColumn(8) contentStartLine(287) org.kframework.attributes.Location(Location(287,8,287,37)) org.kframework.attributes.Source(Source(/Users/manasvi/Projects/k-in-k/ext/k/k-distribution/target/release/k/include/builtin/domains.k)) org.kframework.definition.Production(syntax RuleContent ::= K)]
  axiom{R} \implies{R} (
    \top{R}(),
    \and{R} (
      \equals{SortBool{},R} (
        Lbl'Unds'andBool'Unds'{}(\dv{SortBool{}}("false"),Var'Unds'0:SortBool{}),
        \dv{SortBool{}}("false")),
      \top{R}()))
  [org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(287,8,287,37)"), contentStartColumn{}("8"), org'Stop'kframework'Stop'definition'Stop'Production{}("syntax RuleContent ::= K"), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/Users/manasvi/Projects/k-in-k/ext/k/k-distribution/target/release/k/include/builtin/domains.k)"), contentStartLine{}("287")]

// rule isKItem(inj{Block,KItem}(Block))=>#token("true","Bool") requires #token("true","Bool") ensures #token("true","Bool") []
  axiom{R} \implies{R} (
    \top{R}(),
    \and{R} (
      \equals{SortBool{},R} (
        LblisKItem{}(kseq{}(inj{SortBlock{}, SortKItem{}}(VarBlock:SortBlock{}),dotk{}())),
        \dv{SortBool{}}("true")),
      \top{R}()))
  []

// rule `_andThenBool__BOOL__Bool_Bool`(#token("true","Bool"),K)=>K requires #token("true","Bool") ensures #token("true","Bool") [contentStartColumn(8) contentStartLine(290) org.kframework.attributes.Location(Location(290,8,290,37)) org.kframework.attributes.Source(Source(/Users/manasvi/Projects/k-in-k/ext/k/k-distribution/target/release/k/include/builtin/domains.k)) org.kframework.definition.Production(syntax RuleContent ::= K)]
  axiom{R} \implies{R} (
    \top{R}(),
    \and{R} (
      \equals{SortBool{},R} (
        Lbl'Unds'andThenBool'UndsUnds'BOOL'UndsUnds'Bool'Unds'Bool{}(\dv{SortBool{}}("true"),VarK:SortBool{}),
        VarK:SortBool{}),
      \top{R}()))
  [org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(290,8,290,37)"), contentStartColumn{}("8"), org'Stop'kframework'Stop'definition'Stop'Production{}("syntax RuleContent ::= K"), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/Users/manasvi/Projects/k-in-k/ext/k/k-distribution/target/release/k/include/builtin/domains.k)"), contentStartLine{}("290")]

// rule `#if_#then_#else_#fi_K-EQUAL__Bool_K_K`(C,_11,B2)=>B2 requires `notBool_`(C) ensures #token("true","Bool") [contentStartColumn(8) contentStartLine(734) org.kframework.attributes.Location(Location(734,8,734,64)) org.kframework.attributes.Source(Source(/Users/manasvi/Projects/k-in-k/ext/k/k-distribution/target/release/k/include/builtin/domains.k)) org.kframework.definition.Production(syntax RuleContent ::= K "requires" K)]
  axiom{R} \implies{R} (
    \equals{SortBool{},R}(
        LblnotBool'Unds'{}(VarC:SortBool{}),
        \dv{SortBool{}}("true")),
    \and{R} (
      \equals{SortK{},R} (
        Lbl'Hash'if'UndsHash'then'UndsHash'else'UndsHash'fi'Unds'K-EQUAL'UndsUnds'Bool'Unds'K'Unds'K{SortK{}}(VarC:SortBool{},Var'Unds'11:SortK{},VarB2:SortK{}),
        VarB2:SortK{}),
      \top{R}()))
  [org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(734,8,734,64)"), contentStartColumn{}("8"), org'Stop'kframework'Stop'definition'Stop'Production{}("syntax RuleContent ::= K \"requires\" K"), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/Users/manasvi/Projects/k-in-k/ext/k/k-distribution/target/release/k/include/builtin/domains.k)"), contentStartLine{}("734")]

// rule `<T>`(`<k>`(inj{BExp,KItem}(`_<=__IMP-SYNTAX__AExp_AExp`(K0,HOLE))~>DotVar1),DotVar0)=>`<T>`(`<k>`(inj{AExp,KItem}(HOLE)~>`#freezer_<=__IMP-SYNTAX__AExp_AExp0_`(inj{AExp,KItem}(K0))~>DotVar1),DotVar0) requires isKResult(inj{AExp,KItem}(K0)) ensures #token("true","Bool") [heat() latex({#1}\leq{#2}) org.kframework.attributes.Location(Location(11,20,11,94)) org.kframework.attributes.Source(Source(/Users/manasvi/Projects/k-in-k/imp/./imp.k)) productionID(1810923540) seqstrict() symbol(ltAExp)]
  axiom{} \and{SortTCell{}} (
    \equals{SortBool{},SortTCell{}}(
        LblisKResult{}(kseq{}(inj{SortAExp{}, SortKItem{}}(VarK0:SortAExp{}),dotk{}())),
        \dv{SortBool{}}("true")), \and{SortTCell{}} (
    \top{SortTCell{}}(), \rewrites{SortTCell{}}(Lbl'-LT-'T'-GT-'{}(Lbl'-LT-'k'-GT-'{}(kseq{}(inj{SortBExp{}, SortKItem{}}(Lbl'Unds-LT-EqlsUndsUnds'IMP-SYNTAX'UndsUnds'AExp'Unds'AExp{}(VarK0:SortAExp{},VarHOLE:SortAExp{})),VarDotVar1:SortK{})),VarDotVar0:SortStateCell{}),Lbl'-LT-'T'-GT-'{}(Lbl'-LT-'k'-GT-'{}(kseq{}(inj{SortAExp{}, SortKItem{}}(VarHOLE:SortAExp{}),kseq{}(Lbl'Hash'freezer'Unds-LT-EqlsUndsUnds'IMP-SYNTAX'UndsUnds'AExp'Unds'AExp0'Unds'{}(kseq{}(inj{SortAExp{}, SortKItem{}}(VarK0:SortAExp{}),dotk{}())),VarDotVar1:SortK{}))),VarDotVar0:SortStateCell{}))))
  [org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(11,20,11,94)"), seqstrict{}(), heat{}(), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/Users/manasvi/Projects/k-in-k/imp/./imp.k)"), productionID{}("1810923540"), latex{}("{#1}\\leq{#2}"), symbol'Kywd'{}("ltAExp")]

// rule `<T>`(`<k>`(inj{AExp,KItem}(HOLE)~>`#freezer_/__IMP-SYNTAX__AExp_AExp0_`(inj{AExp,KItem}(K0))~>DotVar1),DotVar0)=>`<T>`(`<k>`(inj{AExp,KItem}(`_/__IMP-SYNTAX__AExp_AExp`(K0,HOLE))~>DotVar1),DotVar0) requires #token("true","Bool") ensures #token("true","Bool") [cool() left() org.kframework.attributes.Location(Location(7,20,7,77)) org.kframework.attributes.Source(Source(/Users/manasvi/Projects/k-in-k/imp/./imp.k)) productionID(284686302) strict() symbol(divAExp)]
  axiom{} \and{SortTCell{}} (
    \top{SortTCell{}}(), \and{SortTCell{}} (
    \top{SortTCell{}}(), \rewrites{SortTCell{}}(Lbl'-LT-'T'-GT-'{}(Lbl'-LT-'k'-GT-'{}(kseq{}(inj{SortAExp{}, SortKItem{}}(VarHOLE:SortAExp{}),kseq{}(Lbl'Hash'freezer'UndsSlshUndsUnds'IMP-SYNTAX'UndsUnds'AExp'Unds'AExp0'Unds'{}(kseq{}(inj{SortAExp{}, SortKItem{}}(VarK0:SortAExp{}),dotk{}())),VarDotVar1:SortK{}))),VarDotVar0:SortStateCell{}),Lbl'-LT-'T'-GT-'{}(Lbl'-LT-'k'-GT-'{}(kseq{}(inj{SortAExp{}, SortKItem{}}(Lbl'UndsSlshUndsUnds'IMP-SYNTAX'UndsUnds'AExp'Unds'AExp{}(VarK0:SortAExp{},VarHOLE:SortAExp{})),VarDotVar1:SortK{})),VarDotVar0:SortStateCell{}))))
  [org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(7,20,7,77)"), cool{}(), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/Users/manasvi/Projects/k-in-k/imp/./imp.k)"), left{}(), productionID{}("284686302"), strict{}(""), symbol'Kywd'{}("divAExp")]

// rule isKItem(inj{KItem,KItem}(KItem))=>#token("true","Bool") requires #token("true","Bool") ensures #token("true","Bool") []
  axiom{R} \implies{R} (
    \top{R}(),
    \and{R} (
      \equals{SortBool{},R} (
        LblisKItem{}(kseq{}(inj{SortKItem{}, SortKItem{}}(VarKItem:SortKItem{}),dotk{}())),
        \dv{SortBool{}}("true")),
      \top{R}()))
  []

// rule isKCell(inj{KCell,KItem}(KCell))=>#token("true","Bool") requires #token("true","Bool") ensures #token("true","Bool") []
  axiom{R} \implies{R} (
    \top{R}(),
    \and{R} (
      \equals{SortBool{},R} (
        LblisKCell{}(kseq{}(inj{SortKCell{}, SortKItem{}}(VarKCell:SortKCell{}),dotk{}())),
        \dv{SortBool{}}("true")),
      \top{R}()))
  []

// rule isKItem(inj{Ids,KItem}(Ids))=>#token("true","Bool") requires #token("true","Bool") ensures #token("true","Bool") []
  axiom{R} \implies{R} (
    \top{R}(),
    \and{R} (
      \equals{SortBool{},R} (
        LblisKItem{}(kseq{}(inj{SortIds{}, SortKItem{}}(VarIds:SortIds{}),dotk{}())),
        \dv{SortBool{}}("true")),
      \top{R}()))
  []

// rule isCell(inj{KCell,KItem}(KCell))=>#token("true","Bool") requires #token("true","Bool") ensures #token("true","Bool") []
  axiom{R} \implies{R} (
    \top{R}(),
    \and{R} (
      \equals{SortBool{},R} (
        LblisCell{}(kseq{}(inj{SortKCell{}, SortKItem{}}(VarKCell:SortKCell{}),dotk{}())),
        \dv{SortBool{}}("true")),
      \top{R}()))
  []

// rule `<T>`(`<k>`(inj{AExp,KItem}(HOLE)~>`#freezer_<=__IMP-SYNTAX__AExp_AExp1_`(inj{AExp,KItem}(K1))~>DotVar1),DotVar0)=>`<T>`(`<k>`(inj{BExp,KItem}(`_<=__IMP-SYNTAX__AExp_AExp`(HOLE,K1))~>DotVar1),DotVar0) requires #token("true","Bool") ensures #token("true","Bool") [cool() latex({#1}\leq{#2}) org.kframework.attributes.Location(Location(11,20,11,94)) org.kframework.attributes.Source(Source(/Users/manasvi/Projects/k-in-k/imp/./imp.k)) productionID(1810923540) seqstrict() symbol(ltAExp)]
  axiom{} \and{SortTCell{}} (
    \top{SortTCell{}}(), \and{SortTCell{}} (
    \top{SortTCell{}}(), \rewrites{SortTCell{}}(Lbl'-LT-'T'-GT-'{}(Lbl'-LT-'k'-GT-'{}(kseq{}(inj{SortAExp{}, SortKItem{}}(VarHOLE:SortAExp{}),kseq{}(Lbl'Hash'freezer'Unds-LT-EqlsUndsUnds'IMP-SYNTAX'UndsUnds'AExp'Unds'AExp1'Unds'{}(kseq{}(inj{SortAExp{}, SortKItem{}}(VarK1:SortAExp{}),dotk{}())),VarDotVar1:SortK{}))),VarDotVar0:SortStateCell{}),Lbl'-LT-'T'-GT-'{}(Lbl'-LT-'k'-GT-'{}(kseq{}(inj{SortBExp{}, SortKItem{}}(Lbl'Unds-LT-EqlsUndsUnds'IMP-SYNTAX'UndsUnds'AExp'Unds'AExp{}(VarHOLE:SortAExp{},VarK1:SortAExp{})),VarDotVar1:SortK{})),VarDotVar0:SortStateCell{}))))
  [org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(11,20,11,94)"), cool{}(), seqstrict{}(), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/Users/manasvi/Projects/k-in-k/imp/./imp.k)"), productionID{}("1810923540"), latex{}("{#1}\\leq{#2}"), symbol'Kywd'{}("ltAExp")]

// rule `_orBool__BOOL__Bool_Bool`(_2,#token("true","Bool"))=>#token("true","Bool") requires #token("true","Bool") ensures #token("true","Bool") [contentStartColumn(8) contentStartLine(301) org.kframework.attributes.Location(Location(301,8,301,34)) org.kframework.attributes.Source(Source(/Users/manasvi/Projects/k-in-k/ext/k/k-distribution/target/release/k/include/builtin/domains.k)) org.kframework.definition.Production(syntax RuleContent ::= K)]
  axiom{R} \implies{R} (
    \top{R}(),
    \and{R} (
      \equals{SortBool{},R} (
        Lbl'Unds'orBool'UndsUnds'BOOL'UndsUnds'Bool'Unds'Bool{}(Var'Unds'2:SortBool{},\dv{SortBool{}}("true")),
        \dv{SortBool{}}("true")),
      \top{R}()))
  [org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(301,8,301,34)"), contentStartColumn{}("8"), org'Stop'kframework'Stop'definition'Stop'Production{}("syntax RuleContent ::= K"), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/Users/manasvi/Projects/k-in-k/ext/k/k-distribution/target/release/k/include/builtin/domains.k)"), contentStartLine{}("301")]

// rule isStateCell(inj{StateCell,KItem}(StateCell))=>#token("true","Bool") requires #token("true","Bool") ensures #token("true","Bool") []
  axiom{R} \implies{R} (
    \top{R}(),
    \and{R} (
      \equals{SortBool{},R} (
        LblisStateCell{}(kseq{}(inj{SortStateCell{}, SortKItem{}}(VarStateCell:SortStateCell{}),dotk{}())),
        \dv{SortBool{}}("true")),
      \top{R}()))
  []

// rule `_divInt__INT__Int_Int`(I1,I2)=>`_/Int__INT__Int_Int`(`_-Int__INT__Int_Int`(I1,`_modInt__INT__Int_Int`(I1,I2)),I2) requires `_=/=Int__INT__Int_Int`(I2,#token("0","Int")) ensures #token("true","Bool") [contentStartColumn(8) contentStartLine(371) org.kframework.attributes.Location(Location(371,8,372,23)) org.kframework.attributes.Source(Source(/Users/manasvi/Projects/k-in-k/ext/k/k-distribution/target/release/k/include/builtin/domains.k)) org.kframework.definition.Production(syntax RuleContent ::= K "requires" K)]
  axiom{R} \implies{R} (
    \equals{SortBool{},R}(
        Lbl'UndsEqlsSlshEqls'Int'UndsUnds'INT'UndsUnds'Int'Unds'Int{}(VarI2:SortInt{},\dv{SortInt{}}("0")),
        \dv{SortBool{}}("true")),
    \and{R} (
      \equals{SortInt{},R} (
        Lbl'Unds'divInt'UndsUnds'INT'UndsUnds'Int'Unds'Int{}(VarI1:SortInt{},VarI2:SortInt{}),
        Lbl'UndsSlsh'Int'UndsUnds'INT'UndsUnds'Int'Unds'Int{}(Lbl'Unds'-Int'UndsUnds'INT'UndsUnds'Int'Unds'Int{}(VarI1:SortInt{},Lbl'Unds'modInt'UndsUnds'INT'UndsUnds'Int'Unds'Int{}(VarI1:SortInt{},VarI2:SortInt{})),VarI2:SortInt{})),
      \top{R}()))
  [org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(371,8,372,23)"), contentStartColumn{}("8"), org'Stop'kframework'Stop'definition'Stop'Production{}("syntax RuleContent ::= K \"requires\" K"), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/Users/manasvi/Projects/k-in-k/ext/k/k-distribution/target/release/k/include/builtin/domains.k)"), contentStartLine{}("371")]

// rule `<T>`(`<k>`(inj{AExp,KItem}(HOLE)~>`#freezer_+__IMP-SYNTAX__AExp_AExp1_`(inj{AExp,KItem}(K1))~>DotVar1),DotVar0)=>`<T>`(`<k>`(inj{AExp,KItem}(`_+__IMP-SYNTAX__AExp_AExp`(HOLE,K1))~>DotVar1),DotVar0) requires #token("true","Bool") ensures #token("true","Bool") [cool() left() org.kframework.attributes.Location(Location(8,20,8,77)) org.kframework.attributes.Source(Source(/Users/manasvi/Projects/k-in-k/imp/./imp.k)) productionID(1940445711) strict() symbol(addAExp)]
  axiom{} \and{SortTCell{}} (
    \top{SortTCell{}}(), \and{SortTCell{}} (
    \top{SortTCell{}}(), \rewrites{SortTCell{}}(Lbl'-LT-'T'-GT-'{}(Lbl'-LT-'k'-GT-'{}(kseq{}(inj{SortAExp{}, SortKItem{}}(VarHOLE:SortAExp{}),kseq{}(Lbl'Hash'freezer'UndsPlusUndsUnds'IMP-SYNTAX'UndsUnds'AExp'Unds'AExp1'Unds'{}(kseq{}(inj{SortAExp{}, SortKItem{}}(VarK1:SortAExp{}),dotk{}())),VarDotVar1:SortK{}))),VarDotVar0:SortStateCell{}),Lbl'-LT-'T'-GT-'{}(Lbl'-LT-'k'-GT-'{}(kseq{}(inj{SortAExp{}, SortKItem{}}(Lbl'UndsPlusUndsUnds'IMP-SYNTAX'UndsUnds'AExp'Unds'AExp{}(VarHOLE:SortAExp{},VarK1:SortAExp{})),VarDotVar1:SortK{})),VarDotVar0:SortStateCell{}))))
  [org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(8,20,8,77)"), cool{}(), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/Users/manasvi/Projects/k-in-k/imp/./imp.k)"), left{}(), productionID{}("1940445711"), strict{}(""), symbol'Kywd'{}("addAExp")]

// rule isKItem(inj{Set,KItem}(Set))=>#token("true","Bool") requires #token("true","Bool") ensures #token("true","Bool") []
  axiom{R} \implies{R} (
    \top{R}(),
    \and{R} (
      \equals{SortBool{},R} (
        LblisKItem{}(kseq{}(inj{SortSet{}, SortKItem{}}(VarSet:SortSet{}),dotk{}())),
        \dv{SortBool{}}("true")),
      \top{R}()))
  []

// rule `_impliesBool__BOOL__Bool_Bool`(B,#token("false","Bool"))=>`notBool_`(B) requires #token("true","Bool") ensures #token("true","Bool") [contentStartColumn(8) contentStartLine(313) org.kframework.attributes.Location(Location(313,8,313,45)) org.kframework.attributes.Source(Source(/Users/manasvi/Projects/k-in-k/ext/k/k-distribution/target/release/k/include/builtin/domains.k)) org.kframework.definition.Production(syntax RuleContent ::= K)]
  axiom{R} \implies{R} (
    \top{R}(),
    \and{R} (
      \equals{SortBool{},R} (
        Lbl'Unds'impliesBool'UndsUnds'BOOL'UndsUnds'Bool'Unds'Bool{}(VarB:SortBool{},\dv{SortBool{}}("false")),
        LblnotBool'Unds'{}(VarB:SortBool{})),
      \top{R}()))
  [org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(313,8,313,45)"), contentStartColumn{}("8"), org'Stop'kframework'Stop'definition'Stop'Production{}("syntax RuleContent ::= K"), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/Users/manasvi/Projects/k-in-k/ext/k/k-distribution/target/release/k/include/builtin/domains.k)"), contentStartLine{}("313")]

// rule isKResult(inj{Int,KItem}(Int))=>#token("true","Bool") requires #token("true","Bool") ensures #token("true","Bool") []
  axiom{R} \implies{R} (
    \top{R}(),
    \and{R} (
      \equals{SortBool{},R} (
        LblisKResult{}(kseq{}(inj{SortInt{}, SortKItem{}}(VarInt:SortInt{}),dotk{}())),
        \dv{SortBool{}}("true")),
      \top{R}()))
  []

// rule isBool(inj{Bool,KItem}(Bool))=>#token("true","Bool") requires #token("true","Bool") ensures #token("true","Bool") []
  axiom{R} \implies{R} (
    \top{R}(),
    \and{R} (
      \equals{SortBool{},R} (
        LblisBool{}(kseq{}(inj{SortBool{}, SortKItem{}}(VarBool:SortBool{}),dotk{}())),
        \dv{SortBool{}}("true")),
      \top{R}()))
  []

// rule isString(inj{String,KItem}(String))=>#token("true","Bool") requires #token("true","Bool") ensures #token("true","Bool") []
  axiom{R} \implies{R} (
    \top{R}(),
    \and{R} (
      \equals{SortBool{},R} (
        LblisString{}(kseq{}(inj{SortString{}, SortKItem{}}(VarString:SortString{}),dotk{}())),
        \dv{SortBool{}}("true")),
      \top{R}()))
  []

// rule isStateCellOpt(inj{StateCell,KItem}(StateCell))=>#token("true","Bool") requires #token("true","Bool") ensures #token("true","Bool") []
  axiom{R} \implies{R} (
    \top{R}(),
    \and{R} (
      \equals{SortBool{},R} (
        LblisStateCellOpt{}(kseq{}(inj{SortStateCell{}, SortKItem{}}(VarStateCell:SortStateCell{}),dotk{}())),
        \dv{SortBool{}}("true")),
      \top{R}()))
  []

// rule isKItem(inj{TCellFragment,KItem}(TCellFragment))=>#token("true","Bool") requires #token("true","Bool") ensures #token("true","Bool") []
  axiom{R} \implies{R} (
    \top{R}(),
    \and{R} (
      \equals{SortBool{},R} (
        LblisKItem{}(kseq{}(inj{SortTCellFragment{}, SortKItem{}}(VarTCellFragment:SortTCellFragment{}),dotk{}())),
        \dv{SortBool{}}("true")),
      \top{R}()))
  []

// rule isBool(K)=>#token("false","Bool") requires #token("true","Bool") ensures #token("true","Bool") [owise()]
  axiom{R} \implies{R} (
    \and{R} (
      \not{R} (
        \or{R} (
          \ceil{SortBool{},R} (
            \exists{SortBool{}} (VarBool:SortBool{},
              \and{SortBool{}} (
                \top{SortBool{}}(),
                LblisBool{}(kseq{}(inj{SortBool{}, SortKItem{}}(VarBool:SortBool{}),dotk{}()))))),
        \bottom{R}())),
      \top{R}()),
    \and{R} (
      \equals{SortBool{},R} (
        LblisBool{}(VarK:SortK{}),
        \dv{SortBool{}}("false")),
      \top{R}()))
  [owise{}()]

// rule isKItem(inj{String,KItem}(String))=>#token("true","Bool") requires #token("true","Bool") ensures #token("true","Bool") []
  axiom{R} \implies{R} (
    \top{R}(),
    \and{R} (
      \equals{SortBool{},R} (
        LblisKItem{}(kseq{}(inj{SortString{}, SortKItem{}}(VarString:SortString{}),dotk{}())),
        \dv{SortBool{}}("true")),
      \top{R}()))
  []

// rule `_xorBool__BOOL__Bool_Bool`(B,#token("false","Bool"))=>B requires #token("true","Bool") ensures #token("true","Bool") [contentStartColumn(8) contentStartLine(296) org.kframework.attributes.Location(Location(296,8,296,38)) org.kframework.attributes.Source(Source(/Users/manasvi/Projects/k-in-k/ext/k/k-distribution/target/release/k/include/builtin/domains.k)) org.kframework.definition.Production(syntax RuleContent ::= K)]
  axiom{R} \implies{R} (
    \top{R}(),
    \and{R} (
      \equals{SortBool{},R} (
        Lbl'Unds'xorBool'UndsUnds'BOOL'UndsUnds'Bool'Unds'Bool{}(VarB:SortBool{},\dv{SortBool{}}("false")),
        VarB:SortBool{}),
      \top{R}()))
  [org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(296,8,296,38)"), contentStartColumn{}("8"), org'Stop'kframework'Stop'definition'Stop'Production{}("syntax RuleContent ::= K"), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/Users/manasvi/Projects/k-in-k/ext/k/k-distribution/target/release/k/include/builtin/domains.k)"), contentStartLine{}("296")]

// rule isBExp(inj{Bool,KItem}(Bool))=>#token("true","Bool") requires #token("true","Bool") ensures #token("true","Bool") []
  axiom{R} \implies{R} (
    \top{R}(),
    \and{R} (
      \equals{SortBool{},R} (
        LblisBExp{}(kseq{}(inj{SortBool{}, SortKItem{}}(VarBool:SortBool{}),dotk{}())),
        \dv{SortBool{}}("true")),
      \top{R}()))
  []

// rule initKCell(Init)=>`<k>`(`Map:lookup`(Init,inj{KConfigVar,KItem}(#token("$PGM","KConfigVar")))) requires #token("true","Bool") ensures #token("true","Bool") [initializer()]
  axiom{R} \implies{R} (
    \top{R}(),
    \and{R} (
      \equals{SortKCell{},R} (
        LblinitKCell{}(VarInit:SortMap{}),
        Lbl'-LT-'k'-GT-'{}(LblMap'Coln'lookup{}(VarInit:SortMap{},kseq{}(inj{SortKConfigVar{}, SortKItem{}}(\dv{SortKConfigVar{}}("$PGM")),dotk{}())))),
      \top{R}()))
  [initializer{}()]

// rule `_<=String__STRING__String_String`(S1,S2)=>`notBool_`(`_<String__STRING__String_String`(S2,S1)) requires #token("true","Bool") ensures #token("true","Bool") [contentStartColumn(8) contentStartLine(532) org.kframework.attributes.Location(Location(532,8,532,63)) org.kframework.attributes.Source(Source(/Users/manasvi/Projects/k-in-k/ext/k/k-distribution/target/release/k/include/builtin/domains.k)) org.kframework.definition.Production(syntax RuleContent ::= K)]
  axiom{R} \implies{R} (
    \top{R}(),
    \and{R} (
      \equals{SortBool{},R} (
        Lbl'Unds-LT-Eqls'String'UndsUnds'STRING'UndsUnds'String'Unds'String{}(VarS1:SortString{},VarS2:SortString{}),
        LblnotBool'Unds'{}(Lbl'Unds-LT-'String'UndsUnds'STRING'UndsUnds'String'Unds'String{}(VarS2:SortString{},VarS1:SortString{}))),
      \top{R}()))
  [org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(532,8,532,63)"), contentStartColumn{}("8"), org'Stop'kframework'Stop'definition'Stop'Production{}("syntax RuleContent ::= K"), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/Users/manasvi/Projects/k-in-k/ext/k/k-distribution/target/release/k/include/builtin/domains.k)"), contentStartLine{}("532")]

// rule isKItem(inj{Float,KItem}(Float))=>#token("true","Bool") requires #token("true","Bool") ensures #token("true","Bool") []
  axiom{R} \implies{R} (
    \top{R}(),
    \and{R} (
      \equals{SortBool{},R} (
        LblisKItem{}(kseq{}(inj{SortFloat{}, SortKItem{}}(VarFloat:SortFloat{}),dotk{}())),
        \dv{SortBool{}}("true")),
      \top{R}()))
  []

// rule `replaceFirst(_,_,_)_STRING__String_String_String`(Source,ToReplace,_16)=>Source requires `_<Int__INT__Int_Int`(`findString(_,_,_)_STRING__String_String_Int`(Source,ToReplace,#token("0","Int")),#token("0","Int")) ensures #token("true","Bool") [contentStartColumn(8) contentStartLine(549) org.kframework.attributes.Location(Location(549,8,550,57)) org.kframework.attributes.Source(Source(/Users/manasvi/Projects/k-in-k/ext/k/k-distribution/target/release/k/include/builtin/domains.k)) org.kframework.definition.Production(syntax RuleContent ::= K "requires" K)]
  axiom{R} \implies{R} (
    \equals{SortBool{},R}(
        Lbl'Unds-LT-'Int'UndsUnds'INT'UndsUnds'Int'Unds'Int{}(LblfindString'LParUndsCommUndsCommUndsRParUnds'STRING'UndsUnds'String'Unds'String'Unds'Int{}(VarSource:SortString{},VarToReplace:SortString{},\dv{SortInt{}}("0")),\dv{SortInt{}}("0")),
        \dv{SortBool{}}("true")),
    \and{R} (
      \equals{SortString{},R} (
        LblreplaceFirst'LParUndsCommUndsCommUndsRParUnds'STRING'UndsUnds'String'Unds'String'Unds'String{}(VarSource:SortString{},VarToReplace:SortString{},Var'Unds'16:SortString{}),
        VarSource:SortString{}),
      \top{R}()))
  [org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(549,8,550,57)"), contentStartColumn{}("8"), org'Stop'kframework'Stop'definition'Stop'Production{}("syntax RuleContent ::= K \"requires\" K"), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/Users/manasvi/Projects/k-in-k/ext/k/k-distribution/target/release/k/include/builtin/domains.k)"), contentStartLine{}("549")]

// rule `<T>`(`<k>`(inj{BExp,KItem}(`!__IMP-SYNTAX__BExp`(HOLE))~>DotVar1),DotVar0)=>`<T>`(`<k>`(inj{BExp,KItem}(HOLE)~>`#freezer!__IMP-SYNTAX__BExp0_`(.KList)~>DotVar1),DotVar0) requires #token("true","Bool") ensures #token("true","Bool") [heat() org.kframework.attributes.Location(Location(12,20,12,77)) org.kframework.attributes.Source(Source(/Users/manasvi/Projects/k-in-k/imp/./imp.k)) productionID(1581078471) strict() symbol(unaryNegation)]
  axiom{} \and{SortTCell{}} (
    \top{SortTCell{}}(), \and{SortTCell{}} (
    \top{SortTCell{}}(), \rewrites{SortTCell{}}(Lbl'-LT-'T'-GT-'{}(Lbl'-LT-'k'-GT-'{}(kseq{}(inj{SortBExp{}, SortKItem{}}(Lbl'BangUndsUnds'IMP-SYNTAX'UndsUnds'BExp{}(VarHOLE:SortBExp{})),VarDotVar1:SortK{})),VarDotVar0:SortStateCell{}),Lbl'-LT-'T'-GT-'{}(Lbl'-LT-'k'-GT-'{}(kseq{}(inj{SortBExp{}, SortKItem{}}(VarHOLE:SortBExp{}),kseq{}(Lbl'Hash'freezer'BangUndsUnds'IMP-SYNTAX'UndsUnds'BExp0'Unds'{}(),VarDotVar1:SortK{}))),VarDotVar0:SortStateCell{}))))
  [org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(12,20,12,77)"), heat{}(), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/Users/manasvi/Projects/k-in-k/imp/./imp.k)"), productionID{}("1581078471"), strict{}(""), symbol'Kywd'{}("unaryNegation")]

// rule isCell(inj{Cell,KItem}(Cell))=>#token("true","Bool") requires #token("true","Bool") ensures #token("true","Bool") []
  axiom{R} \implies{R} (
    \top{R}(),
    \and{R} (
      \equals{SortBool{},R} (
        LblisCell{}(kseq{}(inj{SortCell{}, SortKItem{}}(VarCell:SortCell{}),dotk{}())),
        \dv{SortBool{}}("true")),
      \top{R}()))
  []

// rule `<T>`(`<k>`(inj{AExp,KItem}(HOLE)~>`#freezer_/__IMP-SYNTAX__AExp_AExp1_`(inj{AExp,KItem}(K1))~>DotVar1),DotVar0)=>`<T>`(`<k>`(inj{AExp,KItem}(`_/__IMP-SYNTAX__AExp_AExp`(HOLE,K1))~>DotVar1),DotVar0) requires #token("true","Bool") ensures #token("true","Bool") [cool() left() org.kframework.attributes.Location(Location(7,20,7,77)) org.kframework.attributes.Source(Source(/Users/manasvi/Projects/k-in-k/imp/./imp.k)) productionID(284686302) strict() symbol(divAExp)]
  axiom{} \and{SortTCell{}} (
    \top{SortTCell{}}(), \and{SortTCell{}} (
    \top{SortTCell{}}(), \rewrites{SortTCell{}}(Lbl'-LT-'T'-GT-'{}(Lbl'-LT-'k'-GT-'{}(kseq{}(inj{SortAExp{}, SortKItem{}}(VarHOLE:SortAExp{}),kseq{}(Lbl'Hash'freezer'UndsSlshUndsUnds'IMP-SYNTAX'UndsUnds'AExp'Unds'AExp1'Unds'{}(kseq{}(inj{SortAExp{}, SortKItem{}}(VarK1:SortAExp{}),dotk{}())),VarDotVar1:SortK{}))),VarDotVar0:SortStateCell{}),Lbl'-LT-'T'-GT-'{}(Lbl'-LT-'k'-GT-'{}(kseq{}(inj{SortAExp{}, SortKItem{}}(Lbl'UndsSlshUndsUnds'IMP-SYNTAX'UndsUnds'AExp'Unds'AExp{}(VarHOLE:SortAExp{},VarK1:SortAExp{})),VarDotVar1:SortK{})),VarDotVar0:SortStateCell{}))))
  [org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(7,20,7,77)"), cool{}(), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/Users/manasvi/Projects/k-in-k/imp/./imp.k)"), left{}(), productionID{}("284686302"), strict{}(""), symbol'Kywd'{}("divAExp")]

// rule `<T>`(`<k>`(inj{Stmt,KItem}(`___IMP-SYNTAX__Stmt_Stmt`(S1,S2))~>DotVar1),DotVar0)=>`<T>`(`<k>`(inj{Stmt,KItem}(S1)~>inj{Stmt,KItem}(S2)~>DotVar1),DotVar0) requires #token("true","Bool") ensures #token("true","Bool") [contentStartColumn(8) contentStartLine(53) org.kframework.attributes.Location(Location(53,8,53,35)) org.kframework.attributes.Source(Source(/Users/manasvi/Projects/k-in-k/imp/./imp.k)) org.kframework.definition.Production(syntax RuleContent ::= K) structural()]
  axiom{} \and{SortTCell{}} (
    \top{SortTCell{}}(), \and{SortTCell{}} (
    \top{SortTCell{}}(), \rewrites{SortTCell{}}(Lbl'-LT-'T'-GT-'{}(Lbl'-LT-'k'-GT-'{}(kseq{}(inj{SortStmt{}, SortKItem{}}(Lbl'UndsUndsUnds'IMP-SYNTAX'UndsUnds'Stmt'Unds'Stmt{}(VarS1:SortStmt{},VarS2:SortStmt{})),VarDotVar1:SortK{})),VarDotVar0:SortStateCell{}),Lbl'-LT-'T'-GT-'{}(Lbl'-LT-'k'-GT-'{}(kseq{}(inj{SortStmt{}, SortKItem{}}(VarS1:SortStmt{}),kseq{}(inj{SortStmt{}, SortKItem{}}(VarS2:SortStmt{}),VarDotVar1:SortK{}))),VarDotVar0:SortStateCell{}))))
  [org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(53,8,53,35)"), contentStartColumn{}("8"), org'Stop'kframework'Stop'definition'Stop'Production{}("syntax RuleContent ::= K"), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/Users/manasvi/Projects/k-in-k/imp/./imp.k)"), contentStartLine{}("53"), structural{}()]

// rule isKItem(inj{KCellOpt,KItem}(KCellOpt))=>#token("true","Bool") requires #token("true","Bool") ensures #token("true","Bool") []
  axiom{R} \implies{R} (
    \top{R}(),
    \and{R} (
      \equals{SortBool{},R} (
        LblisKItem{}(kseq{}(inj{SortKCellOpt{}, SortKItem{}}(VarKCellOpt:SortKCellOpt{}),dotk{}())),
        \dv{SortBool{}}("true")),
      \top{R}()))
  []

// rule isStmt(inj{Stmt,KItem}(Stmt))=>#token("true","Bool") requires #token("true","Bool") ensures #token("true","Bool") []
  axiom{R} \implies{R} (
    \top{R}(),
    \and{R} (
      \equals{SortBool{},R} (
        LblisStmt{}(kseq{}(inj{SortStmt{}, SortKItem{}}(VarStmt:SortStmt{}),dotk{}())),
        \dv{SortBool{}}("true")),
      \top{R}()))
  []

// rule initTCell(Init)=>`<T>`(initKCell(Init),initStateCell(.KList)) requires #token("true","Bool") ensures #token("true","Bool") [initializer()]
  axiom{R} \implies{R} (
    \top{R}(),
    \and{R} (
      \equals{SortTCell{},R} (
        LblinitTCell{}(VarInit:SortMap{}),
        Lbl'-LT-'T'-GT-'{}(LblinitKCell{}(VarInit:SortMap{}),LblinitStateCell{}())),
      \top{R}()))
  [initializer{}()]

// rule `_orElseBool__BOOL__Bool_Bool`(#token("false","Bool"),K)=>K requires #token("true","Bool") ensures #token("true","Bool") [contentStartColumn(8) contentStartLine(307) org.kframework.attributes.Location(Location(307,8,307,37)) org.kframework.attributes.Source(Source(/Users/manasvi/Projects/k-in-k/ext/k/k-distribution/target/release/k/include/builtin/domains.k)) org.kframework.definition.Production(syntax RuleContent ::= K)]
  axiom{R} \implies{R} (
    \top{R}(),
    \and{R} (
      \equals{SortBool{},R} (
        Lbl'Unds'orElseBool'UndsUnds'BOOL'UndsUnds'Bool'Unds'Bool{}(\dv{SortBool{}}("false"),VarK:SortBool{}),
        VarK:SortBool{}),
      \top{R}()))
  [org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(307,8,307,37)"), contentStartColumn{}("8"), org'Stop'kframework'Stop'definition'Stop'Production{}("syntax RuleContent ::= K"), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/Users/manasvi/Projects/k-in-k/ext/k/k-distribution/target/release/k/include/builtin/domains.k)"), contentStartLine{}("307")]

// rule `_xorBool__BOOL__Bool_Bool`(#token("false","Bool"),B)=>B requires #token("true","Bool") ensures #token("true","Bool") [contentStartColumn(8) contentStartLine(295) org.kframework.attributes.Location(Location(295,8,295,38)) org.kframework.attributes.Source(Source(/Users/manasvi/Projects/k-in-k/ext/k/k-distribution/target/release/k/include/builtin/domains.k)) org.kframework.definition.Production(syntax RuleContent ::= K)]
  axiom{R} \implies{R} (
    \top{R}(),
    \and{R} (
      \equals{SortBool{},R} (
        Lbl'Unds'xorBool'UndsUnds'BOOL'UndsUnds'Bool'Unds'Bool{}(\dv{SortBool{}}("false"),VarB:SortBool{}),
        VarB:SortBool{}),
      \top{R}()))
  [org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(295,8,295,38)"), contentStartColumn{}("8"), org'Stop'kframework'Stop'definition'Stop'Production{}("syntax RuleContent ::= K"), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/Users/manasvi/Projects/k-in-k/ext/k/k-distribution/target/release/k/include/builtin/domains.k)"), contentStartLine{}("295")]

// rule `<T>`(`<k>`(inj{Pgm,KItem}(`int_;__IMP-SYNTAX__Ids_Stmt`(`_,__IMP-SYNTAX__Id_Ids`(X,Xs),_22))),`<state>`(`_Map_`(Rho,`.Map`(.KList))))=>`<T>`(`<k>`(inj{Pgm,KItem}(`int_;__IMP-SYNTAX__Ids_Stmt`(Xs,_22))),`<state>`(`_Map_`(Rho,`_|->_`(inj{Id,KItem}(X),inj{Int,KItem}(#token("0","Int")))))) requires `notBool_`(`Set:in`(inj{Id,KItem}(X),`keys(_)_MAP__Map`(Rho))) ensures #token("true","Bool") [contentStartColumn(8) contentStartLine(58) org.kframework.attributes.Location(Location(58,8,59,38)) org.kframework.attributes.Source(Source(/Users/manasvi/Projects/k-in-k/imp/./imp.k)) org.kframework.definition.Production(syntax RuleContent ::= K "requires" K)]
  axiom{} \and{SortTCell{}} (
    \equals{SortBool{},SortTCell{}}(
        LblnotBool'Unds'{}(LblSet'Coln'in{}(kseq{}(inj{SortId{}, SortKItem{}}(VarX:SortId{}),dotk{}()),Lblkeys'LParUndsRParUnds'MAP'UndsUnds'Map{}(VarRho:SortMap{}))),
        \dv{SortBool{}}("true")), \and{SortTCell{}} (
    \top{SortTCell{}}(), \rewrites{SortTCell{}}(Lbl'-LT-'T'-GT-'{}(Lbl'-LT-'k'-GT-'{}(kseq{}(inj{SortPgm{}, SortKItem{}}(Lblint'UndsSClnUndsUnds'IMP-SYNTAX'UndsUnds'Ids'Unds'Stmt{}(Lbl'UndsCommUndsUnds'IMP-SYNTAX'UndsUnds'Id'Unds'Ids{}(VarX:SortId{},VarXs:SortIds{}),Var'Unds'22:SortStmt{})),dotk{}())),Lbl'-LT-'state'-GT-'{}(Lbl'Unds'Map'Unds'{}(VarRho:SortMap{},Lbl'Stop'Map{}()))),Lbl'-LT-'T'-GT-'{}(Lbl'-LT-'k'-GT-'{}(kseq{}(inj{SortPgm{}, SortKItem{}}(Lblint'UndsSClnUndsUnds'IMP-SYNTAX'UndsUnds'Ids'Unds'Stmt{}(VarXs:SortIds{},Var'Unds'22:SortStmt{})),dotk{}())),Lbl'-LT-'state'-GT-'{}(Lbl'Unds'Map'Unds'{}(VarRho:SortMap{},Lbl'UndsPipe'-'-GT-Unds'{}(kseq{}(inj{SortId{}, SortKItem{}}(VarX:SortId{}),dotk{}()),kseq{}(inj{SortInt{}, SortKItem{}}(\dv{SortInt{}}("0")),dotk{}()))))))))
  [org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(58,8,59,38)"), contentStartColumn{}("8"), org'Stop'kframework'Stop'definition'Stop'Production{}("syntax RuleContent ::= K \"requires\" K"), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/Users/manasvi/Projects/k-in-k/imp/./imp.k)"), contentStartLine{}("58")]

// rule isMap(inj{Map,KItem}(Map))=>#token("true","Bool") requires #token("true","Bool") ensures #token("true","Bool") []
  axiom{R} \implies{R} (
    \top{R}(),
    \and{R} (
      \equals{SortBool{},R} (
        LblisMap{}(kseq{}(inj{SortMap{}, SortKItem{}}(VarMap:SortMap{}),dotk{}())),
        \dv{SortBool{}}("true")),
      \top{R}()))
  []

// rule `<T>`(`<k>`(inj{Stmt,KItem}(`if(_)_else__IMP-SYNTAX__BExp_Block_Block`(HOLE,K1,K2))~>DotVar1),DotVar0)=>`<T>`(`<k>`(inj{BExp,KItem}(HOLE)~>`#freezerif(_)_else__IMP-SYNTAX__BExp_Block_Block1_`(inj{Block,KItem}(K1),inj{Block,KItem}(K2))~>DotVar1),DotVar0) requires #token("true","Bool") ensures #token("true","Bool") [heat() org.kframework.attributes.Location(Location(19,20,20,70)) org.kframework.attributes.Source(Source(/Users/manasvi/Projects/k-in-k/imp/./imp.k)) productionID(1350751778) strict(1) symbol(ite)]
  axiom{} \and{SortTCell{}} (
    \top{SortTCell{}}(), \and{SortTCell{}} (
    \top{SortTCell{}}(), \rewrites{SortTCell{}}(Lbl'-LT-'T'-GT-'{}(Lbl'-LT-'k'-GT-'{}(kseq{}(inj{SortStmt{}, SortKItem{}}(Lblif'LParUndsRParUnds'else'UndsUnds'IMP-SYNTAX'UndsUnds'BExp'Unds'Block'Unds'Block{}(VarHOLE:SortBExp{},VarK1:SortBlock{},VarK2:SortBlock{})),VarDotVar1:SortK{})),VarDotVar0:SortStateCell{}),Lbl'-LT-'T'-GT-'{}(Lbl'-LT-'k'-GT-'{}(kseq{}(inj{SortBExp{}, SortKItem{}}(VarHOLE:SortBExp{}),kseq{}(Lbl'Hash'freezerif'LParUndsRParUnds'else'UndsUnds'IMP-SYNTAX'UndsUnds'BExp'Unds'Block'Unds'Block1'Unds'{}(kseq{}(inj{SortBlock{}, SortKItem{}}(VarK1:SortBlock{}),dotk{}()),kseq{}(inj{SortBlock{}, SortKItem{}}(VarK2:SortBlock{}),dotk{}())),VarDotVar1:SortK{}))),VarDotVar0:SortStateCell{}))))
  [org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(19,20,20,70)"), heat{}(), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/Users/manasvi/Projects/k-in-k/imp/./imp.k)"), productionID{}("1350751778"), strict{}("1"), symbol'Kywd'{}("ite")]

// rule `bitRangeInt(_,_,_)_INT__Int_Int_Int`(I,IDX,LEN)=>`_modInt__INT__Int_Int`(`_>>Int__INT__Int_Int`(I,IDX),`_<<Int__INT__Int_Int`(#token("1","Int"),LEN)) requires #token("true","Bool") ensures #token("true","Bool") [contentStartColumn(8) contentStartLine(367) org.kframework.attributes.Location(Location(367,8,367,70)) org.kframework.attributes.Source(Source(/Users/manasvi/Projects/k-in-k/ext/k/k-distribution/target/release/k/include/builtin/domains.k)) org.kframework.definition.Production(syntax RuleContent ::= K)]
  axiom{R} \implies{R} (
    \top{R}(),
    \and{R} (
      \equals{SortInt{},R} (
        LblbitRangeInt'LParUndsCommUndsCommUndsRParUnds'INT'UndsUnds'Int'Unds'Int'Unds'Int{}(VarI:SortInt{},VarIDX:SortInt{},VarLEN:SortInt{}),
        Lbl'Unds'modInt'UndsUnds'INT'UndsUnds'Int'Unds'Int{}(Lbl'Unds-GT--GT-'Int'UndsUnds'INT'UndsUnds'Int'Unds'Int{}(VarI:SortInt{},VarIDX:SortInt{}),Lbl'Unds-LT--LT-'Int'UndsUnds'INT'UndsUnds'Int'Unds'Int{}(\dv{SortInt{}}("1"),VarLEN:SortInt{}))),
      \top{R}()))
  [org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(367,8,367,70)"), contentStartColumn{}("8"), org'Stop'kframework'Stop'definition'Stop'Production{}("syntax RuleContent ::= K"), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/Users/manasvi/Projects/k-in-k/ext/k/k-distribution/target/release/k/include/builtin/domains.k)"), contentStartLine{}("367")]

// rule `<T>`(`<k>`(inj{AExp,KItem}(HOLE)~>`#freezer_+__IMP-SYNTAX__AExp_AExp0_`(inj{AExp,KItem}(K0))~>DotVar1),DotVar0)=>`<T>`(`<k>`(inj{AExp,KItem}(`_+__IMP-SYNTAX__AExp_AExp`(K0,HOLE))~>DotVar1),DotVar0) requires #token("true","Bool") ensures #token("true","Bool") [cool() left() org.kframework.attributes.Location(Location(8,20,8,77)) org.kframework.attributes.Source(Source(/Users/manasvi/Projects/k-in-k/imp/./imp.k)) productionID(1940445711) strict() symbol(addAExp)]
  axiom{} \and{SortTCell{}} (
    \top{SortTCell{}}(), \and{SortTCell{}} (
    \top{SortTCell{}}(), \rewrites{SortTCell{}}(Lbl'-LT-'T'-GT-'{}(Lbl'-LT-'k'-GT-'{}(kseq{}(inj{SortAExp{}, SortKItem{}}(VarHOLE:SortAExp{}),kseq{}(Lbl'Hash'freezer'UndsPlusUndsUnds'IMP-SYNTAX'UndsUnds'AExp'Unds'AExp0'Unds'{}(kseq{}(inj{SortAExp{}, SortKItem{}}(VarK0:SortAExp{}),dotk{}())),VarDotVar1:SortK{}))),VarDotVar0:SortStateCell{}),Lbl'-LT-'T'-GT-'{}(Lbl'-LT-'k'-GT-'{}(kseq{}(inj{SortAExp{}, SortKItem{}}(Lbl'UndsPlusUndsUnds'IMP-SYNTAX'UndsUnds'AExp'Unds'AExp{}(VarK0:SortAExp{},VarHOLE:SortAExp{})),VarDotVar1:SortK{})),VarDotVar0:SortStateCell{}))))
  [org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(8,20,8,77)"), cool{}(), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/Users/manasvi/Projects/k-in-k/imp/./imp.k)"), left{}(), productionID{}("1940445711"), strict{}(""), symbol'Kywd'{}("addAExp")]

// rule `<T>`(`<k>`(inj{Stmt,KItem}(`_=_;_IMP-SYNTAX__Id_AExp`(X,inj{Int,AExp}(I)))~>DotVar1),`<state>`(`_Map_`(`_|->_`(inj{Id,KItem}(X),_23),DotVar2)))=>`<T>`(`<k>`(DotVar1),`<state>`(`_Map_`(`_|->_`(inj{Id,KItem}(X),inj{Int,KItem}(I)),DotVar2))) requires #token("true","Bool") ensures #token("true","Bool") [contentStartColumn(8) contentStartLine(52) org.kframework.attributes.Location(Location(52,8,52,73)) org.kframework.attributes.Source(Source(/Users/manasvi/Projects/k-in-k/imp/./imp.k)) org.kframework.definition.Production(syntax RuleContent ::= K)]
  axiom{} \and{SortTCell{}} (
    \top{SortTCell{}}(), \and{SortTCell{}} (
    \top{SortTCell{}}(), \rewrites{SortTCell{}}(Lbl'-LT-'T'-GT-'{}(Lbl'-LT-'k'-GT-'{}(kseq{}(inj{SortStmt{}, SortKItem{}}(Lbl'UndsEqlsUndsSClnUnds'IMP-SYNTAX'UndsUnds'Id'Unds'AExp{}(VarX:SortId{},inj{SortInt{}, SortAExp{}}(VarI:SortInt{}))),VarDotVar1:SortK{})),Lbl'-LT-'state'-GT-'{}(Lbl'Unds'Map'Unds'{}(Lbl'UndsPipe'-'-GT-Unds'{}(kseq{}(inj{SortId{}, SortKItem{}}(VarX:SortId{}),dotk{}()),Var'Unds'23:SortK{}),VarDotVar2:SortMap{}))),Lbl'-LT-'T'-GT-'{}(Lbl'-LT-'k'-GT-'{}(VarDotVar1:SortK{}),Lbl'-LT-'state'-GT-'{}(Lbl'Unds'Map'Unds'{}(Lbl'UndsPipe'-'-GT-Unds'{}(kseq{}(inj{SortId{}, SortKItem{}}(VarX:SortId{}),dotk{}()),kseq{}(inj{SortInt{}, SortKItem{}}(VarI:SortInt{}),dotk{}())),VarDotVar2:SortMap{}))))))
  [org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(52,8,52,73)"), contentStartColumn{}("8"), org'Stop'kframework'Stop'definition'Stop'Production{}("syntax RuleContent ::= K"), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/Users/manasvi/Projects/k-in-k/imp/./imp.k)"), contentStartLine{}("52")]

// rule isKResult(inj{Bool,KItem}(Bool))=>#token("true","Bool") requires #token("true","Bool") ensures #token("true","Bool") []
  axiom{R} \implies{R} (
    \top{R}(),
    \and{R} (
      \equals{SortBool{},R} (
        LblisKResult{}(kseq{}(inj{SortBool{}, SortKItem{}}(VarBool:SortBool{}),dotk{}())),
        \dv{SortBool{}}("true")),
      \top{R}()))
  []

// rule isKItem(inj{Bool,KItem}(Bool))=>#token("true","Bool") requires #token("true","Bool") ensures #token("true","Bool") []
  axiom{R} \implies{R} (
    \top{R}(),
    \and{R} (
      \equals{SortBool{},R} (
        LblisKItem{}(kseq{}(inj{SortBool{}, SortKItem{}}(VarBool:SortBool{}),dotk{}())),
        \dv{SortBool{}}("true")),
      \top{R}()))
  []

// rule isCell(inj{StateCell,KItem}(StateCell))=>#token("true","Bool") requires #token("true","Bool") ensures #token("true","Bool") []
  axiom{R} \implies{R} (
    \top{R}(),
    \and{R} (
      \equals{SortBool{},R} (
        LblisCell{}(kseq{}(inj{SortStateCell{}, SortKItem{}}(VarStateCell:SortStateCell{}),dotk{}())),
        \dv{SortBool{}}("true")),
      \top{R}()))
  []

// rule isBExp(inj{BExp,KItem}(BExp))=>#token("true","Bool") requires #token("true","Bool") ensures #token("true","Bool") []
  axiom{R} \implies{R} (
    \top{R}(),
    \and{R} (
      \equals{SortBool{},R} (
        LblisBExp{}(kseq{}(inj{SortBExp{}, SortKItem{}}(VarBExp:SortBExp{}),dotk{}())),
        \dv{SortBool{}}("true")),
      \top{R}()))
  []

// rule `#stdout_K-IO_`(.KList)=>#token("1","Int") requires #token("true","Bool") ensures #token("true","Bool") [contentStartColumn(8) contentStartLine(861) org.kframework.attributes.Location(Location(861,8,861,20)) org.kframework.attributes.Source(Source(/Users/manasvi/Projects/k-in-k/ext/k/k-distribution/target/release/k/include/builtin/domains.k)) org.kframework.definition.Production(syntax RuleContent ::= K)]
  axiom{R} \implies{R} (
    \top{R}(),
    \and{R} (
      \equals{SortInt{},R} (
        Lbl'Hash'stdout'Unds'K-IO'Unds'{}(),
        \dv{SortInt{}}("1")),
      \top{R}()))
  [org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(861,8,861,20)"), contentStartColumn{}("8"), org'Stop'kframework'Stop'definition'Stop'Production{}("syntax RuleContent ::= K"), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/Users/manasvi/Projects/k-in-k/ext/k/k-distribution/target/release/k/include/builtin/domains.k)"), contentStartLine{}("861")]

// rule `_=/=Int__INT__Int_Int`(I1,I2)=>`notBool_`(`_==Int__INT__Int_Int`(I1,I2)) requires #token("true","Bool") ensures #token("true","Bool") [contentStartColumn(8) contentStartLine(391) org.kframework.attributes.Location(Location(391,8,391,53)) org.kframework.attributes.Source(Source(/Users/manasvi/Projects/k-in-k/ext/k/k-distribution/target/release/k/include/builtin/domains.k)) org.kframework.definition.Production(syntax RuleContent ::= K)]
  axiom{R} \implies{R} (
    \top{R}(),
    \and{R} (
      \equals{SortBool{},R} (
        Lbl'UndsEqlsSlshEqls'Int'UndsUnds'INT'UndsUnds'Int'Unds'Int{}(VarI1:SortInt{},VarI2:SortInt{}),
        LblnotBool'Unds'{}(Lbl'UndsEqlsEqls'Int'UndsUnds'INT'UndsUnds'Int'Unds'Int{}(VarI1:SortInt{},VarI2:SortInt{}))),
      \top{R}()))
  [org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(391,8,391,53)"), contentStartColumn{}("8"), org'Stop'kframework'Stop'definition'Stop'Production{}("syntax RuleContent ::= K"), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/Users/manasvi/Projects/k-in-k/ext/k/k-distribution/target/release/k/include/builtin/domains.k)"), contentStartLine{}("391")]

endmodule [org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(28,1,61,9)"), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/Users/manasvi/Projects/k-in-k/imp/./imp.k)")]
